const { launchPuppeteer, createPage, cleanupChromeTempFiles } = require('./puppeteer-utils');
const fs = require('fs');

class WolmarLoginEnhanced {
    constructor() {
        this.browser = null;
        this.page = null;
        this.credentials = {
            username: 'hippo26',
            password: 'Gopapopa326'
        };
    }

    async init() {
        console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...');
        this.browser = await launchPuppeteer();
        this.page = await createPage(this.browser);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
        await this.page.setViewport({ width: 1280, height: 720 });
        
        console.log('‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    async findLoginButton() {
        console.log('üîç –ò—â–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞...');
        
        // –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞
        const loginSelectors = [
            // –ü–æ —Ç–µ–∫—Å—Ç—É "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"
            '//a[contains(text(), "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")]',
            '//button[contains(text(), "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")]',
            '//*[contains(text(), "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")]',
            
            // –ü–æ —Ç–µ–∫—Å—Ç—É "–í–æ–π—Ç–∏"
            '//a[contains(text(), "–í–æ–π—Ç–∏")]',
            '//button[contains(text(), "–í–æ–π—Ç–∏")]',
            '//*[contains(text(), "–í–æ–π—Ç–∏")]',
            
            // –ü–æ href
            '//a[contains(@href, "login")]',
            '//a[contains(@href, "auth")]',
            
            // –ü–æ –∫–ª–∞—Å—Å–∞–º –∏ ID
            '//a[contains(@class, "login")]',
            '//a[contains(@class, "auth")]',
            '//button[contains(@class, "login")]',
            '//button[contains(@class, "auth")]',
            
            // CSS —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
            'a[href*="login"]',
            'a[href*="auth"]',
            'button[class*="login"]',
            'button[class*="auth"]',
            '.login-btn',
            '.auth-btn',
            '#login-btn',
            '#auth-btn'
        ];

        for (const selector of loginSelectors) {
            try {
                let elements;
                
                if (selector.startsWith('//')) {
                    // XPath —Å–µ–ª–µ–∫—Ç–æ—Ä
                    elements = await this.page.$x(selector);
                } else {
                    // CSS —Å–µ–ª–µ–∫—Ç–æ—Ä
                    elements = await this.page.$$(selector);
                }
                
                if (elements.length > 0) {
                    console.log(`‚úÖ –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: ${selector}`);
                    return elements[0];
                }
            } catch (e) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤
            }
        }

        console.log('‚ùå –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∏ –ø–æ –æ–¥–Ω–æ–º—É —Å–µ–ª–µ–∫—Ç–æ—Ä—É');
        return null;
    }

    async findFormFields() {
        console.log('üîç –ò—â–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞...');
        
        // –ò—â–µ–º –ø–æ–ª–µ –ª–æ–≥–∏–Ω–∞
        const usernameSelectors = [
            'input[name="login"]',
            'input[name="username"]',
            'input[name="email"]',
            'input[type="text"]',
            '#username',
            '#login',
            '#email'
        ];

        let usernameField = null;
        for (const selector of usernameSelectors) {
            try {
                usernameField = await this.page.$(selector);
                if (usernameField) {
                    console.log(`‚úÖ –ü–æ–ª–µ –ª–æ–≥–∏–Ω–∞ –Ω–∞–π–¥–µ–Ω–æ: ${selector}`);
                    break;
                }
            } catch (e) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
            }
        }

        // –ò—â–µ–º –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è
        const passwordSelectors = [
            'input[name="password"]',
            'input[type="password"]',
            '#password'
        ];

        let passwordField = null;
        for (const selector of passwordSelectors) {
            try {
                passwordField = await this.page.$(selector);
                if (passwordField) {
                    console.log(`‚úÖ –ü–æ–ª–µ –ø–∞—Ä–æ–ª—è –Ω–∞–π–¥–µ–Ω–æ: ${selector}`);
                    break;
                }
            } catch (e) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
            }
        }

        return { usernameField, passwordField };
    }

    async findSubmitButton() {
        console.log('üîç –ò—â–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã...');
        
        const submitSelectors = [
            'input[type="image"]',
            'input[type="submit"]',
            'button[type="submit"]',
            'button:contains("–í–æ–π—Ç–∏")',
            'button:contains("Login")',
            'button:contains("–û—Ç–ø—Ä–∞–≤–∏—Ç—å")',
            'button:contains("Submit")',
            '.submit-btn',
            '#submit-btn'
        ];

        for (const selector of submitSelectors) {
            try {
                const button = await this.page.$(selector);
                if (button) {
                    console.log(`‚úÖ –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–π–¥–µ–Ω–∞: ${selector}`);
                    return button;
                }
            } catch (e) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
            }
        }

        // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ XPath
        const xpathSelectors = [
            '//input[@type="image"]',
            '//input[@type="submit"]',
            '//button[@type="submit"]',
            '//button[contains(text(), "–í–æ–π—Ç–∏")]',
            '//button[contains(text(), "Login")]',
            '//input[@type="image" and contains(@src, "go")]'
        ];

        for (const xpath of xpathSelectors) {
            try {
                const elements = await this.page.$x(xpath);
                if (elements.length > 0) {
                    console.log(`‚úÖ –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ XPath: ${xpath}`);
                    return elements[0];
                }
            } catch (e) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
            }
        }

        console.log('‚ùå –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return null;
    }

    async login() {
        try {
            console.log('üîç –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É Wolmar...');
            await this.page.goto('https://www.wolmar.ru/', {
                waitUntil: 'networkidle2',
                timeout: 30000
            });

            // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            await new Promise(resolve => setTimeout(resolve, 3000));

            // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            await this.page.screenshot({ path: 'wolmar-homepage-enhanced.png', fullPage: true });
            console.log('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: wolmar-homepage-enhanced.png');

            // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞
            const loginButton = await this.findLoginButton();
            if (!loginButton) {
                console.log('‚ùå –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                return false;
            }

            console.log('üñ±Ô∏è –ù–∞–∂–∏–º–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞...');
            await loginButton.click();

            // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞
            await new Promise(resolve => setTimeout(resolve, 3000));

            // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞
            await this.page.screenshot({ path: 'wolmar-login-form-enhanced.png', fullPage: true });
            console.log('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞: wolmar-login-form-enhanced.png');

            // –ò—â–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã
            const { usernameField, passwordField } = await this.findFormFields();
            
            if (!usernameField || !passwordField) {
                console.log('‚ùå –ü–æ–ª—è —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                return false;
            }

            console.log('üìù –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞...');
            await usernameField.type(this.credentials.username);
            await passwordField.type(this.credentials.password);

            // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ñ–æ—Ä–º—ã
            await this.page.screenshot({ path: 'wolmar-form-filled-enhanced.png', fullPage: true });
            console.log('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ñ–æ—Ä–º—ã: wolmar-form-filled-enhanced.png');

            // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
            const submitButton = await this.findSubmitButton();
            if (!submitButton) {
                console.log('‚ùå –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                return false;
            }

            console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞...');
            await submitButton.click();

            // –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ä–º—ã
            await new Promise(resolve => setTimeout(resolve, 5000));

            console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—Ö–æ–¥–∞...');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å–ø–µ—à–µ–Ω –ª–∏ –≤—Ö–æ–¥
            const currentUrl = this.page.url();
            console.log(`üìç –¢–µ–∫—É—â–∏–π URL: ${currentUrl}`);

            // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—è–≤–ª—è—é—Ç—Å—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
            const successIndicators = [
                '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç',
                '–õ–æ—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞',
                '–ò—Å—Ç–æ—Ä–∏—è –≤—ã–∏–≥—Ä—ã—à–µ–π',
                '–õ–æ—Ç—ã –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤',
                '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                '–í—ã—Ö–æ–¥',
                'logout',
                'profile'
            ];

            let loginSuccess = false;
            for (const indicator of successIndicators) {
                try {
                    const elements = await this.page.$x(`//*[contains(text(), '${indicator}')]`);
                    if (elements.length > 0) {
                        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞: "${indicator}"`);
                        loginSuccess = true;
                        break;
                    }
                } catch (e) {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
                }
            }

            if (loginSuccess) {
                console.log('‚úÖ –í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω!');
                await this.page.screenshot({ path: 'wolmar-logged-in-enhanced.png', fullPage: true });
                console.log('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞: wolmar-logged-in-enhanced.png');
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º cookies
                const cookies = await this.page.cookies();
                fs.writeFileSync('wolmar-cookies-enhanced.json', JSON.stringify(cookies, null, 2));
                console.log('üç™ Cookies —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ wolmar-cookies-enhanced.json');
                return true;
            } else {
                console.log('‚ùå –í—Ö–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è. –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
                await this.page.screenshot({ path: 'wolmar-login-failed-enhanced.png', fullPage: true });
                console.log('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –≤—Ö–æ–¥–∞: wolmar-login-failed-enhanced.png');
                return false;
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ:', error);
            await this.page.screenshot({ path: 'wolmar-error-enhanced.png', fullPage: true });
            console.log('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏: wolmar-error-enhanced.png');
            return false;
        }
    }

    async close() {
        if (this.browser) {
            await this.browser.close();
            console.log('üîí –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç');
        }
        
        // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã Chrome
        cleanupChromeTempFiles();
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    const loginTest = new WolmarLoginEnhanced();
    
    try {
        await loginTest.init();
        const success = await loginTest.login();
        
        if (success) {
            console.log('üéâ –¢–µ—Å—Ç –≤—Ö–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!');
        } else {
            console.log('‚ùå –¢–µ—Å—Ç –≤—Ö–æ–¥–∞ –Ω–µ —É–¥–∞–ª—Å—è');
        }
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    } finally {
        await loginTest.close();
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
if (require.main === module) {
    main().catch(console.error);
}

module.exports = WolmarLoginEnhanced;
