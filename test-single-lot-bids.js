const WolmarCategoryParser = require('./wolmar-category-parser');
const config = require('./config');

async function testSingleLotBids() {
    console.log('üß™ –¢–ï–°–¢ –ü–ê–†–°–ò–ù–ì–ê –°–¢–ê–í–û–ö –î–õ–Ø –û–î–ù–û–ì–û –õ–û–¢–ê');
    console.log('=======================================');
    
    const parser = new WolmarCategoryParser(config.dbConfig, 'test', 2070);
    
    try {
        console.log('\n1Ô∏è‚É£ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä...');
        await parser.init();
        
        console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –ª–æ—Ç–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Å—Ç–∞–≤–æ–∫...');
        const testUrl = 'https://www.wolmar.ru/auction/2070/7226578?category=bony';
        
        console.log(`üîç URL: ${testUrl}`);
        
        // –ü–∞—Ä—Å–∏–º –ª–æ—Ç —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º —Å—Ç–∞–≤–æ–∫
        const lotData = await parser.parseLotPage(testUrl, null, '–ë–æ–Ω—ã', true);
        
        console.log('\n3Ô∏è‚É£ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞:');
        console.log(`üìã –ù–æ–º–µ—Ä –ª–æ—Ç–∞: ${lotData.lotNumber}`);
        console.log(`üìã –û–ø–∏—Å–∞–Ω–∏–µ: ${lotData.coinDescription?.substring(0, 100)}...`);
        console.log(`üìã –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${lotData.winnerLogin}`);
        console.log(`üìã –¶–µ–Ω–∞: ${lotData.winningBid} —Ä—É–±.`);
        
        if (lotData.bidHistory && lotData.bidHistory.length > 0) {
            console.log(`\nüí∞ –ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞–≤–æ–∫ (${lotData.bidHistory.length} —Å—Ç–∞–≤–æ–∫):`);
            lotData.bidHistory.slice(0, 5).forEach((bid, index) => {
                console.log(`   ${index + 1}. ${bid.amount} —Ä—É–±. - ${bid.bidder} (${bid.timestamp}) ${bid.isAutoBid ? '[–ê–í–¢–û–ë–ò–î]' : ''}`);
            });
            if (lotData.bidHistory.length > 5) {
                console.log(`   ... –∏ –µ—â–µ ${lotData.bidHistory.length - 5} —Å—Ç–∞–≤–æ–∫`);
            }
        } else {
            console.log('‚ùå –ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }
        
        console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î...');
        try {
            const lotId = await parser.saveLotToDatabase(lotData);
            console.log(`‚úÖ –õ–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å ID: ${lotId}`);
            
            if (lotData.bidHistory && lotData.bidHistory.length > 0) {
                console.log(`‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞–≤–æ–∫ —Ç–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞`);
            }
        } catch (saveError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', saveError.message);
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error.message);
        console.error('‚ùå –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
    } finally {
        if (parser.browser) {
            await parser.browser.close();
        }
        if (parser.dbClient) {
            await parser.dbClient.end();
        }
    }
}

if (require.main === module) {
    testSingleLotBids();
}
