const { spawn, exec } = require('child_process');
const fs = require('fs');
const path = require('path');
const cron = require('node-cron');

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
let mainParserProcess = null;
let updateParserProcess = null;
let predictionsProcess = null;
let scheduleJob = null;

// –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
const SCHEDULE_FILE = './schedule.json';

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
function saveScheduleToFile(time, auctionNumber, cronExpression) {
    const scheduleData = {
        time,
        auctionNumber,
        cronExpression,
        createdAt: new Date().toISOString()
    };
    
    fs.writeFileSync(SCHEDULE_FILE, JSON.stringify(scheduleData, null, 2));
    writeLog('schedule', `–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Ñ–∞–π–ª: ${SCHEDULE_FILE}`);
}

function loadScheduleFromFile() {
    if (!fs.existsSync(SCHEDULE_FILE)) {
        return null;
    }
    
    try {
        const data = fs.readFileSync(SCHEDULE_FILE, 'utf8');
        const scheduleData = JSON.parse(data);
        writeLog('schedule', `–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞: ${scheduleData.time} UTC –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞ ${scheduleData.auctionNumber}`);
        return scheduleData;
    } catch (error) {
        writeLog('schedule', `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: ${error.message}`);
        return null;
    }
}

function deleteScheduleFile() {
    if (fs.existsSync(SCHEDULE_FILE)) {
        fs.unlinkSync(SCHEDULE_FILE);
        writeLog('schedule', '–§–∞–π–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω');
    }
}

// –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
const MAIN_PARSER_PATH = '/var/www/wolmar-parser5.js';
const UPDATE_PARSER_PATH = '/var/www/update-current-auction-fixed.js';
const PREDICTIONS_PATH = '/var/www/wolmar-parser/generate-predictions-with-progress.js';
const LOGS_DIR = path.join(__dirname, 'logs');

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if (!fs.existsSync(LOGS_DIR)) {
    fs.mkdirSync(LOGS_DIR, { recursive: true });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤
function writeLog(type, message) {
    const timestamp = new Date().toISOString();
    const logMessage = `[${timestamp}] ${message}\n`;
    const logFile = path.join(LOGS_DIR, `${type}-parser.log`);
    
    fs.appendFileSync(logFile, logMessage);
    console.log(`[${type.toUpperCase()}] ${message}`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤
function readLogs(type, lines = 100) {
    console.log(`üîç readLogs –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è —Ç–∏–ø–∞: ${type}, LOGS_DIR: ${LOGS_DIR}`);
    let logFile;
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è category-parser
    if (type === 'category-parser') {
        logFile = path.join(LOGS_DIR, 'category-parser.log');
    } else {
        logFile = path.join(LOGS_DIR, `${type}-parser.log`);
    }
    
    if (!fs.existsSync(logFile)) {
        console.log(`‚ùå –§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${logFile}`);
        return [];
    }
    
    const content = fs.readFileSync(logFile, 'utf8');
    const logLines = content.split('\n').filter(line => line.trim());
    
    return logLines.slice(-lines);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤
function clearLogs(type) {
    let logFile;
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è category-parser
    if (type === 'category-parser') {
        logFile = path.join(LOGS_DIR, 'category-parser.log');
    } else {
        logFile = path.join(LOGS_DIR, `${type}-parser.log`);
    }
    
    if (fs.existsSync(logFile)) {
        fs.writeFileSync(logFile, '');
    }
}

// –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞
function startMainParser(auctionNumber, mode = 'main', resumeLot = null) {
    return new Promise((resolve, reject) => {
        if (mainParserProcess) {
            reject(new Error('–û—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä—Å–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω'));
            return;
        }

        let args = [];
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ–º–∞–Ω–¥—É –∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        if (mode === 'resume' && resumeLot) {
            // –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –ª–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–∞–Ω–¥—É 'index'
            args = ['index', auctionNumber.toString(), resumeLot.toString()];
        } else {
            // –î–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π mode
            args = [mode, auctionNumber.toString()];
        }

        writeLog('main', `–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞: ${MAIN_PARSER_PATH} ${args.join(' ')}`);

        mainParserProcess = spawn('node', [MAIN_PARSER_PATH, ...args], {
            stdio: ['pipe', 'pipe', 'pipe']
        });

        mainParserProcess.stdout.on('data', (data) => {
            const message = data.toString().trim();
            writeLog('main', message);
        });

        mainParserProcess.stderr.on('data', (data) => {
            const message = data.toString().trim();
            writeLog('main', `ERROR: ${message}`);
        });

        mainParserProcess.on('close', (code) => {
            writeLog('main', `–û—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä—Å–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º: ${code}`);
            mainParserProcess = null;
        });

        mainParserProcess.on('error', (error) => {
            writeLog('main', `–û—à–∏–±–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞: ${error.message}`);
            mainParserProcess = null;
            reject(error);
        });

        // –î–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—É –≤—Ä–µ–º—è –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
        setTimeout(() => {
            if (mainParserProcess && !mainParserProcess.killed) {
                resolve({ success: true, pid: mainParserProcess.pid });
            } else {
                // –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è, –Ω–æ –±–µ–∑ –æ—à–∏–±–∫–∏ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                resolve({ success: true, message: '–ü–∞—Ä—Å–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ' });
            }
        }, 1000);
    });
}

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞
function stopMainParser() {
    return new Promise((resolve) => {
        if (!mainParserProcess) {
            resolve({ success: true, message: '–û—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä—Å–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω' });
            return;
        }

        writeLog('main', '–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞...');
        
        mainParserProcess.kill('SIGTERM');
        
        // –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥, –∑–∞—Ç–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º
        setTimeout(() => {
            if (mainParserProcess && !mainParserProcess.killed) {
                mainParserProcess.kill('SIGKILL');
                writeLog('main', '–û—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä—Å–µ—Ä –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω');
            }
            mainParserProcess = null;
            resolve({ success: true, message: '–û—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä—Å–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' });
        }, 5000);
    });
}

// –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
function startUpdateParser(auctionNumber) {
    return new Promise((resolve, reject) => {
        if (updateParserProcess) {
            reject(new Error('–ü–∞—Ä—Å–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —É–∂–µ –∑–∞–ø—É—â–µ–Ω'));
            return;
        }

        writeLog('update', `–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: ${UPDATE_PARSER_PATH} ${auctionNumber}`);

        updateParserProcess = spawn('node', [UPDATE_PARSER_PATH, auctionNumber.toString()], {
            stdio: ['pipe', 'pipe', 'pipe']
        });

        updateParserProcess.stdout.on('data', (data) => {
            const message = data.toString().trim();
            writeLog('update', message);
        });

        updateParserProcess.stderr.on('data', (data) => {
            const message = data.toString().trim();
            writeLog('update', `ERROR: ${message}`);
        });

        updateParserProcess.on('close', (code) => {
            writeLog('update', `–ü–∞—Ä—Å–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º: ${code}`);
            updateParserProcess = null;
        });

        updateParserProcess.on('error', (error) => {
            writeLog('update', `–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: ${error.message}`);
            updateParserProcess = null;
            reject(error);
        });

        // –î–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—É –≤—Ä–µ–º—è –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
        setTimeout(() => {
            if (updateParserProcess && !updateParserProcess.killed) {
                resolve({ success: true, pid: updateParserProcess.pid });
            } else {
                // –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è, –Ω–æ –±–µ–∑ –æ—à–∏–±–∫–∏ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                resolve({ success: true, message: '–ü–∞—Ä—Å–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ' });
            }
        }, 1000);
    });
}

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
function stopUpdateParser() {
    return new Promise((resolve) => {
        if (!updateParserProcess) {
            resolve({ success: true, message: '–ü–∞—Ä—Å–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ –∑–∞–ø—É—â–µ–Ω' });
            return;
        }

        writeLog('update', '–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...');
        
        updateParserProcess.kill('SIGTERM');
        
        // –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥, –∑–∞—Ç–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º
        setTimeout(() => {
            if (updateParserProcess && !updateParserProcess.killed) {
                updateParserProcess.kill('SIGKILL');
                writeLog('update', '–ü–∞—Ä—Å–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω');
            }
            updateParserProcess = null;
            resolve({ success: true, message: '–ü–∞—Ä—Å–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' });
        }, 5000);
    });
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
function setSchedule(time, auctionNumber) {
    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    if (scheduleJob) {
        scheduleJob.stop();
        scheduleJob = null;
    }

    // –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è (—Ñ–æ—Ä–º–∞—Ç HH:MM)
    const [hours, minutes] = time.split(':').map(Number);
    
    // –°–æ–∑–¥–∞–µ–º cron –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    const cronExpression = `${minutes} ${hours} * * *`;
    
    writeLog('schedule', `–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: ${time} UTC –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞ ${auctionNumber}`);
    
    scheduleJob = cron.schedule(cronExpression, () => {
        writeLog('schedule', `–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞ ${auctionNumber}`);
        startUpdateParser(auctionNumber).catch(error => {
            writeLog('schedule', `–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞: ${error.message}`);
        });
    }, {
        scheduled: true,
        timezone: "UTC"
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
    saveScheduleToFile(time, auctionNumber, cronExpression);
    
    return { success: true, message: '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ' };
}

function deleteSchedule() {
    if (scheduleJob) {
        scheduleJob.stop();
        scheduleJob = null;
    }
    
    // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    deleteScheduleFile();
    
    writeLog('schedule', '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ');
    return { success: true, message: '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ' };
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
function getStatus() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–µ—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞
    let catalogParserStatus = 'stopped';
    let catalogParserMessage = '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
    let catalogParserPid = null;
    
    try {
        if (fs.existsSync('catalog-parser-pid.json')) {
            const pidData = JSON.parse(fs.readFileSync('catalog-parser-pid.json', 'utf8'));
            catalogParserPid = pidData.pid;
            catalogParserStatus = 'running';
            catalogParserMessage = `–ó–∞–ø—É—â–µ–Ω (PID: ${pidData.pid})`;
        }
    } catch (e) {
        // –§–∞–π–ª PID –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ ps
    try {
        exec('ps aux | grep "catalog-parser.js" | grep -v grep', (error, stdout) => {
            if (stdout.trim()) {
                catalogParserStatus = 'running';
                catalogParserMessage = '–ó–∞–ø—É—â–µ–Ω';
            }
        });
    } catch (e) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ ps
    }

    const status = {
        mainParser: {
            status: mainParserProcess ? 'running' : 'stopped',
            message: mainParserProcess ? '–ó–∞–ø—É—â–µ–Ω' : '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
            pid: mainParserProcess ? mainParserProcess.pid : null
        },
        updateParser: {
            status: updateParserProcess ? 'running' : 'stopped',
            message: updateParserProcess ? '–ó–∞–ø—É—â–µ–Ω' : '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
            pid: updateParserProcess ? updateParserProcess.pid : null
        },
        predictionsGenerator: {
            status: predictionsProcess ? 'running' : 'stopped',
            message: predictionsProcess ? '–ó–∞–ø—É—â–µ–Ω' : '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
            pid: predictionsProcess ? predictionsProcess.pid : null
        },
        catalogParser: {
            status: catalogParserStatus,
            message: catalogParserMessage,
            pid: catalogParserPid
        },
        categoryParser: {
            status: global.categoryParser ? 'running' : 'stopped',
            message: global.categoryParser ? '–ó–∞–ø—É—â–µ–Ω' : '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
        },
        schedule: {
            status: scheduleJob ? 'active' : 'inactive',
            message: scheduleJob ? '–ê–∫—Ç–∏–≤–Ω–æ' : '–ù–µ–∞–∫—Ç–∏–≤–Ω–æ'
        }
    };

    return status;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–∞—Ä—Å–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
function getUpdateProgress(auctionNumber) {
    const progressFile = path.join(__dirname, `update_progress_${auctionNumber}.json`);
    
    if (!fs.existsSync(progressFile)) {
        return null;
    }
    
    try {
        const data = fs.readFileSync(progressFile, 'utf8');
        return JSON.parse(data);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–∞—Ä—Å–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
function clearUpdateProgress(auctionNumber) {
    const progressFile = path.join(__dirname, `update_progress_${auctionNumber}.json`);
    
    try {
        if (fs.existsSync(progressFile)) {
            fs.unlinkSync(progressFile);
            writeLog('update', `–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞ ${auctionNumber} –æ—á–∏—â–µ–Ω`);
            return { success: true, message: '–ü—Ä–æ–≥—Ä–µ—Å—Å –æ—á–∏—â–µ–Ω' };
        } else {
            return { success: true, message: '–ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω' };
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
        return { success: false, error: error.message };
    }
}

// –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
function startPredictionsGenerator(auctionNumber, startFromIndex = null) {
    return new Promise((resolve, reject) => {
        if (predictionsProcess) {
            reject(new Error('–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ —É–∂–µ –∑–∞–ø—É—â–µ–Ω'));
            return;
        }

        let args = [auctionNumber.toString()];
        if (startFromIndex !== null) {
            args.push(startFromIndex.toString());
        }

        writeLog('predictions', `–ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: ${PREDICTIONS_PATH} ${args.join(' ')}`);

        predictionsProcess = spawn('node', [PREDICTIONS_PATH, ...args], {
            stdio: ['pipe', 'pipe', 'pipe']
        });

        predictionsProcess.stdout.on('data', (data) => {
            const message = data.toString().trim();
            writeLog('predictions', message);
        });

        predictionsProcess.stderr.on('data', (data) => {
            const message = data.toString().trim();
            writeLog('predictions', `ERROR: ${message}`);
        });

        predictionsProcess.on('close', (code) => {
            writeLog('predictions', `–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º: ${code}`);
            predictionsProcess = null;
        });

        predictionsProcess.on('error', (error) => {
            writeLog('predictions', `–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: ${error.message}`);
            predictionsProcess = null;
            reject(error);
        });

        // –î–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—É –≤—Ä–µ–º—è –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
        setTimeout(() => {
            if (predictionsProcess && !predictionsProcess.killed) {
                resolve({ success: true, pid: predictionsProcess.pid });
            } else {
                resolve({ success: true, message: '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ' });
            }
        }, 1000);
    });
}

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
function stopPredictionsGenerator() {
    return new Promise((resolve) => {
        if (!predictionsProcess) {
            resolve({ success: true, message: '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –Ω–µ –∑–∞–ø—É—â–µ–Ω' });
            return;
        }

        writeLog('predictions', '–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤...');
        
        predictionsProcess.kill('SIGTERM');
        
        // –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥, –∑–∞—Ç–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º
        setTimeout(() => {
            if (predictionsProcess && !predictionsProcess.killed) {
                predictionsProcess.kill('SIGKILL');
                writeLog('predictions', '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω');
            }
            predictionsProcess = null;
            resolve({ success: true, message: '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' });
        }, 5000);
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
function getPredictionsProgress(auctionNumber) {
    const progressFile = path.join(__dirname, `predictions_progress_${auctionNumber}.json`);
    
    if (!fs.existsSync(progressFile)) {
        return null;
    }
    
    try {
        const data = fs.readFileSync(progressFile, 'utf8');
        return JSON.parse(data);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤:', error);
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
function clearPredictionsProgress(auctionNumber) {
    const progressFile = path.join(__dirname, `predictions_progress_${auctionNumber}.json`);
    
    try {
        if (fs.existsSync(progressFile)) {
            fs.unlinkSync(progressFile);
            writeLog('predictions', `–ü—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞ ${auctionNumber} –æ—á–∏—â–µ–Ω`);
            return { success: true, message: '–ü—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –æ—á–∏—â–µ–Ω' };
        } else {
            return { success: true, message: '–ü—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω' };
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤:', error);
        return { success: false, error: error.message };
    }
}

// –§—É–Ω–∫—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
function restoreSchedule() {
    const scheduleData = loadScheduleFromFile();
    if (scheduleData) {
        try {
            scheduleJob = cron.schedule(scheduleData.cronExpression, () => {
                writeLog('schedule', `–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞ ${scheduleData.auctionNumber}`);
                startUpdateParser(scheduleData.auctionNumber).catch(error => {
                    writeLog('schedule', `–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞: ${error.message}`);
                });
            }, {
                scheduled: true,
                timezone: "UTC"
            });
            
            writeLog('schedule', `–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${scheduleData.time} UTC –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞ ${scheduleData.auctionNumber}`);
        } catch (error) {
            writeLog('schedule', `–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: ${error.message}`);
        }
    }
}

// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–æ–¥—É–ª—è
restoreSchedule();

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ server.js
module.exports = {
    startMainParser,
    stopMainParser,
    startUpdateParser,
    stopUpdateParser,
    startPredictionsGenerator,
    stopPredictionsGenerator,
    setSchedule,
    deleteSchedule,
    getStatus,
    readLogs,
    clearLogs,
    getUpdateProgress,
    clearUpdateProgress,
    getPredictionsProgress,
    clearPredictionsProgress
};




