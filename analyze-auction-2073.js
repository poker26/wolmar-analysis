const { Pool } = require('pg');

const pool = new Pool({
    user: 'postgres',
    host: 'localhost',
    database: 'wolmar_parser',
    password: 'postgres',
    port: 5432,
});

async function analyzeAuction2073() {
    try {
        // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞—É–∫—Ü–∏–æ–Ω—É 2073
        const totalStats = await pool.query('SELECT COUNT(*) as total_lots, COUNT(CASE WHEN category IS NOT NULL AND category != \'\' THEN 1 END) as with_category FROM auction_lots WHERE auction_number = 2073');
        console.log('üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞—É–∫—Ü–∏–æ–Ω–∞ 2073:');
        console.log(`  –í—Å–µ–≥–æ –ª–æ—Ç–æ–≤: ${totalStats.rows[0].total_lots}`);
        console.log(`  –° –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏: ${totalStats.rows[0].with_category}`);
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        const categoryStats = await pool.query('SELECT category, COUNT(*) as count FROM auction_lots WHERE auction_number = 2073 AND category IS NOT NULL AND category != \'\' GROUP BY category ORDER BY count DESC');
        console.log('\nüìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –∞—É–∫—Ü–∏–æ–Ω–µ 2073:');
        categoryStats.rows.forEach(row => {
            console.log(`  ${row.category}: ${row.count} –ª–æ—Ç–æ–≤`);
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞
        const parsingMethod = await pool.query('SELECT parsing_method, COUNT(*) as count FROM auction_lots WHERE auction_number = 2073 GROUP BY parsing_method ORDER BY count DESC');
        console.log('\nüîß –ú–µ—Ç–æ–¥—ã –ø–∞—Ä—Å–∏–Ω–≥–∞:');
        parsingMethod.rows.forEach(row => {
            console.log(`  ${row.parsing_method || 'NULL'}: ${row.count} –ª–æ—Ç–æ–≤`);
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º source_category
        const sourceCategory = await pool.query('SELECT source_category, COUNT(*) as count FROM auction_lots WHERE auction_number = 2073 AND source_category IS NOT NULL GROUP BY source_category ORDER BY count DESC');
        console.log('\nüìÇ –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:');
        sourceCategory.rows.forEach(row => {
            console.log(`  ${row.source_category}: ${row.count} –ª–æ—Ç–æ–≤`);
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞
        const parseDates = await pool.query('SELECT DATE(parsed_at) as parse_date, COUNT(*) as count FROM auction_lots WHERE auction_number = 2073 GROUP BY DATE(parsed_at) ORDER BY parse_date DESC');
        console.log('\nüìÖ –î–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞:');
        parseDates.rows.forEach(row => {
            console.log(`  ${row.parse_date}: ${row.count} –ª–æ—Ç–æ–≤`);
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
    } finally {
        await pool.end();
    }
}

analyzeAuction2073();
