const { Pool } = require('pg');
const config = require('./config');

async function testBidsAPI() {
    const pool = new Pool(config.dbConfig);
    
    try {
        console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞–≤–æ–∫...');
        
        // –ù–∞—Ö–æ–¥–∏–º –ª–æ—Ç —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Å—Ç–∞–≤–æ–∫
        const lotWithBids = await pool.query(`
            SELECT al.id, al.lot_number, al.auction_number, COUNT(lb.id) as bids_count
            FROM auction_lots al
            LEFT JOIN lot_bids lb ON al.id = lb.lot_id
            GROUP BY al.id, al.lot_number, al.auction_number
            HAVING COUNT(lb.id) > 0
            ORDER BY COUNT(lb.id) DESC
            LIMIT 1
        `);
        
        if (lotWithBids.rows.length === 0) {
            console.log('‚ùå –ù–µ—Ç –ª–æ—Ç–æ–≤ —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Å—Ç–∞–≤–æ–∫ –≤ –ë–î');
            return;
        }
        
        const testLot = lotWithBids.rows[0];
        console.log(`üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º API –¥–ª—è –ª–æ—Ç–∞ ${testLot.lot_number} (ID: ${testLot.id}) —Å ${testLot.bids_count} —Å—Ç–∞–≤–∫–∞–º–∏`);
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º SQL –∑–∞–ø—Ä–æ—Å –Ω–∞–ø—Ä—è–º—É—é
        const directQuery = await pool.query(`
            SELECT 
                bid_amount, bidder_login, bid_timestamp, is_auto_bid
            FROM lot_bids 
            WHERE lot_id = $1
            ORDER BY bid_timestamp DESC
        `, [testLot.id]);
        
        console.log(`üìä –ü—Ä—è–º–æ–π SQL –∑–∞–ø—Ä–æ—Å –≤–µ—Ä–Ω—É–ª ${directQuery.rows.length} —Å—Ç–∞–≤–æ–∫:`);
        directQuery.rows.forEach((bid, index) => {
            const autoBid = bid.is_auto_bid ? ' (–∞–≤—Ç–æ)' : '';
            console.log(`   ${index + 1}. ${bid.bid_amount}‚ÇΩ –æ—Ç ${bid.bidder_login}${autoBid} (${bid.bid_timestamp})`);
        });
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º HTTP –∑–∞–ø—Ä–æ—Å –∫ API
        console.log('\nüåê –¢–µ—Å—Ç–∏—Ä—É–µ–º HTTP API...');
        
        const fetch = require('node-fetch');
        const apiUrl = `http://localhost:3001/api/lots/${testLot.id}/bids`;
        
        try {
            const response = await fetch(apiUrl);
            const data = await response.json();
            
            console.log(`üìä HTTP API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: ${response.status}`);
            console.log(`üìä HTTP API –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ:`, JSON.stringify(data, null, 2));
            
            if (data.success && data.bids) {
                console.log(`‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ! –ü–æ–ª—É—á–µ–Ω–æ ${data.bids.length} —Å—Ç–∞–≤–æ–∫`);
            } else {
                console.log('‚ùå API –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö');
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞:', error.message);
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API:', error.message);
    } finally {
        await pool.end();
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
if (require.main === module) {
    testBidsAPI()
        .then(() => {
            console.log('‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
            process.exit(0);
        })
        .catch((error) => {
            console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
            process.exit(1);
        });
}

module.exports = testBidsAPI;
