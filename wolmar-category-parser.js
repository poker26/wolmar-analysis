/**
 * Wolmar Category Parser
 * 
 * –ü–∞—Ä—Å–µ—Ä –ª–æ—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º Wolmar –Ω–∞ –æ—Å–Ω–æ–≤–µ wolmar-parser5.js
 * 
 * –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
 * - –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ Wolmar
 * - –ü–∞—Ä—Å–∏–Ω–≥ –ª–æ—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
 * - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (–∫–∞—Ç–µ–≥–æ—Ä–∏—è vs –∞—É–∫—Ü–∏–æ–Ω)
 * - –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
 * 
 * –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 18.09.2025
 * –ê–≤—Ç–æ—Ä: AI Assistant
 */

const puppeteer = require('puppeteer-core');
const { Client } = require('pg');
const fs = require('fs');
const https = require('https');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä
const WolmarAuctionParser = require('./wolmar-parser5');
const LotClassifier = require('./lot-classifier');
const path = require('path');

class WolmarCategoryParser {
    constructor(dbConfig, mode = 'categories', auctionNumber = null) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        this.dbConfig = dbConfig;
        this.mode = mode; // 'categories', 'auction', 'resume'
        this.targetAuctionNumber = auctionNumber;
        
        // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑–æ–≤–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞
        const parserId = mode === 'auction' ? `category-parser-${auctionNumber}` : 'category-parser';
        this.baseParser = new WolmarAuctionParser(dbConfig, parserId);
        
        // –ö–æ–ø–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–≤–æ–π—Å—Ç–≤–∞ –±–∞–∑–æ–≤–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞
        this.dbClient = this.baseParser.dbClient;
        this.browser = this.baseParser.browser;
        this.page = this.baseParser.page;
        this.processed = this.baseParser.processed;
        this.errors = this.baseParser.errors;
        this.skipped = this.baseParser.skipped;
        this.auctionNumber = this.baseParser.auctionNumber;
        this.categoryProgress = {}; // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        
        // –ü–æ–ª—è –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        this.lastProcessedLot = null;
        this.lastProcessedCategory = null;
        this.lastProcessedCategoryIndex = 0;
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        this.logFile = path.join(__dirname, 'logs', 'category-parser.log');
        this.ensureLogDirectory();
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤
    ensureLogDirectory() {
        const logsDir = path.dirname(this.logFile);
        if (!fs.existsSync(logsDir)) {
            fs.mkdirSync(logsDir, { recursive: true });
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    writeLog(message) {
        const timestamp = new Date().toISOString();
        const logMessage = `[${timestamp}] ${message}\n`;
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
        fs.appendFileSync(this.logFile, logMessage);
        
        // –¢–∞–∫–∂–µ –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
        console.log(message);
    }
    
    // –ö–æ–ø–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ç–æ–¥—ã –∏–∑ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞
    get delay() { return this.baseParser.delay.bind(this.baseParser); }
    get ensurePageActive() { return this.baseParser.ensurePageActive.bind(this.baseParser); }
    get recreatePage() { return this.baseParser.recreatePage.bind(this.baseParser); }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞
    async init() {
        try {
            this.writeLog('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø–∞—Ä—Å–µ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...');
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            const initPromise = this.baseParser.init();
            const timeoutPromise = new Promise((_, reject) => 
                setTimeout(() => reject(new Error('–¢–∞–π–º–∞—É—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (60 —Å–µ–∫—É–Ω–¥)')), 60000)
            );
            
            await Promise.race([initPromise, timeoutPromise]);
            this.progressFile = this.baseParser.progressFile;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–≤–æ–π—Å—Ç–≤–∞ –±–∞–∑–æ–≤–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            this.dbClient = this.baseParser.dbClient;
            this.browser = this.baseParser.browser;
            this.page = this.baseParser.page;
            this.processed = this.baseParser.processed;
            this.errors = this.baseParser.errors;
            this.skipped = this.baseParser.skipped;
            this.auctionNumber = this.baseParser.auctionNumber;
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å–≤–æ–π—Å—Ç–≤–∞
            this.categories = [];
            this.classifier = new LotClassifier();
            this.baseUrl = 'https://wolmar.ru';
            
            // –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            this.categoryProgress = {};
            
            this.writeLog('‚úÖ –ü–∞—Ä—Å–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
        } catch (error) {
            this.writeLog(`‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${error.message}`);
            this.writeLog(`‚ùå –°—Ç–µ–∫ –æ—à–∏–±–∫–∏: ${error.stack}`);
            throw error;
        }
    }

    

    async ensurePageActive() {
        return await this.baseParser.ensurePageActive();
    }

    async recreatePage() {
        const result = await this.baseParser.recreatePage();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è
        this.page = this.baseParser.page;
        
        return result;
    }

    async delay(ms) {
        return await this.baseParser.delay(ms);
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∞—É–∫—Ü–∏–æ–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –ë–î
     * @param {string} wolmarId - –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π Wolmar ID (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2070)
     * @returns {string} - —Ä–µ–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∞—É–∫—Ü–∏–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 914)
     */
    async getRealAuctionNumber(wolmarId) {
        try {
            // –ò—â–µ–º –≤ –ë–î –ª–æ—Ç—ã —Å parsing_number = wolmarId –∏ –±–µ—Ä–µ–º auction_number
            const query = 'SELECT DISTINCT auction_number FROM auction_lots WHERE parsing_number = $1 LIMIT 1';
            const result = await this.dbClient.query(query, [wolmarId]);
            
            if (result.rows.length > 0) {
                return result.rows[0].auction_number;
            }
            
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º wolmarId –∫–∞–∫ –µ—Å—Ç—å (–¥–ª—è –Ω–æ–≤—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤)
            return wolmarId;
        } catch (error) {
            this.writeLog(`‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∞—É–∫—Ü–∏–æ–Ω–∞: ${error.message}`);
            return wolmarId; // Fallback
        }
    }

    async lotExists(auctionNumber, lotNumber) {
        // –î–ª—è category parser –Ω—É–∂–Ω–æ –∏—Å–∫–∞—Ç—å –ø–æ —Ä–µ–∞–ª—å–Ω–æ–º—É –Ω–æ–º–µ—Ä—É –∞—É–∫—Ü–∏–æ–Ω–∞, –∞ –Ω–µ –ø–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É Wolmar ID
        // auctionNumber –∑–¥–µ—Å—å - —ç—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π Wolmar ID (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2070)
        // –ù–æ –≤ –ë–î –ª–æ—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è —Å —Ä–µ–∞–ª—å–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º –∞—É–∫—Ü–∏–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 914)
        
        try {
            const realAuctionNumber = await this.getRealAuctionNumber(auctionNumber);
            this.writeLog(`üîç –ò—â–µ–º –ª–æ—Ç ${lotNumber} —Å auction_number = ${realAuctionNumber} (Wolmar ID: ${auctionNumber})`);
            
            const query = 'SELECT id FROM auction_lots WHERE auction_number = $1 AND lot_number = $2';
            const result = await this.dbClient.query(query, [realAuctionNumber, lotNumber]);
            const exists = result.rows.length > 0;
            
            this.writeLog(`üìä –õ–æ—Ç ${lotNumber} ${exists ? '–Ω–∞–π–¥–µ–Ω' : '–Ω–µ –Ω–∞–π–¥–µ–Ω'} –≤ –ë–î`);
            return exists;
        } catch (error) {
            this.writeLog(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ª–æ—Ç–∞: ${error.message}`);
            // Fallback –∫ –±–∞–∑–æ–≤–æ–π –ª–æ–≥–∏–∫–µ
            return await this.baseParser.lotExists(auctionNumber, lotNumber);
        }
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–∞–∫ –µ—Å—Ç—å (–±–µ–∑ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π)
     */
    mapCategoryNameToCode(categoryName) {
        // –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–∞–∫ –µ—Å—Ç—å
        return categoryName;
    }

    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ URL –ª–æ—Ç–∞
     */
    extractCategoryFromUrl(url) {
        try {
            const urlObj = new URL(url);
            const categoryParam = urlObj.searchParams.get('category');
            
            if (categoryParam) {
                // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º slug –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                return this.slugToCategoryName(categoryParam);
            }
            
            return null;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ URL:', error);
            return null;
        }
    }

    /**
     * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç slug –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
     */
    slugToCategoryName(slug) {
        const categoryMap = {
            'nagradnye-ordena-i-medali-inostrannye': '–ù–∞–≥—Ä–∞–¥–Ω—ã–µ –æ—Ä–¥–µ–Ω–∞ –∏ –º–µ–¥–∞–ª–∏ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ',
            'nagradnye-ordena-i-medali-rossii': '–ù–∞–≥—Ä–∞–¥–Ω—ã–µ –æ—Ä–¥–µ–Ω–∞ –∏ –º–µ–¥–∞–ª–∏ –†–æ—Å—Å–∏–∏',
            'monety-antika-srednevekove': '–ú–æ–Ω–µ—Ç—ã –∞–Ω—Ç–∏–∫–∞, —Å—Ä–µ–¥–Ω–µ–≤–µ–∫–æ–≤—å–µ',
            'dopetrovskie-monety': '–î–æ–ø–µ—Ç—Ä–æ–≤—Å–∫–∏–µ –º–æ–Ω–µ—Ç—ã',
            'monety-petra-i': '–ú–æ–Ω–µ—Ç—ã –ü–µ—Ç—Ä–∞ I',
            'monety-xviii-veka': '–ú–æ–Ω–µ—Ç—ã XVIII –≤–µ–∫–∞',
            'monety-xix-veka': '–ú–æ–Ω–µ—Ç—ã XIX –≤–µ–∫–∞',
            'monety-nikolaya-ii': '–ú–æ–Ω–µ—Ç—ã –ù–∏–∫–æ–ª–∞—è II',
            'monety-rsfsr-sssr-rossii': '–ú–æ–Ω–µ—Ç—ã –†–°–§–°–†, –°–°–°–†, –†–æ—Å—Å–∏–∏',
            'monety-rossii-do-1917-zoloto': '–ú–æ–Ω–µ—Ç—ã –†–æ—Å—Å–∏–∏ –¥–æ 1917 –≥–æ–¥–∞ (–∑–æ–ª–æ—Ç–æ)',
            'monety-rossii-do-1917-serebro': '–ú–æ–Ω–µ—Ç—ã –†–æ—Å—Å–∏–∏ –¥–æ 1917 –≥–æ–¥–∞ (—Å–µ—Ä–µ–±—Ä–æ)',
            'monety-rossii-do-1917-med': '–ú–æ–Ω–µ—Ç—ã –†–æ—Å—Å–∏–∏ –¥–æ 1917 –≥–æ–¥–∞ (–º–µ–¥—å)',
            'monety-inostrannye': '–ú–æ–Ω–µ—Ç—ã –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ',
            'bony': '–ë–æ–Ω—ã',
            'bony-rossii': '–ë–æ–Ω—ã –†–æ—Å—Å–∏–∏',
            'bony-inostrannye': '–ë–æ–Ω—ã –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ',
            'marki': '–ú–∞—Ä–∫–∏',
            'marka': '–ú–∞—Ä–∫–∞',
            'antikvariat': '–ê–Ω—Ç–∏–∫–≤–∞—Ä–∏–∞—Ç',
            'ikony': '–ò–∫–æ–Ω—ã',
            'yuvelirnye-izdeliya-chasy': '–Æ–≤–µ–ª–∏—Ä–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è, —á–∞—Å—ã',
            'serebro': '–°–µ—Ä–µ–±—Ä–æ',
            'books': '–ö–Ω–∏–≥–∏',
            'kartiny-farfor-bronza-i-pr': '–ö–∞—Ä—Ç–∏–Ω—ã, —Ñ–∞—Ä—Ñ–æ—Ä, –±—Ä–æ–Ω–∑–∞ –∏ –ø—Ä.',
            'nagrady-znaki-zhetony-kopii': '–ù–∞–≥—Ä–∞–¥—ã, –∑–Ω–∞–∫–∏, –∂–µ—Ç–æ–Ω—ã, –∫–æ–ø–∏–∏',
            'nagrady-znaki-zhetony': '–ù–∞–≥—Ä–∞–¥—ã, –∑–Ω–∞–∫–∏, –∂–µ—Ç–æ–Ω—ã',
            'pamyatnye-medali': '–ü–∞–º—è—Ç–Ω—ã–µ –º–µ–¥–∞–ª–∏',
            'nastolnye-medali': '–ù–∞—Å—Ç–æ–ª—å–Ω—ã–µ –º–µ–¥–∞–ª–∏',
            'zhetony-znaki-i-dr': '–ñ–µ—Ç–æ–Ω—ã, –∑–Ω–∞–∫–∏ –∏ –¥—Ä.',
            'zoloto-platina-i-dr-do-1945-goda': '–ó–æ–ª–æ—Ç–æ, –ø–ª–∞—Ç–∏–Ω–∞ –∏ –¥—Ä. –¥–æ 1945 –≥–æ–¥–∞',
            'zoloto-platina-i-dr-posle-1945-goda': '–ó–æ–ª–æ—Ç–æ, –ø–ª–∞—Ç–∏–Ω–∞ –∏ –¥—Ä. –ø–æ—Å–ª–µ 1945 –≥–æ–¥–∞',
            'serebro-i-dr-do-1800-goda': '–°–µ—Ä–µ–±—Ä–æ –∏ –¥—Ä. –¥–æ 1800 –≥–æ–¥–∞',
            'serebro-i-dr-s-1800-po-1945-god': '–°–µ—Ä–µ–±—Ä–æ –∏ –¥—Ä. —Å 1800 –ø–æ 1945 –≥–æ–¥',
            'serebro-i-dr-posle-1945-goda': '–°–µ—Ä–µ–±—Ä–æ –∏ –¥—Ä. –ø–æ—Å–ª–µ 1945 –≥–æ–¥–∞'
        };
        
        return categoryMap[slug] || slug; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –∏–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π slug
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ª–æ—Ç–∞
     */
    async updateLotCategory(auctionNumber, lotNumber, category, sourceCategory) {
        try {
            const query = `
                UPDATE auction_lots 
                SET category = $1, source_category = $2, parsing_method = 'category_parser'
                WHERE auction_number = $3 AND lot_number = $4 
                AND (category IS NULL OR category = '')
            `;
            
            const result = await this.dbClient.query(query, [category, sourceCategory, auctionNumber, lotNumber]);
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º true –µ—Å–ª–∏ –±—ã–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å
            return result.rowCount > 0;
            
        } catch (error) {
            this.writeLog(`‚ùå –û–®–ò–ë–ö–ê –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ª–æ—Ç–∞: ${error.message}`);
            this.writeLog(`‚ùå –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: auction=${auctionNumber}, lot=${lotNumber}, category=${category}, source=${sourceCategory}`);
            this.writeLog(`‚ùå –°—Ç–µ–∫ –æ—à–∏–±–∫–∏: ${error.stack}`);
            
            // –ï—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ, –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
            if (error.message.includes('Connection terminated') || error.message.includes('connection') || error.message.includes('not queryable')) {
                console.log('üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
                try {
                    await this.dbClient.end();
                    this.dbClient = new Client(this.dbConfig);
                    await this.dbClient.connect();
                    console.log('‚úÖ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ');
                    
                    // –ü–æ–≤—Ç–æ—Ä—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
                    return await this.updateLotCategory(auctionNumber, lotNumber, category, sourceCategory);
                } catch (reconnectError) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', reconnectError.message);
                    return false;
                }
            }
            
            return false;
        }
    }

    /**
     * –ü–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞
     */
    async discoverCategoriesFromAuction(auctionUrl) {
        console.log(`üîç –ò—â–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∞—É–∫—Ü–∏–æ–Ω–∞: ${auctionUrl}`);
        
        try {
            await this.ensurePageActive();
            await this.page.goto(auctionUrl, { waitUntil: 'networkidle2' });
            await this.delay(2000);
            
            const categories = await this.page.evaluate(() => {
                const categoryLinks = [];
                
                // –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –±–ª–æ–∫–µ .categories
                const categoryBlocks = document.querySelectorAll('.categories');
                categoryBlocks.forEach(block => {
                    const links = block.querySelectorAll('a[href*="/auction/"]');
                    links.forEach(link => {
                        const href = link.getAttribute('href');
                        const text = link.textContent.trim();
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é (—Å–æ–¥–µ—Ä–∂–∏—Ç /auction/ –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç ?category= –∏–ª–∏ /lot/)
                        if (href && href.includes('/auction/') && 
                            !href.includes('?category=') && 
                            !href.includes('/lot/') &&
                            text && text.length > 0) {
                            
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞—É–∫—Ü–∏–æ–Ω–∞
                            const urlParts = href.split('/');
                            if (urlParts.length > 3) { // /auction/2077/category-name
                                categoryLinks.push({
                                    name: text,
                                    url: href.startsWith('http') ? href : `https://www.wolmar.ru${href}`
                                });
                            }
                        }
                    });
                });
                
                // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ .categories, –∏—â–µ–º –ø–æ –≤—Å–µ–º—É –¥–æ–∫—É–º–µ–Ω—Ç—É
                if (categoryLinks.length === 0) {
                    const allLinks = document.querySelectorAll('a[href*="/auction/"]');
                    allLinks.forEach(link => {
                        const href = link.getAttribute('href');
                        const text = link.textContent.trim();
                        
                        if (href && href.includes('/auction/') && 
                            !href.includes('?category=') && 
                            !href.includes('/lot/') &&
                            text && text.length > 0) {
                            
                            const urlParts = href.split('/');
                            if (urlParts.length > 3) { // /auction/2077/category-name
                                categoryLinks.push({
                                    name: text,
                                    url: href.startsWith('http') ? href : `https://www.wolmar.ru${href}`
                                });
                            }
                        }
                    });
                }
                
                return categoryLinks;
            });
            
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${categories.length}`);
            return categories;
            
        } catch (error) {
            this.writeLog(`‚ùå –û–®–ò–ë–ö–ê –ø–æ–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∞—É–∫—Ü–∏–æ–Ω–∞: ${error.message}`);
            this.writeLog(`‚ùå URL –∞—É–∫—Ü–∏–æ–Ω–∞: ${auctionUrl}`);
            this.writeLog(`‚ùå –°—Ç–µ–∫ –æ—à–∏–±–∫–∏: ${error.stack}`);
            return [];
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
     */
    async loadCategoriesFromDatabase() {
        try {
            this.writeLog('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
            
            const query = 'SELECT name, url_slug, url_template FROM wolmar_categories ORDER BY name';
            const result = await this.dbClient.query(query);
            
            this.categories = result.rows.map(row => ({
                name: row.name,
                url_slug: row.url_slug,
                url_template: row.url_template,
                type: 'database_category'
            }));
            
            this.writeLog(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö`);
            
            // –í—ã–≤–æ–¥–∏–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if (this.categories.length > 0) {
                console.log('üìã –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:');
                this.categories.forEach((cat, index) => {
                    console.log(`  ${index + 1}. ${cat.name} -> ${cat.url_slug}`);
                });
            } else {
                console.log('‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç parse-and-save-categories.js');
            }
            
            return this.categories;
            
        } catch (error) {
            this.writeLog(`‚ùå –û–®–ò–ë–ö–ê –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${error.message}`);
            this.writeLog(`‚ùå –°—Ç–µ–∫ –æ—à–∏–±–∫–∏ –ë–î: ${error.stack}`);
            throw error;
        }
    }

    /**
     * –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ Wolmar (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥ - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
     */
    async discoverCategories() {
        console.log('‚ö†Ô∏è –ú–µ—Ç–æ–¥ discoverCategories() —É—Å—Ç–∞—Ä–µ–ª. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ loadCategoriesFromDatabase()');
        return await this.loadCategoriesFromDatabase();
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ –ª–æ—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     */
    async getCategoryLotUrls(categoryUrl, testMode = false) {
        this.writeLog(`üîç –°–æ–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –ª–æ—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${categoryUrl}`);
        const allUrls = new Set();
        
        try {
            await this.ensurePageActive();
            await this.page.goto(categoryUrl, { waitUntil: 'domcontentloaded', timeout: 30000 });
            await this.delay(2000);

            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            const paginationInfo = await this.page.evaluate(() => {
                // –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ª–æ—Ç–æ–≤ –∏ —Å—Ç—Ä–∞–Ω–∏—Ü
                const totalLotsElement = document.querySelector('.disabled[style*="float: right"]');
                const totalLots = totalLotsElement ? totalLotsElement.textContent.match(/(\d+)\s*–ª–æ—Ç/)?.[1] : null;
                
                // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
                const paginationLinks = document.querySelectorAll('.paginator li a');
                let maxPage = 1;
                paginationLinks.forEach(link => {
                    const pageNum = parseInt(link.textContent);
                    if (pageNum && pageNum > maxPage) {
                        maxPage = pageNum;
                    }
                });

                return {
                    totalLots: totalLots ? parseInt(totalLots) : null,
                    maxPage: maxPage
                };
            });

            console.log(`   üìä –ù–∞–π–¥–µ–Ω–æ –ª–æ—Ç–æ–≤: ${paginationInfo.totalLots || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
            console.log(`   üìÑ –°—Ç—Ä–∞–Ω–∏—Ü: ${paginationInfo.maxPage}`);

            const maxPages = testMode ? Math.min(3, paginationInfo.maxPage) : paginationInfo.maxPage;

            // –°–æ–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫–∏ —Å–æ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
            for (let page = 1; page <= maxPages; page++) {
                try {
                    const pageUrl = page === 1 ? categoryUrl : `${categoryUrl}${categoryUrl.includes('?') ? '&' : '?'}page=${page}`;
                    
                    console.log(`   üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É ${page}/${maxPages}: ${pageUrl}`);
                    
                    await this.page.goto(pageUrl, { waitUntil: 'domcontentloaded', timeout: 30000 });
                    await this.delay(1000);

                    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –ª–æ—Ç—ã —Å —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    const pageUrls = await this.page.evaluate(() => {
                        const urls = [];
                        
                        // –ò—â–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ª–æ—Ç—ã –≤ —Ç–∞–±–ª–∏—Ü–µ
                        const lotLinks = document.querySelectorAll('a.title.lot[href*="/auction/"]');
                        
                        lotLinks.forEach(link => {
                            if (link.href && link.href.includes('/auction/')) {
                                urls.push(link.href);
                            }
                        });

                        return urls;
                    });

                    pageUrls.forEach(url => allUrls.add(url));
                    console.log(`   ‚úì –ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: ${pageUrls.length} (–≤—Å–µ–≥–æ: ${allUrls.size})`);

                    // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
                    await this.delay(500);

                } catch (error) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${page}:`, error.message);
                    
                    // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å detached frame, –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    if (error.message.includes('detached') || error.message.includes('Frame')) {
                        console.log(`üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ detached frame –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${page}, –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...`);
                        await this.recreatePage();
                        await this.delay(3000);
                    }
                    
                    continue;
                }
            }

            const urls = Array.from(allUrls);
            console.log(`‚úÖ –°–æ–±—Ä–∞–Ω–æ ${urls.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ –ª–æ—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏`);
            
            return urls;

        } catch (error) {
            this.writeLog(`‚ùå –û–®–ò–ë–ö–ê —Å–±–æ—Ä–∞ —Å—Å—ã–ª–æ–∫ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${error.message}`);
            this.writeLog(`‚ùå URL –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${categoryUrl}`);
            this.writeLog(`‚ùå –°—Ç–µ–∫ –æ—à–∏–±–∫–∏: ${error.stack}`);
            throw error;
        }
    }

    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ª–æ—Ç–∞ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     */
    async parseLotPage(url, auctionEndDate = null, sourceCategory = null) {
        try {
            // –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –±–∞–∑–æ–≤–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞
            const lotData = await this.baseParser.parseLotPage(url, auctionEndDate);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            lotData.sourceCategory = sourceCategory;
            lotData.parsingMethod = 'category_parser';
            
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –º–∞—Å—Å–∏–≤–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (–∫–∞–∫ –≤ –±–∞–∑–æ–≤–æ–º –ø–∞—Ä—Å–µ—Ä–µ)
            if (lotData.images && lotData.images.length > 0) {
                lotData.aversImageUrl = lotData.images[0];
                lotData.reversImageUrl = lotData.images[1] || null;
            }
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ URL, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
            const urlCategory = this.extractCategoryFromUrl(url);
            if (urlCategory) {
                lotData.category = urlCategory;
                lotData.categoryConfidence = 1.0; // –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è URL-–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                console.log(`   üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏–∑ URL: ${urlCategory}`);
            } else if (sourceCategory) {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                lotData.category = this.mapCategoryNameToCode(sourceCategory);
                lotData.categoryConfidence = 0.9; // –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞
            } else if (this.classifier && lotData.coinDescription) {
                // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                const classification = this.classifier.classify({
                    coin_description: lotData.coinDescription,
                    letters: lotData.letters || '',
                    metal: lotData.metal || '',
                    lot_type: lotData.lotType || ''
                });
                
                lotData.category = classification.category;
                lotData.categoryConfidence = classification.confidence;
            }
            
            return lotData;
            
        } catch (error) {
            this.writeLog(`‚ùå –û–®–ò–ë–ö–ê –ø–∞—Ä—Å–∏–Ω–≥–∞ –ª–æ—Ç–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π: ${error.message}`);
            this.writeLog(`‚ùå URL –ª–æ—Ç–∞: ${url}`);
            this.writeLog(`‚ùå –°—Ç–µ–∫ –æ—à–∏–±–∫–∏: ${error.stack}`);
            throw error;
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
     */
    async saveLotToDatabase(lotData) {
        try {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∞—É–∫—Ü–∏–æ–Ω–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            const realAuctionNumber = await this.getRealAuctionNumber(lotData.auctionNumber);
            this.writeLog(`üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ—Ç ${lotData.lotNumber} —Å auction_number = ${realAuctionNumber} (Wolmar ID: ${lotData.auctionNumber})`);
            
            const insertQuery = `
                INSERT INTO auction_lots (
                    lot_number, auction_number, coin_description, avers_image_url, avers_image_path,
                    revers_image_url, revers_image_path, winner_login, winning_bid, auction_end_date,
                    currency, source_url, bids_count, lot_status, year, metal, weight, condition,
                    letters, lot_type, category, source_category, parsing_method, parsing_number
                ) VALUES (
                    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24
                ) RETURNING id
            `;

            const values = [
                lotData.lotNumber,
                realAuctionNumber, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∞—É–∫—Ü–∏–æ–Ω–∞ –≤–º–µ—Å—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ Wolmar ID
                lotData.coinDescription,
                lotData.aversImageUrl || null,
                null, // aversImagePath - –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
                lotData.reversImageUrl || null,
                null, // reversImagePath - –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
                lotData.winnerLogin,
                lotData.winningBid,
                lotData.auctionEndDate,
                lotData.currency || 'RUB',
                lotData.sourceUrl,
                lotData.bidsCount,
                lotData.lotStatus,
                lotData.year,
                lotData.metal,
                lotData.weight,
                lotData.condition,
                lotData.letters,
                lotData.lotType,
                lotData.category,
                lotData.sourceCategory,
                lotData.parsingMethod,
                this.targetAuctionNumber // parsing_number - –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π Wolmar ID
            ];

            const result = await this.dbClient.query(insertQuery, values);
            return result.rows[0].id;

        } catch (error) {
            this.writeLog(`‚ùå –û–®–ò–ë–ö–ê —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ—Ç–∞ –≤ –ë–î: ${error.message}`);
            this.writeLog(`‚ùå –î–∞–Ω–Ω—ã–µ –ª–æ—Ç–∞: ${JSON.stringify(lotData, null, 2)}`);
            this.writeLog(`‚ùå –°—Ç–µ–∫ –æ—à–∏–±–∫–∏ –ë–î: ${error.stack}`);
            
            // –ï—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ, –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
            if (error.message.includes('Connection terminated') || error.message.includes('connection') || error.message.includes('not queryable')) {
                console.log('üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
                try {
                    await this.dbClient.end();
                    this.dbClient = new Client(this.dbConfig);
                    await this.dbClient.connect();
                    console.log('‚úÖ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ');
                    
                    // –ü–æ–≤—Ç–æ—Ä—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
                    return await this.saveLotToDatabase(lotData);
                } catch (reconnectError) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', reconnectError.message);
                    return null;
                }
            }
            
            return null;
        }
    }

    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ –ª–æ—Ç–æ–≤ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     */
    async parseCategoryLots(categoryUrl, categoryName, options = {}) {
        const {
            maxLots = null,
            skipExisting = true,
            delayBetweenLots = 800,
            testMode = false,
            startFromLot = 1
        } = options;

        this.writeLog(`\nüéØ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${categoryName}`);
        this.writeLog(`   URL: ${categoryUrl}`);
        this.writeLog(`   –ù–∞—Å—Ç—Ä–æ–π–∫–∏: maxLots=${maxLots}, skipExisting=${skipExisting}, delay=${delayBetweenLots}ms, testMode=${testMode}`);

        try {
            // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –ª–æ—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            this.writeLog(`üîç –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ª–æ—Ç–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryName}...`);
            const lotUrls = await this.getCategoryLotUrls(categoryUrl, testMode);
            
            if (lotUrls.length === 0) {
                this.writeLog(`‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryName} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ª–æ—Ç–æ–≤`);
                return;
            }
            
            this.writeLog(`üìã –ù–∞–π–¥–µ–Ω–æ –ª–æ—Ç–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryName}: ${lotUrls.length}`);
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if (!this.categoryProgress[categoryName]) {
                this.categoryProgress[categoryName] = { processed: 0, total: lotUrls.length };
            } else {
                this.categoryProgress[categoryName].total = lotUrls.length;
            }

            // –ü—Ä–∏–º–µ–Ω—è–µ–º startFromLot –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –ª–æ—Ç–æ–≤
            let startIndex = 0;
            
            // –ï—Å–ª–∏ startFromLot –±–æ–ª—å—à–µ 1, –∏—â–µ–º –ø–æ–∑–∏—Ü–∏—é —ç—Ç–æ–≥–æ –ª–æ—Ç–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if (startFromLot > 1) {
                // –ò—â–µ–º –ª–æ—Ç —Å –Ω–æ–º–µ—Ä–æ–º startFromLot –≤ —Å–ø–∏—Å–∫–µ –ª–æ—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                const lotIndex = lotUrls.findIndex(url => {
                    const lotMatch = url.match(/\/auction\/\d+\/(\d+)/);
                    return lotMatch && parseInt(lotMatch[1]) === startFromLot;
                });
                
                if (lotIndex !== -1) {
                    startIndex = lotIndex;
                    this.writeLog(`üîç –ù–∞–π–¥–µ–Ω –ª–æ—Ç ${startFromLot} –≤ –ø–æ–∑–∏—Ü–∏–∏ ${lotIndex + 1} –∏–∑ ${lotUrls.length} –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryName}`);
                } else {
                    this.writeLog(`‚ö†Ô∏è –õ–æ—Ç ${startFromLot} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryName}. –ù–∞—á–∏–Ω–∞–µ–º —Å –Ω–∞—á–∞–ª–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.`);
                    startIndex = 0;
                }
            }
            
            const availableLots = lotUrls.length - startIndex;
            const totalLots = maxLots ? Math.min(maxLots, availableLots) : availableLots;
            
            this.writeLog(`üìä –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ª–æ—Ç–æ–≤: ${totalLots} (–Ω–∞—á–∏–Ω–∞—è —Å –ª–æ—Ç–∞ ${startFromLot})`);

            let categoryProcessed = 0;
            let categorySkipped = 0;
            let categoryErrors = 0;

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–æ—Ç—ã –Ω–∞—á–∏–Ω–∞—è —Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
            for (let i = 0; i < totalLots; i++) {
                const actualIndex = startIndex + i;
                const url = lotUrls[actualIndex];
                const progress = `${i + 1}/${totalLots}`;
                
                try {
                    this.writeLog(`\n[${progress}] –ü–ê–†–°–ò–ù–ì –õ–û–¢–ê: ${url}`);
                    
                    // –ü–∞—Ä—Å–∏–º –ª–æ—Ç —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    const lotData = await this.parseLotPage(url, null, categoryName);
                    
                    if (!lotData) {
                        this.writeLog(`‚ö†Ô∏è –õ–æ—Ç –Ω–µ –±—ã–ª —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω: ${url}`);
                        categorySkipped++;
                        continue;
                    }
                    
                    // –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ URL (–Ω–µ –ø–æ–ª–∞–≥–∞–µ–º—Å—è –Ω–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä)
                    lotData.category = this.mapCategoryNameToCode(categoryName);
                    
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ª–æ—Ç–∞
                    if (skipExisting && lotData.auctionNumber && lotData.lotNumber) {
                        const exists = await this.lotExists(lotData.auctionNumber, lotData.lotNumber);
                        if (exists) {
                            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ª–æ—Ç–∞, –µ—Å–ª–∏ –æ–Ω–∞ –ø—É—Å—Ç–∞—è
                            const updated = await this.updateLotCategory(lotData.auctionNumber, lotData.lotNumber, lotData.category, categoryName);
                            if (updated) {
                                this.writeLog(`   üîÑ –õ–æ—Ç ${lotData.lotNumber} –æ–±–Ω–æ–≤–ª–µ–Ω: –∫–∞—Ç–µ–≥–æ—Ä–∏—è "${lotData.category}" –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ "${categoryName}"`);
                                categoryProcessed++;
                                this.processed++;
                                // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                                if (!this.categoryProgress[categoryName]) {
                                    this.categoryProgress[categoryName] = { processed: 0, total: 0 };
                                }
                                this.categoryProgress[categoryName].processed++;
                                this.saveProgress(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                            } else {
                                this.writeLog(`   ‚è≠Ô∏è –õ–æ—Ç ${lotData.lotNumber} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                                categorySkipped++;
                                this.skipped++;
                                this.saveProgress(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                            }
                            continue;
                        }
                    }

                    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
                    this.writeLog(`   üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ—Ç –≤ –ë–î...`);
                    const savedId = await this.saveLotToDatabase(lotData);
                    if (savedId) {
                        categoryProcessed++;
                        this.processed++;
                        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                        if (!this.categoryProgress[categoryName]) {
                            this.categoryProgress[categoryName] = { processed: 0, total: 0 };
                        }
                        this.categoryProgress[categoryName].processed++;
                        
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–º –ª–æ—Ç–µ
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∞ –Ω–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –ª–æ—Ç–∞
                        this.lastProcessedLot = actualIndex + 1; // +1 –ø–æ—Ç–æ–º—É —á—Ç–æ actualIndex –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0
                        this.lastProcessedCategory = categoryName;
                        this.lastProcessedCategoryIndex = actualIndex;
                        
                        this.saveProgress(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                        
                        // –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ—Ç–µ
                        this.writeLog(`   ‚úÖ –õ–æ—Ç ${lotData.lotNumber} –°–û–•–†–ê–ù–ï–ù: ${lotData.coinDescription?.substring(0, 50)}...`);
                        this.writeLog(`   üí∞ ${lotData.winningBid} —Ä—É–±. | üë§ ${lotData.winnerLogin} | üè∑Ô∏è ${lotData.category || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'}`);
                    } else {
                        this.writeLog(`   ‚ùå –û–®–ò–ë–ö–ê: –õ–æ—Ç ${lotData.lotNumber} –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î`);
                        categoryErrors++;
                        this.errors++;
                    }

                    // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ª–æ—Ç–∞–º–∏
                    await this.delay(delayBetweenLots);

                } catch (error) {
                    this.writeLog(`‚ùå –û–®–ò–ë–ö–ê –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ—Ç–∞ [${progress}]: ${error.message}`);
                    this.writeLog(`‚ùå –°—Ç–µ–∫ –æ—à–∏–±–∫–∏ –ª–æ—Ç–∞: ${error.stack}`);
                    categoryErrors++;
                    this.errors++;
                    
                    // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å detached frame, –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    if (error.message.includes('detached') || error.message.includes('Frame')) {
                        this.writeLog(`üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ detached frame, –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...`);
                        await this.recreatePage();
                        await this.delay(3000);
                    }
                }
            }

            this.writeLog(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${categoryName}":`);
            this.writeLog(`   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${categoryProcessed}`);
            this.writeLog(`   ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${categorySkipped}`);
            this.writeLog(`   ‚ùå –û—à–∏–±–æ–∫: ${categoryErrors}`);

        } catch (error) {
            this.writeLog(`‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryName}: ${error.message}`);
            this.writeLog(`‚ùå –°—Ç–µ–∫ –æ—à–∏–±–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${error.stack}`);
            throw error;
        }
    }

    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞ (–∫–∞–∫ –≤ wolmar-parser5)
     */
    async parseSpecificAuction(auctionNumber, startFromLot = 1, options = {}) {
        const {
            maxLots = null,
            skipExisting = true,
            delayBetweenLots = 800,
            testMode = false,
            resumeFromLastLot = false
        } = options;

        this.writeLog(`üéØ –ù–ê–ß–ò–ù–ê–ï–ú –ü–ê–†–°–ò–ù–ì –ê–£–ö–¶–ò–û–ù–ê: ${auctionNumber}`);
        this.writeLog(`   –°—Ç–∞—Ä—Ç–æ–≤—ã–π –ª–æ—Ç: ${startFromLot}`);
        this.writeLog(`   –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ª–æ—Ç–∞: ${resumeFromLastLot}`);
        this.writeLog(`   –ù–∞—Å—Ç—Ä–æ–π–∫–∏: maxLots=${maxLots}, skipExisting=${skipExisting}, delay=${delayBetweenLots}ms, testMode=${testMode}`);

        try {
            // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–∞—Ä—Å–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
            if (!this.page) {
                this.writeLog('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä...');
                await this.init();
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            if (resumeFromLastLot) {
                this.writeLog('üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å...');
                const savedProgress = this.loadProgress();
                if (savedProgress && savedProgress.lastProcessedLot && startFromLot === 1) {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ startFromLot –Ω–µ —É–∫–∞–∑–∞–Ω –≤—Ä—É—á–Ω—É—é
                    this.writeLog(`üîÑ –ù–∞–π–¥–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å: –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–æ—Ç ${savedProgress.lastProcessedLot} –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${savedProgress.lastProcessedCategory}`);
                    startFromLot = savedProgress.lastProcessedLot;
                } else if (savedProgress && savedProgress.lastProcessedLot) {
                    this.writeLog(`üìä –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å: –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–æ—Ç ${savedProgress.lastProcessedLot} –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${savedProgress.lastProcessedCategory}, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤—Ä—É—á–Ω—É—é: ${startFromLot}`);
                } else {
                    this.writeLog('‚ö†Ô∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ª–æ—Ç–∞');
                }
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            this.writeLog('üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
            const dbCategories = await this.loadCategoriesFromDatabase();
            
            if (dbCategories.length === 0) {
                this.writeLog(`‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç parse-and-save-categories.js`);
                return;
            }
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º URL –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞
            const categories = dbCategories.map(cat => ({
                name: cat.name,
                url: cat.url_template.replace('{AUCTION_NUMBER}', this.targetAuctionNumber)
            }));
            
            this.writeLog(`üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º ${categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –ë–î –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞ ${auctionNumber}`);
            categories.forEach(cat => this.writeLog(`   - ${cat.name}: ${cat.url}`));
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
            if (categories.length === 0) {
                this.writeLog(`‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞—É–∫—Ü–∏–æ–Ω–∞ ${auctionNumber}`);
                return {
                    success: true,
                    processed: 0,
                    errors: 0,
                    skipped: 0,
                    categories: 0,
                    message: '–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞'
                };
            }
            
            this.writeLog(`üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –ü–ê–†–°–ò–ù–ì ${categories.length} –ö–ê–¢–ï–ì–û–†–ò–ô...`);
            
            // –ï—Å–ª–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ª–æ—Ç–∞, –Ω–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            let startCategoryIndex = 0;
            if (resumeFromLastLot && this.lastProcessedCategory) {
                startCategoryIndex = categories.findIndex(cat => cat.name === this.lastProcessedCategory);
                if (startCategoryIndex === -1) {
                    this.writeLog(`‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è ${this.lastProcessedCategory} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π`);
                    startCategoryIndex = 0;
                } else {
                    this.writeLog(`üîÑ –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${this.lastProcessedCategory} (–∏–Ω–¥–µ–∫—Å ${startCategoryIndex})`);
                }
            }
            
            // –ü–∞—Ä—Å–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞—á–∏–Ω–∞—è —Å –Ω—É–∂–Ω–æ–π
            for (let i = startCategoryIndex; i < categories.length; i++) {
                const category = categories[i];
                try {
                    this.writeLog(`üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${category.name}`);
                    
                    // –î–ª—è –ø–µ—Ä–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º startFromLot
                    const categoryStartFromLot = (i === startCategoryIndex && resumeFromLastLot) ? startFromLot : 1;
                    
                    await this.parseCategoryLots(category.url, category.name, {
                        maxLots,
                        skipExisting,
                        delayBetweenLots,
                        testMode,
                        startFromLot: categoryStartFromLot
                    });
                    this.writeLog(`‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è ${category.name} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
                } catch (categoryError) {
                    this.writeLog(`‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${category.name}: ${categoryError.message}`);
                    this.writeLog(`‚ùå –°—Ç–µ–∫ –æ—à–∏–±–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${categoryError.stack}`);
                    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Å–ª–µ–¥—É—é—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
                }
            }

            this.writeLog(`üéâ –ü–ê–†–°–ò–ù–ì –ê–£–ö–¶–ò–û–ù–ê ${auctionNumber} –ó–ê–í–ï–†–®–ï–ù!`);
            this.writeLog(`üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:`);
            this.writeLog(`   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ª–æ—Ç–æ–≤: ${this.processed}`);
            this.writeLog(`   ‚ùå –û—à–∏–±–æ–∫: ${this.errors}`);
            this.writeLog(`   ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${this.skipped}`);

            return {
                success: true,
                processed: this.processed,
                errors: this.errors,
                skipped: this.skipped,
                categories: Object.keys(this.categoryProgress).length
            };

        } catch (error) {
            this.writeLog(`‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞—É–∫—Ü–∏–æ–Ω–∞ ${auctionNumber}: ${error.message}`);
            this.writeLog(`‚ùå –°—Ç–µ–∫ –æ—à–∏–±–∫–∏: ${error.stack}`);
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞—É–∫—Ü–∏–æ–Ω–∞ ${auctionNumber}:`, error.message);
            throw error;
        }
    }

    /**
     * –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
     */
    async resumeParsing(resumeOptions = {}) {
        const {
            category = null,
            auctionNumber = null,
            startFromLot = 1,
            skipExisting = true,
            delayBetweenLots = 800
        } = resumeOptions;

        this.writeLog(`üîÑ –í–û–ó–û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–ê–†–°–ò–ù–ì–ê...`);
        this.writeLog(`   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${category || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`);
        this.writeLog(`   –ê—É–∫—Ü–∏–æ–Ω: ${auctionNumber || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
        this.writeLog(`   –°—Ç–∞—Ä—Ç–æ–≤—ã–π –ª–æ—Ç: ${startFromLot}`);

        try {
            this.writeLog(`üîÑ –í–û–ó–û–ë–ù–û–í–õ–Ø–ï–ú –ü–ê–†–°–ò–ù–ì —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: auction=${auctionNumber}, category=${category}, startFromLot=${startFromLot}`);
            
            if (auctionNumber) {
                // –î–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º parseSpecificAuction —Å –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
                this.writeLog(`üéØ –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∞—É–∫—Ü–∏–æ–Ω–∞ ${auctionNumber} —Å –ª–æ—Ç–∞ ${startFromLot}`);
                return await this.parseSpecificAuction(auctionNumber, startFromLot, {
                    skipExisting,
                    delayBetweenLots,
                    testMode: false,
                    resumeFromLastLot: true
                });
            } else if (category) {
                // –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                this.writeLog(`üîç –ò—â–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é "${category}" –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π...`);
                const categoryData = this.categories.find(cat => cat.name === category);
                if (!categoryData) {
                    this.writeLog(`‚ùå –ö–ê–¢–ï–ì–û–†–ò–Ø "${category}" –ù–ï –ù–ê–ô–î–ï–ù–ê –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
                    throw new Error(`–ö–∞—Ç–µ–≥–æ—Ä–∏—è "${category}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
                }
                
                this.writeLog(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è "${category}": ${categoryData.url}`);
                return await this.parseCategoryLots(categoryData.url, category, {
                    skipExisting,
                    delayBetweenLots,
                    startFromLot
                });
            } else {
                throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ª–∏–±–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –ª–∏–±–æ –Ω–æ–º–µ—Ä –∞—É–∫—Ü–∏–æ–Ω–∞ –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
            }

        } catch (error) {
            this.writeLog(`‚ùå –û–®–ò–ë–ö–ê –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞: ${error.message}`);
            this.writeLog(`‚ùå –°—Ç–µ–∫ –æ—à–∏–±–∫–∏: ${error.stack}`);
            throw error;
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
     */
    saveProgress() {
        try {
            const progress = {
                timestamp: new Date().toISOString(),
                mode: this.mode,
                targetAuctionNumber: this.targetAuctionNumber,
                processed: this.processed,
                errors: this.errors,
                skipped: this.skipped,
                categoryProgress: this.categoryProgress || {},
                // –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                lastProcessedLot: this.lastProcessedLot || null,
                lastProcessedCategory: this.lastProcessedCategory || null,
                lastProcessedCategoryIndex: this.lastProcessedCategoryIndex || 0
            };
            
            const fs = require('fs');
            fs.writeFileSync(this.progressFile, JSON.stringify(progress, null, 2));
            console.log(`üíæ –ü—Ä–æ–≥—Ä–µ—Å—Å Category Parser —Å–æ—Ö—Ä–∞–Ω–µ–Ω: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${this.processed}, –æ—à–∏–±–æ–∫ ${this.errors}, –ø—Ä–æ–ø—É—â–µ–Ω–æ ${this.skipped}`);
        } catch (error) {
            this.writeLog(`‚ùå –û–®–ò–ë–ö–ê —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ Category Parser: ${error.message}`);
            this.writeLog(`‚ùå –§–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: ${this.progressFile}`);
            this.writeLog(`‚ùå –°—Ç–µ–∫ –æ—à–∏–±–∫–∏: ${error.stack}`);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
     */
    loadProgress() {
        try {
            console.log('üîç loadProgress: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª:', this.progressFile);
            const fs = require('fs');
            if (fs.existsSync(this.progressFile)) {
                console.log('üîç loadProgress: —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
                const progressData = fs.readFileSync(this.progressFile, 'utf8');
                const progress = JSON.parse(progressData);
                console.log(`üìÇ –ù–∞–π–¥–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å Category Parser: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${progress.processed}, –æ—à–∏–±–æ–∫ ${progress.errors}, –ø—Ä–æ–ø—É—â–µ–Ω–æ ${progress.skipped}`);
                console.log('üîç loadProgress: categoryProgress:', progress.categoryProgress);
                
                this.processed = progress.processed || 0;
                this.errors = progress.errors || 0;
                this.skipped = progress.skipped || 0;
                this.categoryProgress = progress.categoryProgress || {};
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                this.lastProcessedLot = progress.lastProcessedLot || null;
                this.lastProcessedCategory = progress.lastProcessedCategory || null;
                this.lastProcessedCategoryIndex = progress.lastProcessedCategoryIndex || 0;
                
                return progress;
            } else {
                console.log('üîç loadProgress: —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            }
        } catch (error) {
            this.writeLog(`‚ùå –û–®–ò–ë–ö–ê –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ Category Parser: ${error.message}`);
            this.writeLog(`‚ùå –§–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: ${this.progressFile}`);
            this.writeLog(`‚ùå –°—Ç–µ–∫ –æ—à–∏–±–∫–∏: ${error.stack}`);
        }
        return null;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
     */
    async getParsingStatus() {
        try {
            console.log('üîç getParsingStatus: –Ω–∞—á–∏–Ω–∞–µ–º...');
            
            // –ß–∏—Ç–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–∑ —Ñ–∞–π–ª–∞ –±–∞–∑–æ–≤–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ (—ç–ª–µ–≥–∞–Ω—Ç–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ)
            const fs = require('fs');
            const baseProgressFile = this.baseParser.progressFile;
            
            let processed = 0, errors = 0, skipped = 0;
            
            if (fs.existsSync(baseProgressFile)) {
                console.log('üîç getParsingStatus: —á–∏—Ç–∞–µ–º —Ñ–∞–π–ª –±–∞–∑–æ–≤–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞:', baseProgressFile);
                const baseProgress = JSON.parse(fs.readFileSync(baseProgressFile, 'utf8'));
                processed = baseProgress.processed || 0;
                errors = baseProgress.errors || 0;
                skipped = baseProgress.skipped || 0;
                console.log(`üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –∏–∑ —Ñ–∞–π–ª–∞: processed=${processed}, errors=${errors}, skipped=${skipped}`);
            } else {
                console.log('üîç getParsingStatus: —Ñ–∞–π–ª –±–∞–∑–æ–≤–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            let categories = [];
            if (this.categoryProgress && Object.keys(this.categoryProgress).length > 0) {
                console.log('üîç getParsingStatus: –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞–π–¥–µ–Ω—ã:', Object.keys(this.categoryProgress));
                categories = Object.keys(this.categoryProgress).map(categoryName => {
                    const progress = this.categoryProgress[categoryName];
                    return {
                        category: categoryName,
                        count: progress.total || 0,
                        with_source: progress.processed || 0
                    };
                });
            } else {
                console.log('üîç getParsingStatus: –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            }
            
            return {
                total: { total_lots: 0, lots_with_categories: 0, lots_with_source_category: 0 },
                categories: categories,
                recent: [],
                parser: {
                    mode: this.mode,
                    targetAuctionNumber: this.targetAuctionNumber,
                    processed: processed,
                    errors: errors,
                    skipped: skipped
                }
            };

        } catch (error) {
            this.writeLog(`‚ùå –û–®–ò–ë–ö–ê –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: ${error.message}`);
            this.writeLog(`‚ùå –°—Ç–µ–∫ –æ—à–∏–±–∫–∏: ${error.stack}`);
            return null;
        }
    }

    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
     */
    async parseAllCategories(options = {}) {
        const {
            maxCategories = null,
            maxLotsPerCategory = null,
            skipExisting = true,
            delayBetweenLots = 800,
            testMode = false
        } = options;

        this.writeLog('üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –ü–ê–†–°–ò–ù–ì –í–°–ï–• –ö–ê–¢–ï–ì–û–†–ò–ô WOLMAR...');
        this.writeLog(`–ù–∞—Å—Ç—Ä–æ–π–∫–∏: maxCategories=${maxCategories}, maxLotsPerCategory=${maxLotsPerCategory}, testMode=${testMode}`);

        try {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            await this.init();

            // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            this.writeLog('üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
            const categories = await this.loadCategoriesFromDatabase();
            
            if (categories.length === 0) {
                this.writeLog('‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
                return;
            }

            const totalCategories = maxCategories ? Math.min(maxCategories, categories.length) : categories.length;
            this.writeLog(`üìä –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${totalCategories}`);

            // –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            for (let i = 0; i < totalCategories; i++) {
                const category = categories[i];
                const progress = `${i + 1}/${totalCategories}`;
                this.writeLog(`\nüîÑ [${progress}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ${category.name}`);
                
                console.log(`\nüéØ [${progress}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ${category.name}`);
                
                try {
                    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º URL –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞
                    const categoryUrl = category.url_template.replace('{AUCTION_NUMBER}', this.targetAuctionNumber);
                    
                    await this.parseCategoryLots(categoryUrl, category.name, {
                        maxLots: maxLotsPerCategory,
                        skipExisting,
                        delayBetweenLots,
                        testMode
                    });
                    
                    // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
                    await this.delay(2000);
                    
                } catch (error) {
                    this.writeLog(`‚ùå –û–®–ò–ë–ö–ê –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${category.name}: ${error.message}`);
                    this.writeLog(`‚ùå –°—Ç–µ–∫ –æ—à–∏–±–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${error.stack}`);
                    this.errors++;
                    continue;
                }
            }

            // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            this.writeLog(`üéâ –ü–ê–†–°–ò–ù–ì –í–°–ï–• –ö–ê–¢–ï–ì–û–†–ò–ô –ó–ê–í–ï–†–®–ï–ù!`);
            this.writeLog(`üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:`);
            this.writeLog(`   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ª–æ—Ç–æ–≤: ${this.processed}`);
            this.writeLog(`   ‚ùå –û—à–∏–±–æ–∫: ${this.errors}`);
            this.writeLog(`   ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${this.skipped}`);

        } catch (error) {
            this.writeLog(`‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${error.message}`);
            this.writeLog(`‚ùå –°—Ç–µ–∫ –æ—à–∏–±–∫–∏: ${error.stack}`);
            throw error;
        } finally {
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            if (this.browser) {
                await this.browser.close();
            }
            if (this.dbClient) {
                await this.dbClient.end();
            }
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
module.exports = WolmarCategoryParser;

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    async function main() {
        const config = require('./config');
        const args = process.argv.slice(2);
        
        if (args.length === 0) {
            console.log('üöÄ Wolmar Category Parser');
            console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
            console.log('  auction <–Ω–æ–º–µ—Ä_–∞—É–∫—Ü–∏–æ–Ω–∞> [--include-bids]     - –ü–∞—Ä—Å–∏–Ω–≥ –∞—É–∫—Ü–∏–æ–Ω–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º');
            console.log('  resume <–Ω–æ–º–µ—Ä_–∞—É–∫—Ü–∏–æ–Ω–∞> [--from-lot <–Ω–æ–º–µ—Ä>] [--include-bids] - –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞');
            console.log('');
            console.log('–ü—Ä–∏–º–µ—Ä—ã:');
            console.log('  node wolmar-category-parser.js auction 2009');
            console.log('  node wolmar-category-parser.js auction 2009 --include-bids');
            console.log('  node wolmar-category-parser.js resume 2009');
            console.log('  node wolmar-category-parser.js resume 2009 --from-lot 6891172 --include-bids');
            return;
        }
        
        const command = args[0];
        const auctionNumber = args[1];
        
        if (!auctionNumber) {
            console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä –∞—É–∫—Ü–∏–æ–Ω–∞');
            process.exit(1);
        }
        
        // –ü–∞—Ä—Å–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        const includeBids = args.includes('--include-bids');
        const fromLotIndex = args.indexOf('--from-lot');
        const startFromLot = fromLotIndex !== -1 && args[fromLotIndex + 1] ? parseInt(args[fromLotIndex + 1]) : null;
        
        console.log(`üöÄ Wolmar Category Parser - –ê—É–∫—Ü–∏–æ–Ω ${auctionNumber}`);
        console.log(`üìã –ö–æ–º–∞–Ω–¥–∞: ${command}`);
        console.log(`üí∞ –ü–∞—Ä—Å–∏—Ç—å —Å—Ç–∞–≤–∫–∏: ${includeBids ? '–î–∞' : '–ù–µ—Ç'}`);
        if (startFromLot) {
            console.log(`üîÑ –ù–∞—á–∞—Ç—å —Å –ª–æ—Ç–∞: ${startFromLot}`);
        }
        
        const parser = new WolmarCategoryParser(config.dbConfig, command, auctionNumber);
        
        try {
            await parser.init();
            
            if (command === 'auction') {
                console.log(`üìç –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞—É–∫—Ü–∏–æ–Ω–∞ ${auctionNumber} –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º...`);
                await parser.parseSpecificAuction(auctionNumber, 1, {
                    skipExisting: true,
                    delayBetweenLots: 800,
                    includeBids: includeBids
                });
            } else if (command === 'resume') {
                console.log(`üìç –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞—É–∫—Ü–∏–æ–Ω–∞ ${auctionNumber}...`);
                await parser.parseSpecificAuction(auctionNumber, startFromLot || 1, {
                    skipExisting: true,
                    delayBetweenLots: 800,
                    includeBids: includeBids,
                    resumeFromLastLot: true  // –í—Å–µ–≥–¥–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                });
            } else {
                throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –∫–æ–º–∞–Ω–¥–∞: ${command}`);
            }
            
            console.log('‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
            process.exit(0);
            
        } catch (error) {
            console.error('‚ùå –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π:', error.message);
            console.error('‚ùå –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
            process.exit(1);
        }
    }
    
    main().catch(error => {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
        process.exit(1);
    });
}
