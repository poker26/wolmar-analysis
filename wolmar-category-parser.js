/**
 * Wolmar Category Parser
 * 
 * –ü–∞—Ä—Å–µ—Ä –ª–æ—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º Wolmar –Ω–∞ –æ—Å–Ω–æ–≤–µ wolmar-parser5.js
 * 
 * –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
 * - –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ Wolmar
 * - –ü–∞—Ä—Å–∏–Ω–≥ –ª–æ—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
 * - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (–∫–∞—Ç–µ–≥–æ—Ä–∏—è vs –∞—É–∫—Ü–∏–æ–Ω)
 * - –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
 * 
 * –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 18.09.2025
 * –ê–≤—Ç–æ—Ä: AI Assistant
 */

const puppeteer = require('puppeteer-core');
const { Client } = require('pg');
const fs = require('fs');
const https = require('https');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä
const WolmarAuctionParser = require('./wolmar-parser5');
const LotClassifier = require('./lot-classifier');

class WolmarCategoryParser {
    constructor(dbConfig) {
        // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑–æ–≤–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞
        this.baseParser = new WolmarAuctionParser(dbConfig, 'category-parser');
        
        // –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ —Å–≤–æ–π—Å—Ç–≤–∞ –±–∞–∑–æ–≤–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞
        this.dbConfig = this.baseParser.dbConfig;
        this.dbClient = this.baseParser.dbClient;
        this.browser = this.baseParser.browser;
        this.page = this.baseParser.page;
        this.processed = this.baseParser.processed;
        this.errors = this.baseParser.errors;
        this.skipped = this.baseParser.skipped;
        this.auctionNumber = this.baseParser.auctionNumber;
        this.progressFile = this.baseParser.progressFile;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å–≤–æ–π—Å—Ç–≤–∞
        this.categories = [];
        this.classifier = new LotClassifier();
        this.baseUrl = 'https://wolmar.ru';
    }

    // –ö–æ–ø–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ç–æ–¥—ã –∏–∑ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞
    async init() {
        return await this.baseParser.init();
    }

    async ensurePageActive() {
        return await this.baseParser.ensurePageActive();
    }

    async recreatePage() {
        return await this.baseParser.recreatePage();
    }

    async delay(ms) {
        return await this.baseParser.delay(ms);
    }

    async lotExists(auctionNumber, lotNumber) {
        return await this.baseParser.lotExists(auctionNumber, lotNumber);
    }

    /**
     * –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ Wolmar
     */
    async discoverCategories() {
        console.log('üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ Wolmar...');
        
        try {
            await this.ensurePageActive();
            await this.page.goto(this.baseUrl, { waitUntil: 'domcontentloaded', timeout: 30000 });
            await this.delay(2000);

            const categories = await this.page.evaluate(() => {
                const foundCategories = [];
                
                // –ò—â–µ–º —Å—Å—ã–ª–∫–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º ?category=
                const categoryLinks = document.querySelectorAll('a[href*="?category="]');
                categoryLinks.forEach(link => {
                    const url = link.href;
                    const name = link.textContent.trim();
                    if (name && url) {
                        foundCategories.push({
                            name: name,
                            url: url,
                            type: 'parametric'
                        });
                    }
                });

                // –ò—â–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, /monety)
                const textCategoryLinks = document.querySelectorAll('a[href^="/"][href*="category"], a[href^="/"][href*="monety"], a[href^="/"][href*="banknoty"]');
                textCategoryLinks.forEach(link => {
                    const url = link.href;
                    const name = link.textContent.trim();
                    if (name && url && !url.includes('?') && url !== '/') {
                        foundCategories.push({
                            name: name,
                            url: url,
                            type: 'url'
                        });
                    }
                });

                return foundCategories;
            });

            // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ URL
            const uniqueCategories = categories.filter((category, index, self) => 
                index === self.findIndex(c => c.url === category.url)
            );

            this.categories = uniqueCategories;
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${uniqueCategories.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
            
            // –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            uniqueCategories.forEach((category, index) => {
                console.log(`   ${index + 1}. ${category.name} (${category.type}) - ${category.url}`);
            });

            return uniqueCategories;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error.message);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ –ª–æ—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     */
    async getCategoryLotUrls(categoryUrl, testMode = false) {
        console.log(`üîç –°–æ–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –ª–æ—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${categoryUrl}`);
        const allUrls = new Set();
        
        try {
            await this.ensurePageActive();
            await this.page.goto(categoryUrl, { waitUntil: 'domcontentloaded', timeout: 30000 });
            await this.delay(2000);

            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            const paginationInfo = await this.page.evaluate(() => {
                // –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ª–æ—Ç–æ–≤ –∏ —Å—Ç—Ä–∞–Ω–∏—Ü
                const totalLotsElement = document.querySelector('.disabled[style*="float: right"]');
                const totalLots = totalLotsElement ? totalLotsElement.textContent.match(/(\d+)\s*–ª–æ—Ç/)?.[1] : null;
                
                // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
                const paginationLinks = document.querySelectorAll('.paginator li a');
                let maxPage = 1;
                paginationLinks.forEach(link => {
                    const pageNum = parseInt(link.textContent);
                    if (pageNum && pageNum > maxPage) {
                        maxPage = pageNum;
                    }
                });

                return {
                    totalLots: totalLots ? parseInt(totalLots) : null,
                    maxPage: maxPage
                };
            });

            console.log(`   üìä –ù–∞–π–¥–µ–Ω–æ –ª–æ—Ç–æ–≤: ${paginationInfo.totalLots || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
            console.log(`   üìÑ –°—Ç—Ä–∞–Ω–∏—Ü: ${paginationInfo.maxPage}`);

            const maxPages = testMode ? Math.min(3, paginationInfo.maxPage) : paginationInfo.maxPage;

            // –°–æ–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫–∏ —Å–æ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
            for (let page = 1; page <= maxPages; page++) {
                try {
                    const pageUrl = page === 1 ? categoryUrl : `${categoryUrl}${categoryUrl.includes('?') ? '&' : '?'}page=${page}`;
                    
                    console.log(`   üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É ${page}/${maxPages}: ${pageUrl}`);
                    
                    await this.page.goto(pageUrl, { waitUntil: 'domcontentloaded', timeout: 30000 });
                    await this.delay(1000);

                    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –ª–æ—Ç—ã —Å —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    const pageUrls = await this.page.evaluate(() => {
                        const urls = [];
                        
                        // –ò—â–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ª–æ—Ç—ã –≤ —Ç–∞–±–ª–∏—Ü–µ
                        const lotLinks = document.querySelectorAll('a.title.lot[href*="/auction/"]');
                        
                        lotLinks.forEach(link => {
                            if (link.href && link.href.includes('/auction/')) {
                                urls.push(link.href);
                            }
                        });

                        return urls;
                    });

                    pageUrls.forEach(url => allUrls.add(url));
                    console.log(`   ‚úì –ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: ${pageUrls.length} (–≤—Å–µ–≥–æ: ${allUrls.size})`);

                    // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
                    await this.delay(500);

                } catch (error) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${page}:`, error.message);
                    
                    // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å detached frame, –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    if (error.message.includes('detached') || error.message.includes('Frame')) {
                        console.log(`üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ detached frame –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${page}, –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...`);
                        await this.recreatePage();
                        await this.delay(3000);
                    }
                    
                    continue;
                }
            }

            const urls = Array.from(allUrls);
            console.log(`‚úÖ –°–æ–±—Ä–∞–Ω–æ ${urls.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ –ª–æ—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏`);
            
            return urls;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ —Å—Å—ã–ª–æ–∫ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error.message);
            throw error;
        }
    }

    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ª–æ—Ç–∞ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     */
    async parseLotPage(url, auctionEndDate = null, sourceCategory = null) {
        try {
            // –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –±–∞–∑–æ–≤–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞
            const lotData = await this.baseParser.parseLotPage(url, auctionEndDate);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            lotData.sourceCategory = sourceCategory;
            lotData.parsingMethod = 'category_parser';
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if (this.classifier && lotData.coinDescription) {
                const classification = this.classifier.classify({
                    coin_description: lotData.coinDescription,
                    letters: lotData.letters || '',
                    metal: lotData.metal || '',
                    lot_type: lotData.lotType || ''
                });
                
                lotData.category = classification.category;
                lotData.categoryConfidence = classification.confidence;
            }
            
            return lotData;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ª–æ—Ç–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π:', error.message);
            throw error;
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
     */
    async saveLotToDatabase(lotData) {
        try {
            const insertQuery = `
                INSERT INTO auction_lots (
                    lot_number, auction_number, coin_description, avers_image_url, avers_image_path,
                    revers_image_url, revers_image_path, winner_login, winning_bid, auction_end_date,
                    currency, source_url, bids_count, lot_status, year, metal, weight, condition,
                    letters, mintage, lot_type, category, source_category, parsing_method
                ) VALUES (
                    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24
                ) RETURNING id
            `;

            const values = [
                lotData.lotNumber,
                lotData.auctionNumber,
                lotData.coinDescription,
                lotData.aversImageUrl,
                lotData.aversImagePath,
                lotData.reversImageUrl,
                lotData.reversImagePath,
                lotData.winnerLogin,
                lotData.winningBid,
                lotData.auctionEndDate,
                lotData.currency || 'RUB',
                lotData.sourceUrl,
                lotData.bidsCount,
                lotData.lotStatus,
                lotData.year,
                lotData.metal,
                lotData.weight,
                lotData.condition,
                lotData.letters,
                lotData.mintage,
                lotData.lotType,
                lotData.category,
                lotData.sourceCategory,
                lotData.parsingMethod
            ];

            const result = await this.dbClient.query(insertQuery, values);
            return result.rows[0].id;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ—Ç–∞ –≤ –ë–î:', error.message);
            
            // –ï—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ, –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
            if (error.message.includes('Connection terminated') || error.message.includes('connection') || error.message.includes('not queryable')) {
                console.log('üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
                try {
                    await this.dbClient.end();
                    this.dbClient = new Client(this.dbConfig);
                    await this.dbClient.connect();
                    console.log('‚úÖ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ');
                    
                    // –ü–æ–≤—Ç–æ—Ä—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
                    return await this.saveLotToDatabase(lotData);
                } catch (reconnectError) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', reconnectError.message);
                    return null;
                }
            }
            
            return null;
        }
    }

    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ –ª–æ—Ç–æ–≤ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     */
    async parseCategoryLots(categoryUrl, categoryName, options = {}) {
        const {
            maxLots = null,
            skipExisting = true,
            delayBetweenLots = 800,
            testMode = false
        } = options;

        console.log(`\nüéØ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${categoryName}`);
        console.log(`   URL: ${categoryUrl}`);
        console.log(`   –ù–∞—Å—Ç—Ä–æ–π–∫–∏: maxLots=${maxLots}, skipExisting=${skipExisting}, delay=${delayBetweenLots}ms, testMode=${testMode}`);

        try {
            // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –ª–æ—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            const lotUrls = await this.getCategoryLotUrls(categoryUrl, testMode);
            
            if (lotUrls.length === 0) {
                console.log(`‚ö†Ô∏è –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryName} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ª–æ—Ç–æ–≤`);
                return;
            }

            const totalLots = maxLots ? Math.min(maxLots, lotUrls.length) : lotUrls.length;
            console.log(`üìä –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ª–æ—Ç–æ–≤: ${totalLots}`);

            let categoryProcessed = 0;
            let categorySkipped = 0;
            let categoryErrors = 0;

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–æ—Ç—ã
            for (let i = 0; i < totalLots; i++) {
                const url = lotUrls[i];
                const progress = `${i + 1}/${totalLots}`;
                
                try {
                    console.log(`\n[${progress}] –ü–∞—Ä—Å–∏–Ω–≥: ${url}`);
                    
                    // –ü–∞—Ä—Å–∏–º –ª–æ—Ç —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    const lotData = await this.parseLotPage(url, null, categoryName);
                    
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ª–æ—Ç–∞
                    if (skipExisting && lotData.auctionNumber && lotData.lotNumber) {
                        const exists = await this.lotExists(lotData.auctionNumber, lotData.lotNumber);
                        if (exists) {
                            console.log(`   ‚è≠Ô∏è –õ–æ—Ç ${lotData.lotNumber} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                            categorySkipped++;
                            continue;
                        }
                    }

                    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
                    const savedId = await this.saveLotToDatabase(lotData);
                    if (savedId) {
                        categoryProcessed++;
                        this.processed++;
                        
                        // –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ—Ç–µ
                        console.log(`   ‚úÖ –õ–æ—Ç ${lotData.lotNumber}: ${lotData.coinDescription?.substring(0, 50)}...`);
                        console.log(`   üí∞ ${lotData.winningBid} —Ä—É–±. | üë§ ${lotData.winnerLogin} | üè∑Ô∏è ${lotData.category || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'}`);
                    } else {
                        console.log(`   ‚ùå –õ–æ—Ç ${lotData.lotNumber} –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î`);
                        categoryErrors++;
                        this.errors++;
                    }

                    // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ª–æ—Ç–∞–º–∏
                    await this.delay(delayBetweenLots);

                } catch (error) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ—Ç–∞ [${progress}]:`, error.message);
                    categoryErrors++;
                    this.errors++;
                    
                    // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å detached frame, –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    if (error.message.includes('detached') || error.message.includes('Frame')) {
                        console.log(`üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ detached frame, –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...`);
                        await this.recreatePage();
                        await this.delay(3000);
                    }
                }
            }

            console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${categoryName}":`);
            console.log(`   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${categoryProcessed}`);
            console.log(`   ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${categorySkipped}`);
            console.log(`   ‚ùå –û—à–∏–±–æ–∫: ${categoryErrors}`);

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryName}:`, error.message);
            throw error;
        }
    }

    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
     */
    async parseAllCategories(options = {}) {
        const {
            maxCategories = null,
            maxLotsPerCategory = null,
            skipExisting = true,
            delayBetweenLots = 800,
            testMode = false
        } = options;

        console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π Wolmar...');
        console.log(`–ù–∞—Å—Ç—Ä–æ–π–∫–∏: maxCategories=${maxCategories}, maxLotsPerCategory=${maxLotsPerCategory}, testMode=${testMode}`);

        try {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            await this.init();

            // –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            const categories = await this.discoverCategories();
            
            if (categories.length === 0) {
                console.log('‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                return;
            }

            const totalCategories = maxCategories ? Math.min(maxCategories, categories.length) : categories.length;
            console.log(`\nüìä –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${totalCategories}`);

            // –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            for (let i = 0; i < totalCategories; i++) {
                const category = categories[i];
                const progress = `${i + 1}/${totalCategories}`;
                
                console.log(`\nüéØ [${progress}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ${category.name}`);
                
                try {
                    await this.parseCategoryLots(category.url, category.name, {
                        maxLots: maxLotsPerCategory,
                        skipExisting,
                        delayBetweenLots,
                        testMode
                    });
                    
                    // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
                    await this.delay(2000);
                    
                } catch (error) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${category.name}:`, error.message);
                    this.errors++;
                    continue;
                }
            }

            // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            console.log(`\nüéâ –ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω!`);
            console.log(`üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
            console.log(`   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ª–æ—Ç–æ–≤: ${this.processed}`);
            console.log(`   ‚ùå –û—à–∏–±–æ–∫: ${this.errors}`);
            console.log(`   ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${this.skipped}`);

        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error.message);
            throw error;
        } finally {
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            if (this.browser) {
                await this.browser.close();
            }
            if (this.dbClient) {
                await this.dbClient.end();
            }
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
module.exports = WolmarCategoryParser;

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    const config = require('./config');
    
    const parser = new WolmarCategoryParser(config.dbConfig);
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    const options = {
        maxCategories: 3,        // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ 3 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        maxLotsPerCategory: 10,  // –ü–æ 10 –ª–æ—Ç–æ–≤ –≤ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        skipExisting: true,      // –ü—Ä–æ–ø—É—Å–∫–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ª–æ—Ç—ã
        delayBetweenLots: 1000,  // –ó–∞–¥–µ—Ä–∂–∫–∞ 1 —Å–µ–∫—É–Ω–¥–∞ –º–µ–∂–¥—É –ª–æ—Ç–∞–º–∏
        testMode: true           // –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
    };
    
    parser.parseAllCategories(options)
        .then(() => {
            console.log('‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
            process.exit(0);
        })
        .catch((error) => {
            console.error('‚ùå –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π:', error.message);
            process.exit(1);
        });
}
