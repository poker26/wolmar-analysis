const puppeteer = require('puppeteer');
const { launchPuppeteer, createPage, cleanupChromeTempFiles } = require('./puppeteer-utils');

async function analyzeWolmarCategoriesDetailed() {
    console.log('üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ Wolmar...');
    
    const browser = await launchPuppeteer();
    
    try {
        const page = await createPage(browser);
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É Wolmar
        console.log('üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É Wolmar...');
        await page.goto('https://wolmar.ru/', { 
            waitUntil: 'networkidle2',
            timeout: 30000 
        });
        
        // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        await new Promise(resolve => setTimeout(resolve, 3000));
        
        // –ü–æ–ª—É—á–∞–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        const pageContent = await page.content();
        
        // –ò—â–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º category
        console.log('üîç –ò—â–µ–º —Å—Å—ã–ª–∫–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º category...');
        
        const categoryLinks = await page.evaluate(() => {
            const links = Array.from(document.querySelectorAll('a[href*="category"]'));
            return links.map(link => ({
                text: link.textContent.trim(),
                href: link.href,
                categoryId: new URL(link.href).searchParams.get('category')
            }));
        });
        
        console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${categoryLinks.length} —Å—Å—ã–ª–æ–∫ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏:`);
        categoryLinks.forEach((link, index) => {
            console.log(`${index + 1}. ${link.text}`);
            console.log(`   URL: ${link.href}`);
            console.log(`   Category ID: ${link.categoryId}`);
            console.log('');
        });
        
        // –ò—â–µ–º –±–ª–æ–∫ "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–æ–Ω–µ—Ç" –∏ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –≤ –Ω–µ–º
        console.log('üîç –ò—â–µ–º –±–ª–æ–∫ "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–æ–Ω–µ—Ç"...');
        
        const categoryBlockLinks = await page.evaluate(() => {
            // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Ç–µ–∫—Å—Ç "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–æ–Ω–µ—Ç"
            const walker = document.createTreeWalker(
                document.body,
                NodeFilter.SHOW_TEXT,
                null,
                false
            );
            
            let categoryBlock = null;
            let node;
            while (node = walker.nextNode()) {
                if (node.textContent.includes('–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–æ–Ω–µ—Ç')) {
                    categoryBlock = node.parentElement;
                    break;
                }
            }
            
            if (!categoryBlock) return [];
            
            // –ò—â–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –≤ —ç—Ç–æ–º –±–ª–æ–∫–µ –∏ —Å–æ—Å–µ–¥–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
            const allLinks = [];
            let currentElement = categoryBlock;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –∏ –µ–≥–æ —Å–æ—Å–µ–¥–µ–π
            for (let i = 0; i < 10; i++) {
                if (!currentElement) break;
                
                const links = currentElement.querySelectorAll('a');
                links.forEach(link => {
                    const text = link.textContent.trim();
                    const href = link.href;
                    if (text && href && text.length > 0 && text.length < 200) {
                        allLinks.push({
                            text: text,
                            href: href,
                            categoryId: href.includes('category=') ? new URL(href).searchParams.get('category') : null
                        });
                    }
                });
                
                currentElement = currentElement.nextElementSibling;
            }
            
            return allLinks;
        });
        
        console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${categoryBlockLinks.length} —Å—Å—ã–ª–æ–∫ –≤ –±–ª–æ–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:`);
        categoryBlockLinks.forEach((link, index) => {
            console.log(`${index + 1}. ${link.text}`);
            console.log(`   URL: ${link.href}`);
            if (link.categoryId) {
                console.log(`   Category ID: ${link.categoryId}`);
            }
            console.log('');
        });
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–æ–Ω–µ—Ç
        console.log('üîç –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–æ–Ω–µ—Ç...');
        
        const coinCategories = await page.evaluate(() => {
            const categories = [];
            const textContent = document.body.textContent;
            
            // –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            const categoryPatterns = [
                '–ú–æ–Ω–µ—Ç—ã –∞–Ω—Ç–∏–∫–∞',
                '—Å—Ä–µ–¥–Ω–µ–≤–µ–∫–æ–≤—å–µ',
                '–î–æ–ø–µ—Ç—Ä–æ–≤—Å–∫–∏–µ –º–æ–Ω–µ—Ç—ã',
                '–ú–æ–Ω–µ—Ç—ã –†–æ—Å—Å–∏–∏ –¥–æ 1917',
                '–∑–æ–ª–æ—Ç–æ',
                '—Å–µ—Ä–µ–±—Ä–æ',
                '–ú–æ–Ω–µ—Ç—ã –°–°–°–†',
                '–ú–æ–Ω–µ—Ç—ã –†–æ—Å—Å–∏–∏',
                '–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã'
            ];
            
            categoryPatterns.forEach(pattern => {
                if (textContent.includes(pattern)) {
                    // –ò—â–µ–º –±–ª–∏–∂–∞–π—à–∏–µ —Å—Å—ã–ª–∫–∏ –∫ —ç—Ç–æ–º—É —Ç–µ–∫—Å—Ç—É
                    const walker = document.createTreeWalker(
                        document.body,
                        NodeFilter.SHOW_TEXT,
                        null,
                        false
                    );
                    
                    let node;
                    while (node = walker.nextNode()) {
                        if (node.textContent.includes(pattern)) {
                            let parent = node.parentElement;
                            for (let i = 0; i < 5; i++) {
                                if (!parent) break;
                                const link = parent.querySelector('a');
                                if (link && link.href) {
                                    categories.push({
                                        pattern: pattern,
                                        text: link.textContent.trim(),
                                        href: link.href,
                                        categoryId: link.href.includes('category=') ? new URL(link.href).searchParams.get('category') : null
                                    });
                                    break;
                                }
                                parent = parent.parentElement;
                            }
                            break;
                        }
                    }
                }
            });
            
            return categories;
        });
        
        console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${coinCategories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–æ–Ω–µ—Ç:`);
        coinCategories.forEach((category, index) => {
            console.log(`${index + 1}. ${category.pattern}`);
            console.log(`   –¢–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏: ${category.text}`);
            console.log(`   URL: ${category.href}`);
            if (category.categoryId) {
                console.log(`   Category ID: ${category.categoryId}`);
            }
            console.log('');
        });
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        const fs = require('fs');
        const results = {
            categoryLinks,
            categoryBlockLinks,
            coinCategories,
            timestamp: new Date().toISOString()
        };
        
        fs.writeFileSync('wolmar-categories-detailed.json', JSON.stringify(results, null, 2));
        console.log('üíæ –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ wolmar-categories-detailed.json');
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–¥–Ω—É –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        if (categoryLinks.length > 0) {
            const testCategory = categoryLinks[0];
            console.log(`\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ${testCategory.text}`);
            console.log(`URL: ${testCategory.href}`);
            
            try {
                await page.goto(testCategory.href, { 
                    waitUntil: 'networkidle2',
                    timeout: 30000 
                });
                
                await new Promise(resolve => setTimeout(resolve, 2000));
                
                // –ò—â–µ–º –ª–æ—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                const lots = await page.evaluate(() => {
                    const lotElements = document.querySelectorAll('a[href*="/auction/"]');
                    return Array.from(lotElements).slice(0, 5).map(lot => ({
                        text: lot.textContent.trim(),
                        href: lot.href
                    }));
                });
                
                console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${lots.length} –ª–æ—Ç–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:`);
                lots.forEach((lot, index) => {
                    console.log(`${index + 1}. ${lot.text}`);
                    console.log(`   URL: ${lot.href}`);
                });
                
            } catch (error) {
                console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${error.message}`);
            }
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
    } finally {
        await cleanupChromeTempFiles();
        await browser.close();
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
analyzeWolmarCategoriesDetailed().catch(console.error);
