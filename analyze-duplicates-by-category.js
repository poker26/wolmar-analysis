const { Pool } = require('pg');
const { getDeduplicationRules, CATEGORIES } = require('./category-classifier');
const isProduction = process.env.NODE_ENV === 'production' || process.env.PORT;
const config = require(isProduction ? './config.production' : './config');

async function analyzeDuplicatesByCategory() {
    const pool = new Pool(config.dbConfig);
    const client = await pool.connect();

    try {
        console.log('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏...\n');

        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        const categoryStatsQuery = `
            SELECT 
                category,
                COUNT(*) as total_records
            FROM coin_catalog 
            GROUP BY category
            ORDER BY total_records DESC
        `;
        
        const categoryStats = await client.query(categoryStatsQuery);
        console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:');
        categoryStats.rows.forEach(row => {
            console.log(`   ${row.category}: ${row.total_records} –∑–∞–ø–∏—Å–µ–π`);
        });

        let totalDuplicates = 0;
        let totalToDelete = 0;

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        for (const categoryRow of categoryStats.rows) {
            const category = categoryRow.category;
            const totalRecords = categoryRow.total_records;
            
            console.log(`\nüè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${category} (${totalRecords} –∑–∞–ø–∏—Å–µ–π)`);
            
            const rules = getDeduplicationRules(category);
            console.log(`   –ü—Ä–∞–≤–∏–ª–∞ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏: ${rules.description}`);
            
            // –°—Ç—Ä–æ–∏–º SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            const fields = rules.fields;
            const groupByClause = fields.join(', ');
            const havingClause = fields.map(field => {
                if (field === 'coin_weight') {
                    return `(coin_weight = $${fields.indexOf(field) + 1} OR (coin_weight IS NULL AND $${fields.indexOf(field) + 1} IS NULL))`;
                }
                return `${field} = $${fields.indexOf(field) + 1}`;
            }).join(' AND ');

            const duplicateQuery = `
                SELECT 
                    ${groupByClause},
                    COUNT(*) as count,
                    STRING_AGG(id::text, ', ' ORDER BY id) as ids,
                    MIN(id) as keep_id
                FROM coin_catalog 
                WHERE category = $1
                GROUP BY ${groupByClause}
                HAVING COUNT(*) > 1
                ORDER BY count DESC
                LIMIT 10
            `;

            const duplicateResult = await client.query(duplicateQuery, [category]);
            
            if (duplicateResult.rows.length === 0) {
                console.log('   ‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
                continue;
            }

            console.log(`   üîç –ù–∞–π–¥–µ–Ω–æ ${duplicateResult.rows.length} –≥—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ (–ø–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 10):`);
            
            let categoryDuplicates = 0;
            let categoryToDelete = 0;

            duplicateResult.rows.forEach((row, index) => {
                const count = parseInt(row.count);
                const toDelete = count - 1; // –û—Å—Ç–∞–≤–ª—è–µ–º –æ–¥–Ω—É –∑–∞–ø–∏—Å—å
                
                categoryDuplicates += count;
                categoryToDelete += toDelete;
                
                console.log(`\n   ${index + 1}. –ì—Ä—É–ø–ø–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:`);
                fields.forEach(field => {
                    console.log(`      ${field}: ${row[field]}`);
                });
                console.log(`      –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${count} –∑–∞–ø–∏—Å–µ–π`);
                console.log(`      –ö —É–¥–∞–ª–µ–Ω–∏—é: ${toDelete} –∑–∞–ø–∏—Å–µ–π`);
                console.log(`      ID: ${row.ids.substring(0, 100)}...`);
            });

            // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            const totalDuplicatesQuery = `
                SELECT COUNT(*) as total_duplicates
                FROM (
                    SELECT ${groupByClause}
                    FROM coin_catalog 
                    WHERE category = $1
                    GROUP BY ${groupByClause}
                    HAVING COUNT(*) > 1
                ) as duplicates
            `;
            
            const totalDuplicatesResult = await client.query(totalDuplicatesQuery, [category]);
            const totalGroups = parseInt(totalDuplicatesResult.rows[0].total_duplicates);
            
            // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –∫ —É–¥–∞–ª–µ–Ω–∏—é
            const totalToDeleteQuery = `
                SELECT SUM(count - 1) as total_to_delete
                FROM (
                    SELECT COUNT(*) as count
                    FROM coin_catalog 
                    WHERE category = $1
                    GROUP BY ${groupByClause}
                    HAVING COUNT(*) > 1
                ) as duplicates
            `;
            
            const totalToDeleteResult = await client.query(totalToDeleteQuery, [category]);
            const totalCategoryToDelete = parseInt(totalToDeleteResult.rows[0].total_to_delete || 0);
            
            console.log(`\n   üìà –ò—Ç–æ–≥–æ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${category}:`);
            console.log(`      –ì—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${totalGroups}`);
            console.log(`      –ó–∞–ø–∏—Å–µ–π –∫ —É–¥–∞–ª–µ–Ω–∏—é: ${totalCategoryToDelete}`);
            console.log(`      –ü—Ä–æ—Ü–µ–Ω—Ç –∫ —É–¥–∞–ª–µ–Ω–∏—é: ${((totalCategoryToDelete / totalRecords) * 100).toFixed(1)}%`);

            totalDuplicates += totalGroups;
            totalToDelete += totalCategoryToDelete;
        }

        console.log(`\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:`);
        console.log(`   –í—Å–µ–≥–æ –≥—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${totalDuplicates}`);
        console.log(`   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –∫ —É–¥–∞–ª–µ–Ω–∏—é: ${totalToDelete}`);
        console.log(`   –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–ø–∏—Å–µ–π –∫ —É–¥–∞–ª–µ–Ω–∏—é: ${((totalToDelete / 129144) * 100).toFixed(1)}%`);

        // –ü—Ä–æ–≤–µ—Ä–∏–º —Å–∞–º—ã–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        console.log(`\n‚ö†Ô∏è  –°–ê–ú–´–ï –ü–†–û–ë–õ–ï–ú–ù–´–ï –ö–ê–¢–ï–ì–û–†–ò–ò:`);
        for (const categoryRow of categoryStats.rows.slice(0, 5)) {
            const category = categoryRow.category;
            const rules = getDeduplicationRules(category);
            const fields = rules.fields;
            const groupByClause = fields.join(', ');
            
            const totalToDeleteQuery = `
                SELECT SUM(count - 1) as total_to_delete
                FROM (
                    SELECT COUNT(*) as count
                    FROM coin_catalog 
                    WHERE category = $1
                    GROUP BY ${groupByClause}
                    HAVING COUNT(*) > 1
                ) as duplicates
            `;
            
            const totalToDeleteResult = await client.query(totalToDeleteQuery, [category]);
            const totalCategoryToDelete = parseInt(totalToDeleteResult.rows[0].total_to_delete || 0);
            const percentage = ((totalCategoryToDelete / categoryRow.total_records) * 100).toFixed(1);
            
            console.log(`   ${category}: ${totalCategoryToDelete} –∑–∞–ø–∏—Å–µ–π –∫ —É–¥–∞–ª–µ–Ω–∏—é (${percentage}%)`);
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:', error);
    } finally {
        client.release();
        await pool.end();
    }
}

analyzeDuplicatesByCategory();
