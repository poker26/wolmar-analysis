const fs = require('fs');
const path = require('path');

// –ö–æ–ø–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ admin-server.js –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function readLogs(type, lines = 100) {
    let logFile;
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è category-parser
    if (type === 'category-parser') {
        logFile = path.join(__dirname, 'logs', 'category-parser.log');
    } else {
        logFile = path.join(__dirname, 'logs', `${type}-parser.log`);
    }
    
    console.log(`üîç –ò—â–µ–º —Ñ–∞–π–ª –ª–æ–≥–æ–≤: ${logFile}`);
    console.log(`üìÅ –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å: ${path.resolve(logFile)}`);
    console.log(`üìä –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${fs.existsSync(logFile)}`);
    
    if (!fs.existsSync(logFile)) {
        console.log('‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤');
        return [];
    }
    
    console.log(`üìÑ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${fs.statSync(logFile).size} –±–∞–π—Ç`);
    
    try {
        const content = fs.readFileSync(logFile, 'utf8');
        console.log(`üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤):`);
        console.log(content.substring(0, 200));
        
        const logLines = content.split('\n').filter(line => line.trim());
        console.log(`üìä –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: ${logLines.length}`);
        console.log(`üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ ${Math.min(lines, logLines.length)} —Å—Ç—Ä–æ–∫:`);
        
        const result = logLines.slice(-lines);
        result.forEach((line, index) => {
            console.log(`  ${index + 1}: ${line}`);
        });
        
        return result;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', error.message);
        return [];
    }
}

// –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é
console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é readLogs –¥–ª—è category-parser:');
console.log('='.repeat(60));

const logs = readLogs('category-parser', 10);

console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:');
console.log(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–æ–≤: ${logs.length}`);
console.log('–õ–æ–≥–∏:', logs);

// –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–º –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
console.log('\n' + '='.repeat(60));
console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é readLogs –¥–ª—è main:');

const mainLogs = readLogs('main', 5);
console.log(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–æ–≤ main: ${mainLogs.length}`);

// –ü—Ä–æ–≤–µ—Ä–∏–º, –∫–∞–∫–∏–µ —Ñ–∞–π–ª—ã –µ—Å—Ç—å –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ logs
console.log('\n' + '='.repeat(60));
console.log('üìÅ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ logs:');

const logsDir = path.join(__dirname, 'logs');
if (fs.existsSync(logsDir)) {
    const files = fs.readdirSync(logsDir);
    files.forEach(file => {
        const filePath = path.join(logsDir, file);
        const stats = fs.statSync(filePath);
        console.log(`  ${file} (${stats.size} –±–∞–π—Ç, ${stats.mtime})`);
    });
} else {
    console.log('‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è logs –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
}
