const { launchPuppeteer, createPage, cleanupChromeTempFiles } = require('./puppeteer-utils');

async function testAjaxBids() {
    console.log('üß™ –¢–ï–°–¢–ò–†–£–ï–ú AJAX –ü–ê–†–°–ò–ù–ì –°–¢–ê–í–û–ö');
    console.log('================================');
    
    const browser = await launchPuppeteer();
    const page = await createPage(browser);
    
    try {
        console.log('\n1Ô∏è‚É£ –ë—Ä–∞—É–∑–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω...');
        
        console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Å—Ç–∞–≤–æ–∫ –¥–ª—è –ª–æ—Ç–∞ 2070/7222265...');
        const testUrl = 'https://www.wolmar.ru/auction/2070/7222265?category=bony';
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ—Ç–∞
        await page.goto(testUrl, { waitUntil: 'domcontentloaded', timeout: 30000 });
        
        // –ü–∞—Ä—Å–∏–º –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞–≤–æ–∫ –Ω–∞–ø—Ä—è–º—É—é
        const bidHistory = await parseBidHistoryDirect(page);
        
        console.log('\n3Ô∏è‚É£ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞:');
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞–≤–æ–∫: ${bidHistory.length}`);
        
        if (bidHistory.length > 0) {
            console.log('\nüí∞ –ü–µ—Ä–≤—ã–µ 5 —Å—Ç–∞–≤–æ–∫:');
            bidHistory.slice(0, 5).forEach((bid, index) => {
                console.log(`   ${index + 1}. ${bid.amount} —Ä—É–±. - ${bid.bidder} (${bid.timestamp}) ${bid.isAutoBid ? '[–ê–í–¢–û–ë–ò–î]' : '[–†–£–ß–ù–ê–Ø]'}`);
            });
            
            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–≤—Ç–æ–±–∏–¥–∞–º
            const autoBids = bidHistory.filter(bid => bid.isAutoBid).length;
            const manualBids = bidHistory.length - autoBids;
            
            console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
            console.log(`   –í—Å–µ–≥–æ —Å—Ç–∞–≤–æ–∫: ${bidHistory.length}`);
            console.log(`   –ê–≤—Ç–æ–±–∏–¥–æ–≤: ${autoBids} (${Math.round(autoBids / bidHistory.length * 100)}%)`);
            console.log(`   –†—É—á–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫: ${manualBids} (${Math.round(manualBids / bidHistory.length * 100)}%)`);
        } else {
            console.log('‚ùå –°—Ç–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error.message);
    } finally {
        await cleanupChromeTempFiles();
        await browser.close();
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç–∞–≤–æ–∫ –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
async function parseBidHistoryDirect(page) {
    try {
        console.log(`üí∞ –ü–∞—Ä—Å–∏–º –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞–≤–æ–∫ —á–µ—Ä–µ–∑ AJAX...`);
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º auction_id –∏ lot_id –∏–∑ URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const url = page.url();
        const urlMatch = url.match(/\/auction\/(\d+)\/(\d+)/);
        if (!urlMatch) {
            console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å auction_id –∏ lot_id –∏–∑ URL: ${url}`);
            return [];
        }
        
        const auctionId = urlMatch[1];
        const lotId = urlMatch[2];
        console.log(`üîç –ò–∑–≤–ª–µ—á–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: auction_id=${auctionId}, lot_id=${lotId}`);
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º AJAX URL
        const ajaxUrl = `https://www.wolmar.ru/ajax/bids.php?auction_id=${auctionId}&lot_id=${lotId}`;
        console.log(`üåê AJAX URL: ${ajaxUrl}`);
        
        // –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ AJAX endpoint
        const response = await page.goto(ajaxUrl, { waitUntil: 'domcontentloaded', timeout: 10000 });
        if (!response || !response.ok()) {
            console.log(`‚ùå –û—à–∏–±–∫–∞ AJAX –∑–∞–ø—Ä–æ—Å–∞: ${response?.status()}`);
            return [];
        }
        
        // –ü–∞—Ä—Å–∏–º HTML —Ç–∞–±–ª–∏—Ü—ã —Å—Ç–∞–≤–æ–∫
        const bidHistory = await page.evaluate(() => {
            const bids = [];
            
            // –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—É —Å—Ç–∞–≤–æ–∫
            const table = document.querySelector('table.colored');
            if (!table) {
                console.log('–¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∞–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                return bids;
            }
            
            const rows = table.querySelectorAll('tr');
            console.log(`–ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ: ${rows.length}`);
            
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞)
            for (let i = 1; i < rows.length; i++) {
                const row = rows[i];
                const cells = row.querySelectorAll('td');
                
                if (cells.length >= 4) {
                    // –°—Ç—Ä—É–∫—Ç—É—Ä–∞: –°—É–º–º–∞, *, –õ–æ–≥–∏–Ω, –î–∞—Ç–∞/–í—Ä–µ–º—è, (–ø—É—Å—Ç–∞—è)
                    const amountText = cells[0]?.textContent?.trim();
                    const starText = cells[1]?.textContent?.trim();
                    const bidderText = cells[2]?.textContent?.trim();
                    const timestampText = cells[3]?.textContent?.trim();
                    
                    console.log(`–°—Ç—Ä–æ–∫–∞ ${i}: "${amountText}" | "${starText}" | "${bidderText}" | "${timestampText}"`);
                    
                    if (amountText && bidderText && timestampText) {
                        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É–º–º—É (—É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∏—Å–ª–æ)
                        const amount = parseInt(amountText.replace(/\s/g, ''));
                        
                        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–≤—Ç–æ–±–∏–¥ –ø–æ –Ω–∞–ª–∏—á–∏—é –∑–≤–µ–∑–¥–æ—á–∫–∏ –≤ –∫–æ–ª–æ–Ω–∫–µ 1
                        const isAutoBid = starText === '*';
                        
                        bids.push({
                            amount: amount,
                            bidder: bidderText,
                            timestamp: timestampText,
                            isAutoBid: isAutoBid
                        });
                    }
                }
            }
            
            return bids;
        });
        
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${bidHistory.length} —Å—Ç–∞–≤–æ–∫ —á–µ—Ä–µ–∑ AJAX`);
        return bidHistory;
        
    } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞–≤–æ–∫: ${error.message}`);
        return [];
    }
}

if (require.main === module) {
    testAjaxBids();
}
