"""
–ê–Ω–∞–ª–∏–∑ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω–µ Wolmar
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python wolmar_analyzer.py
"""

import pandas as pd
import numpy as np

def analyze_circular_buyers(lots_df, min_purchases=3):
    """
    –ê–Ω–∞–ª–∏–∑ –∫—Ä—É–≥–æ–≤—ã—Ö –ø–æ–∫—É–ø–æ–∫ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–∫—É–ø–∞—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –º–æ–Ω–µ—Ç—ã –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ
    """
    
    print("\n" + "="*60)
    print("üîç –ê–ù–ê–õ–ò–ó 1: –ö–†–£–ì–û–í–´–ï –ü–û–ö–£–ü–ö–ò")
    print("="*60)
    
    results = []
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é –∏ –º–æ–Ω–µ—Ç–µ
    grouped = lots_df.groupby(['winner_login', 'coin_description'])
    
    for (winner, coin), group in grouped:
        purchases = len(group)
        
        if purchases >= min_purchases:
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫
            dates = pd.to_datetime(group['auction_end_date'])
            time_span_weeks = (dates.max() - dates.min()).days / 7
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            avg_price = group['winning_bid'].mean()
            total_spent = group['winning_bid'].sum()
            avg_competition = group['bids_count'].mean()
            
            # –†–∞–∑–±—Ä–æ—Å —Ü–µ–Ω
            price_std = group['winning_bid'].std()
            price_variance = (price_std / avg_price * 100) if avg_price > 0 else 0
            
            # –ò–Ω–¥–µ–∫—Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            suspicion = calculate_suspicion(purchases, time_span_weeks, 
                                           avg_competition, price_variance)
            
            results.append({
                'winner_login': winner,
                'coin_description': coin[:80],
                'purchase_count': purchases,
                'weeks_span': round(time_span_weeks, 1),
                'avg_price': round(avg_price, 2),
                'total_spent': round(total_spent, 2),
                'avg_competition': round(avg_competition, 1),
                'price_variance_pct': round(price_variance, 1),
                'suspicion_score': round(suspicion, 1)
            })
    
    df_results = pd.DataFrame(results).sort_values('suspicion_score', ascending=False)
    
    print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {len(df_results)}")
    
    if len(df_results) > 0:
        print(f"\n‚ö†Ô∏è  –¢–û–ü-10 –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–•:")
        print(df_results[['winner_login', 'coin_description', 'purchase_count', 
                         'suspicion_score']].head(10).to_string(index=False))
    
    return df_results

def calculate_suspicion(count, weeks, competition, price_var):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –∏–Ω–¥–µ–∫—Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    score = 0
    
    # –ë–∞–∑–æ–≤—ã–π –±–∞–ª–ª –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    score += count * 15
    
    # –ë–æ–Ω—É—Å –∑–∞ —á–∞—Å—Ç–æ—Ç—É
    if weeks > 0:
        frequency = count / weeks
        score += frequency * 10
    
    # –ù–∏–∑–∫–∞—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞
    if competition < 5:
        score += (5 - competition) * 5
    
    # –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ü–µ–Ω –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞
    if price_var < 10:
        score += 20
    
    return score

def analyze_dominators(lots_df, min_wins=10):
    """
    –ê–Ω–∞–ª–∏–∑ –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
    """
    
    print("\n" + "="*60)
    print("üèÜ –ê–ù–ê–õ–ò–ó 2: –î–û–ú–ò–ù–ò–†–£–Æ–©–ò–ï –ü–û–ë–ï–î–ò–¢–ï–õ–ò")
    print("="*60)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º
    stats = lots_df.groupby('winner_login').agg({
        'lot_number': 'count',
        'auction_number': 'nunique',
        'winning_bid': ['mean', 'sum'],
        'bids_count': 'mean',
        'category': 'nunique'
    }).reset_index()
    
    stats.columns = ['winner_login', 'total_wins', 'auctions_participated',
                    'avg_winning_bid', 'total_spent', 'avg_competition',
                    'categories_won']
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö
    stats = stats[stats['total_wins'] >= min_wins]
    
    # –ü–æ–±–µ–¥ –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω
    stats['wins_per_auction'] = stats['total_wins'] / stats['auctions_participated']
    
    # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
    stats['level'] = stats['wins_per_auction'].apply(lambda x:
        'CRITICAL' if x >= 10 else
        'HIGH' if x >= 5 else
        'MEDIUM' if x >= 2 else 'NORMAL'
    )
    
    stats = stats.sort_values('total_wins', ascending=False)
    
    print(f"\n‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {len(stats)}")
    
    critical = stats[stats['level'] == 'CRITICAL']
    if len(critical) > 0:
        print(f"\n‚ö†Ô∏è  –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –î–û–ú–ò–ù–ê–¢–û–†–´ ({len(critical)}):")
        print(critical[['winner_login', 'total_wins', 'wins_per_auction']].head(10).to_string(index=False))
    
    return stats

def analyze_concentration(lots_df, min_lots=5):
    """
    –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ - –º–∞—Å—Å–æ–≤—ã–µ –ø–æ–∫—É–ø–∫–∏ –≤ –æ–¥–Ω–æ–º –∞—É–∫—Ü–∏–æ–Ω–µ
    """
    
    print("\n" + "="*60)
    print("üì¶ –ê–ù–ê–õ–ò–ó 3: –ö–û–ù–¶–ï–ù–¢–†–ê–¶–ò–Ø –ü–û–ë–ï–î")
    print("="*60)
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∞—É–∫—Ü–∏–æ–Ω—É –∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é
    conc = lots_df.groupby(['auction_number', 'winner_login']).agg({
        'lot_number': 'count',
        'winning_bid': ['sum', 'mean'],
        'category': 'nunique'
    }).reset_index()
    
    conc.columns = ['auction_number', 'winner_login', 'lots_won',
                    'total_spent', 'avg_price', 'unique_categories']
    
    conc = conc[conc['lots_won'] >= min_lots].sort_values('lots_won', ascending=False)
    
    print(f"\n‚úÖ –°–ª—É—á–∞–µ–≤ –º–∞—Å—Å–æ–≤—ã—Ö –ø–æ–∫—É–ø–æ–∫: {len(conc)}")
    
    if len(conc) > 0:
        print(f"\n‚ö†Ô∏è  –¢–û–ü-10:")
        print(conc[['auction_number', 'winner_login', 'lots_won', 'total_spent']].head(10).to_string(index=False))
    
    return conc

def create_report(circular_df, dominators_df, concentration_df, lots_df):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç"""
    
    with open('wolmar_report.txt', 'w', encoding='utf-8') as f:
        f.write("="*70 + "\n")
        f.write("–û–¢–ß–ï–¢ –ü–û –ê–ù–ê–õ–ò–ó–£ –ú–ê–ù–ò–ü–£–õ–Ø–¶–ò–ô –ù–ê –ê–£–ö–¶–ò–û–ù–ï WOLMAR\n")
        f.write("="*70 + "\n\n")
        
        f.write(f"–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {pd.Timestamp.now()}\n")
        f.write(f"–ü–µ—Ä–∏–æ–¥: {lots_df['auction_end_date'].min()} - {lots_df['auction_end_date'].max()}\n")
        f.write(f"–í—Å–µ–≥–æ –ª–æ—Ç–æ–≤: {len(lots_df)}\n")
        f.write(f"–í—Å–µ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–æ–≤: {lots_df['auction_number'].nunique()}\n")
        f.write(f"–í—Å–µ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {lots_df['winner_login'].nunique()}\n\n")
        
        # –ö—Ä—É–≥–æ–≤—ã–µ –ø–æ–∫—É–ø–∫–∏
        f.write("-"*70 + "\n")
        f.write("1. –ö–†–£–ì–û–í–´–ï –ü–û–ö–£–ü–ö–ò\n")
        f.write("-"*70 + "\n")
        if len(circular_df) > 0:
            f.write(f"\n–ù–∞–π–¥–µ–Ω–æ: {len(circular_df)} –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤\n\n")
            f.write("–¢–û–ü-20:\n")
            f.write(circular_df.head(20).to_string(index=False))
        else:
            f.write("\n–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.\n")
        
        # –î–æ–º–∏–Ω–∞—Ç–æ—Ä—ã
        f.write("\n\n" + "-"*70 + "\n")
        f.write("2. –î–û–ú–ò–ù–ò–†–£–Æ–©–ò–ï –ü–û–ë–ï–î–ò–¢–ï–õ–ò\n")
        f.write("-"*70 + "\n")
        critical = dominators_df[dominators_df['level'] == 'CRITICAL']
        if len(critical) > 0:
            f.write(f"\n–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ: {len(critical)}\n\n")
            f.write(critical.to_string(index=False))
        
        # –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è
        f.write("\n\n" + "-"*70 + "\n")
        f.write("3. –ö–û–ù–¶–ï–ù–¢–†–ê–¶–ò–Ø –í –ê–£–ö–¶–ò–û–ù–ê–•\n")
        f.write("-"*70 + "\n")
        if len(concentration_df) > 0:
            f.write(f"\n–ú–∞—Å—Å–æ–≤—ã—Ö –ø–æ–∫—É–ø–æ–∫: {len(concentration_df)}\n\n")
            f.write(concentration_df.head(20).to_string(index=False))
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        f.write("\n\n" + "="*70 + "\n")
        f.write("–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò\n")
        f.write("="*70 + "\n\n")
        
        f.write("–î–õ–Ø –ü–û–ö–£–ü–ê–¢–ï–õ–ï–ô:\n")
        f.write("1. –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –≤ –∞—Ä—Ö–∏–≤–µ\n")
        f.write("2. –ï—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–∫—É–ø–∞–µ—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –º–æ–Ω–µ—Ç—ã 3+ —Ä–∞–∑ - —ç—Ç–æ –ø—Ä–æ–¥–∞–≤–µ—Ü\n")
        f.write("3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–Ω–∞–π–ø–µ—Ä—Å–∫—É—é —Ç–∞–∫—Ç–∏–∫—É (—Å—Ç–∞–≤–∫–∞ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–µ–∫—É–Ω–¥—ã)\n")
        f.write("4. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∂–µ—Å—Ç–∫–∏–π –ª–∏–º–∏—Ç —Ü–µ–Ω—ã –î–û —Ç–æ—Ä–≥–æ–≤\n\n")
        
        f.write("–î–õ–Ø –ü–õ–ê–¢–§–û–†–ú–´:\n")
        f.write("1. –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ª–æ—Ç–∞\n")
        f.write("2. –§–ª–∞–≥–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å 5+ –ø–æ–∫—É–ø–∫–∞–º–∏ –æ–¥–Ω–æ–π –º–æ–Ω–µ—Ç—ã\n")
        f.write("3. –¢—Ä–µ–±–æ–≤–∞—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –ø—Ä–∏ 10+ –ø–æ–±–µ–¥–∞—Ö –≤ –º–µ—Å—è—Ü\n")
        f.write("4. –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥ –≤ –æ–¥–Ω–æ–º –∞—É–∫—Ü–∏–æ–Ω–µ\n")
    
    print("\n‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: wolmar_report.txt")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("="*70)
    print("üöÄ –ó–ê–ü–£–°–ö –ê–ù–ê–õ–ò–ó–ê –ú–ê–ù–ò–ü–£–õ–Ø–¶–ò–ô")
    print("="*70)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    print("\nüìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    try:
        lots_df = pd.read_csv('data/wolmar_lots.csv')
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(lots_df)} –ª–æ—Ç–æ–≤")
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª data/wolmar_lots.csv –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python wolmar_extractor.py")
        return
    
    # –í—Å–µ –∞–Ω–∞–ª–∏–∑—ã
    circular = analyze_circular_buyers(lots_df, min_purchases=3)
    dominators = analyze_dominators(lots_df, min_wins=10)
    concentration = analyze_concentration(lots_df, min_lots=5)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    print("\nüìù –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞...")
    create_report(circular, dominators, concentration, lots_df)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    import os
    os.makedirs('results', exist_ok=True)
    
    circular.to_csv('results/circular_buyers.csv', index=False)
    dominators.to_csv('results/dominators.csv', index=False)
    concentration.to_csv('results/concentration.csv', index=False)
    
    print("\n" + "="*70)
    print("‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù")
    print("="*70)
    print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print("   - wolmar_report.txt (—Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç)")
    print("   - results/circular_buyers.csv")
    print("   - results/dominators.csv")
    print("   - results/concentration.csv")

if __name__ == "__main__":
    main()
