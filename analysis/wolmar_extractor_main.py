"""
–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ PostgreSQL –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞—É–∫—Ü–∏–æ–Ω–∞ Wolmar
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python wolmar_extractor.py
"""

import pandas as pd
import psycopg2

# –ù–ê–°–¢–†–û–ô–ö–ò –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –ë–î
DB_CONFIG = {
    'host': 'localhost',
    'port': 5432,
    'database': 'your_database_name',  # <-- –ò–ó–ú–ï–ù–ò–¢–ï
    'user': 'your_username',            # <-- –ò–ó–ú–ï–ù–ò–¢–ï
    'password': 'your_password'         # <-- –ò–ó–ú–ï–ù–ò–¢–ï
}

def connect_db():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL"""
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ")
        return conn
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return None

def extract_lots(conn, months=6):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ª–æ—Ç–∞—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –º–µ—Å—è—Ü–µ–≤"""
    
    query = f"""
    SELECT 
        id,
        lot_number,
        auction_number,
        coin_description,
        winner_login,
        winning_bid,
        starting_bid,
        bids_count,
        auction_end_date,
        lot_status,
        year,
        metal,
        condition,
        category,
        lot_type,
        weight,
        currency
    FROM auction_lots
    WHERE auction_end_date >= NOW() - INTERVAL '{months} months'
        AND lot_status IS NOT NULL
        AND winner_login IS NOT NULL
    ORDER BY auction_end_date DESC;
    """
    
    print(f"\nüì• –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ª–æ—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {months} –º–µ—Å—è—Ü–µ–≤...")
    df = pd.read_sql_query(query, conn)
    
    print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ –ª–æ—Ç–æ–≤: {len(df)}")
    print(f"   –ê—É–∫—Ü–∏–æ–Ω–æ–≤: {df['auction_number'].nunique()}")
    print(f"   –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {df['winner_login'].nunique()}")
    
    return df

def find_repeat_buyers(conn, min_purchases=3):
    """–ù–∞—Ö–æ–¥–∏—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –º–æ–Ω–µ—Ç"""
    
    query = f"""
    SELECT 
        winner_login,
        coin_description,
        COUNT(*) as purchase_count,
        AVG(winning_bid) as avg_price,
        STRING_AGG(DISTINCT auction_number, ', ') as auctions,
        MIN(auction_end_date) as first_purchase,
        MAX(auction_end_date) as last_purchase
    FROM auction_lots
    WHERE winner_login IS NOT NULL
        AND auction_end_date >= NOW() - INTERVAL '6 months'
    GROUP BY winner_login, coin_description
    HAVING COUNT(*) >= {min_purchases}
    ORDER BY COUNT(*) DESC;
    """
    
    print(f"\nüîç –ü–æ–∏—Å–∫ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π...")
    df = pd.read_sql_query(query, conn)
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ: {len(df)} —Å–ª—É—á–∞–µ–≤")
    
    if len(df) > 0:
        print("\n‚ö†Ô∏è  –¢–û–ü-10 –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–•:")
        for idx, row in df.head(10).iterrows():
            print(f"\n   {row['winner_login']}:")
            print(f"      –ú–æ–Ω–µ—Ç–∞: {row['coin_description'][:60]}")
            print(f"      –ü–æ–∫—É–ø–æ–∫: {row['purchase_count']}")
            print(f"      –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {row['avg_price']:.2f} RUB")
    
    return df

def analyze_concentration(conn, min_lots=5):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—é –ø–æ–±–µ–¥ –≤ –æ–¥–Ω–æ–º –∞—É–∫—Ü–∏–æ–Ω–µ"""
    
    query = f"""
    SELECT 
        auction_number,
        winner_login,
        COUNT(*) as lots_won,
        SUM(winning_bid) as total_spent,
        COUNT(DISTINCT category) as categories
    FROM auction_lots
    WHERE winner_login IS NOT NULL
    GROUP BY auction_number, winner_login
    HAVING COUNT(*) >= {min_lots}
    ORDER BY COUNT(*) DESC;
    """
    
    print(f"\nüì¶ –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –ø–æ–±–µ–¥...")
    df = pd.read_sql_query(query, conn)
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ: {len(df)} —Å–ª—É—á–∞–µ–≤ –º–∞—Å—Å–æ–≤—ã—Ö –ø–æ–∫—É–ø–æ–∫")
    
    return df

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("="*60)
    print("üìä –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• –ò–ó WOLMAR –ë–î")
    print("="*60)
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    conn = connect_db()
    if not conn:
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
    import os
    os.makedirs('data', exist_ok=True)
    
    # 1. –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ª–æ—Ç–æ–≤
    lots_df = extract_lots(conn, months=6)
    lots_df.to_csv('data/wolmar_lots.csv', index=False, encoding='utf-8')
    print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: data/wolmar_lots.csv")
    
    # 2. –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏
    repeat_df = find_repeat_buyers(conn, min_purchases=3)
    repeat_df.to_csv('data/repeat_buyers.csv', index=False, encoding='utf-8')
    print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: data/repeat_buyers.csv")
    
    # 3. –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –ø–æ–±–µ–¥
    concentration_df = analyze_concentration(conn, min_lots=5)
    concentration_df.to_csv('data/concentration.csv', index=False, encoding='utf-8')
    print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: data/concentration.csv")
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    conn.close()
    
    print("\n" + "="*60)
    print("‚úÖ –î–ê–ù–ù–´–ï –ò–ó–í–õ–ï–ß–ï–ù–´ –£–°–ü–ï–®–ù–û!")
    print("="*60)
    print("\n–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∞–Ω–∞–ª–∏–∑")
    print("  python wolmar_analyzer.py")

if __name__ == "__main__":
    main()
