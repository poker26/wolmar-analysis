const { launchPuppeteer, createPage, cleanupChromeTempFiles } = require('./puppeteer-utils');
const fs = require('fs');

class WolmarBidPlacerCLI {
    constructor(options = {}) {
        this.browser = null;
        this.page = null;
        this.credentials = {
            username: options.username || 'hippo26',
            password: options.password || 'Gopapopa326'
        };
        this.lotUrl = options.lotUrl;
        this.bidAmount = options.bidAmount;
        this.useAutoBid = options.useAutoBid || false;
    }

    async init() {
        console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...');
        this.browser = await launchPuppeteer();
        this.page = await createPage(this.browser);
        
        await this.page.setViewport({ width: 1280, height: 720 });
        console.log('‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    async login() {
        try {
            console.log('üîç –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É Wolmar...');
            await this.page.goto('https://www.wolmar.ru/', {
                waitUntil: 'networkidle2',
                timeout: 30000
            });

            await new Promise(resolve => setTimeout(resolve, 3000));

            console.log('üîç –ò—â–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
            
            const usernameField = await this.page.$('input[name="login"]');
            const passwordField = await this.page.$('input[name="password"]');
            
            if (!usernameField || !passwordField) {
                console.log('‚ùå –ü–æ–ª—è —Ñ–æ—Ä–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                return false;
            }

            console.log('‚úÖ –ü–æ–ª—è —Ñ–æ—Ä–º—ã –Ω–∞–π–¥–µ–Ω—ã');
            console.log('üìù –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
            
            await usernameField.type(this.credentials.username);
            await passwordField.type(this.credentials.password);

            const submitButton = await this.page.$('input[type="image"]');
            
            if (!submitButton) {
                console.log('‚ùå –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                return false;
            }

            console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
            await submitButton.click();

            await new Promise(resolve => setTimeout(resolve, 5000));

            const pageContent = await this.page.content();
            const successIndicators = [
                '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç',
                '–õ–æ—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞',
                '–ò—Å—Ç–æ—Ä–∏—è –≤—ã–∏–≥—Ä—ã—à–µ–π',
                '–í—ã—Ö–æ–¥'
            ];

            const isLoggedIn = successIndicators.some(indicator => pageContent.includes(indicator));

            if (isLoggedIn) {
                console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!');
                return true;
            } else {
                console.log('‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å');
                return false;
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error.message);
            return false;
        }
    }

    async placeBid() {
        try {
            console.log(`üîç –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ—Ç–∞: ${this.lotUrl}`);
            await this.page.goto(this.lotUrl, {
                waitUntil: 'networkidle2',
                timeout: 30000
            });

            await new Promise(resolve => setTimeout(resolve, 3000));

            console.log('üîç –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞–≤–∫–∞—Ö...');
            
            const currentBid = await this.page.evaluate(() => {
                const sumElement = document.getElementById('sum');
                return sumElement ? sumElement.textContent.trim() : null;
            });

            const minBid = await this.page.evaluate(() => {
                const minBidElement = document.getElementById('min_bid');
                return minBidElement ? minBidElement.textContent.trim() : null;
            });

            console.log(`üìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: ${currentBid} —Ä—É–±.`);
            console.log(`üìä –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: ${minBid} —Ä—É–±.`);

            // üö® –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¢–û–õ–¨–ö–û –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É!
            const safeBidAmount = parseInt(minBid) || 2;
            if (this.bidAmount !== safeBidAmount) {
                console.log(`‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ó–∞–ø—Ä–æ—à–µ–Ω–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ${this.bidAmount} —Ä—É–±. –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω—É—é –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É ${safeBidAmount} —Ä—É–±.`);
            }
            const finalBidAmount = safeBidAmount;

            const bidForm = await this.page.$('form#bid');
            
            if (!bidForm) {
                console.log('‚ùå –§–æ—Ä–º–∞ —Å—Ç–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                return false;
            }

            console.log('‚úÖ –§–æ—Ä–º–∞ —Å—Ç–∞–≤–∫–∏ –Ω–∞–π–¥–µ–Ω–∞');

            const bidInput = await this.page.$('input[name="value"]');
            
            if (!bidInput) {
                console.log('‚ùå –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —Å—Ç–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
                return false;
            }

            console.log(`üí∞ –†–∞–∑–º–µ—â–∞–µ–º –ë–ï–ó–û–ü–ê–°–ù–£–Æ —Å—Ç–∞–≤–∫—É: ${finalBidAmount} —Ä—É–±.`);

            await bidInput.click();
            await bidInput.evaluate(input => input.select());
            await bidInput.type(finalBidAmount.toString());

            if (this.useAutoBid) {
                console.log('ü§ñ –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–±–∏–¥...');
                const autoBidCheckbox = await this.page.$('input[name="auto"]');
                if (autoBidCheckbox) {
                    const isChecked = await autoBidCheckbox.evaluate(cb => cb.checked);
                    if (!isChecked) {
                        await autoBidCheckbox.click();
                        console.log('‚úÖ –ê–≤—Ç–æ–±–∏–¥ –≤–∫–ª—é—á–µ–Ω');
                    }
                }
            }

            const submitButton = await this.page.$('input[type="submit"][value="—Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É"]');
            
            if (!submitButton) {
                console.log('‚ùå –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                return false;
            }

            console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞–≤–∫—É...');
            await submitButton.click();

            await new Promise(resolve => setTimeout(resolve, 5000));

            const pageContent = await this.page.content();
            
            if (pageContent.includes('–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞') || pageContent.includes('—Å—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞')) {
                console.log('‚úÖ –°—Ç–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–∞!');
                return true;
            } else {
                console.log('‚ùå –°—Ç–∞–≤–∫–∞ –Ω–µ –±—ã–ª–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∞');
                return false;
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ —Å—Ç–∞–≤–∫–∏:', error.message);
            return false;
        }
    }

    async close() {
        if (this.browser) {
            await this.browser.close();
            console.log('üîí –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç');
        }
        cleanupChromeTempFiles();
    }
}

// –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
function parseArgs() {
    const args = process.argv.slice(2);
    const options = {};

    for (let i = 0; i < args.length; i++) {
        switch (args[i]) {
            case '--url':
                options.lotUrl = args[++i];
                break;
            case '--amount':
                options.bidAmount = parseInt(args[++i]);
                break;
            case '--auto-bid':
                options.useAutoBid = true;
                break;
            case '--username':
                options.username = args[++i];
                break;
            case '--password':
                options.password = args[++i];
                break;
            case '--help':
                console.log(`
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node wolmar-bid-placer-cli.js [–æ–ø—Ü–∏–∏]

–û–ø—Ü–∏–∏:
  --url <URL>        URL –ª–æ—Ç–∞ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏
  --amount <—Å—É–º–º–∞>   –°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ –≤ —Ä—É–±–ª—è—Ö
  --auto-bid         –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–±–∏–¥
  --username <–ª–æ–≥–∏–Ω> –õ–æ–≥–∏–Ω –¥–ª—è –≤—Ö–æ–¥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: hippo26)
  --password <–ø–∞—Ä–æ–ª—å> –ü–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞
  --help             –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
  node wolmar-bid-placer-cli.js --url "https://www.wolmar.ru/auction/2140/7609081" --amount 5
  node wolmar-bid-placer-cli.js --url "https://www.wolmar.ru/auction/2140/7609081" --amount 10 --auto-bid
                `);
                process.exit(0);
                break;
        }
    }

    return options;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    console.log('üö® –í–ù–ò–ú–ê–ù–ò–ï: –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú - –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨ –ü–†–ï–í–´–®–ï –í–°–ï–ì–û!');
    console.log('üö® –°–∫—Ä–∏–ø—Ç –±—É–¥–µ—Ç —Å—Ç–∞–≤–∏—Ç—å –¢–û–õ–¨–ö–û –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—É–º–º—ã!');
    console.log('');

    const options = parseArgs();

    if (!options.lotUrl || !options.bidAmount) {
        console.log('‚ùå –û—à–∏–±–∫–∞: –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å --url –∏ --amount');
        console.log('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏');
        process.exit(1);
    }

    const bidPlacer = new WolmarBidPlacerCLI(options);
    
    try {
        await bidPlacer.init();
        
        const loginSuccess = await bidPlacer.login();
        if (!loginSuccess) {
            console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è');
            return;
        }

        const bidSuccess = await bidPlacer.placeBid();
        
        if (bidSuccess) {
            console.log('üéâ –°—Ç–∞–≤–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
        } else {
            console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Å—Ç–∞–≤–∫—É');
        }
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    } finally {
        await bidPlacer.close();
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
if (require.main === module) {
    main().catch(console.error);
}

module.exports = WolmarBidPlacerCLI;
