const WolmarCategoryParser = require('./wolmar-category-parser');
const config = require('./config');
const fs = require('fs');
const path = require('path');

async function testResumeFunctionality() {
    console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–£–ù–ö–¶–ò–ò –í–û–ó–û–ë–ù–û–í–õ–ï–ù–ò–Ø');
    console.log('=====================================');
    
    const auctionNumber = 2012; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π –∞—É–∫—Ü–∏–æ–Ω
    const parser = new WolmarCategoryParser(config.dbConfig, 'resume', auctionNumber);
    
    try {
        console.log('\n1Ô∏è‚É£ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä...');
        await parser.init();
        
        console.log('\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞...');
        const progressFile = path.join(__dirname, 'logs', 'category-parser-progress.json');
        console.log(`üìÅ –§–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: ${progressFile}`);
        
        if (fs.existsSync(progressFile)) {
            const progressContent = fs.readFileSync(progressFile, 'utf8');
            const progress = JSON.parse(progressContent);
            console.log('üìä –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å:');
            console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${progress.processed || 0}`);
            console.log(`   –û—à–∏–±–æ–∫: ${progress.errors || 0}`);
            console.log(`   –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${progress.skipped || 0}`);
            console.log(`   –ü–æ—Å–ª–µ–¥–Ω–∏–π –ª–æ—Ç: ${progress.lastProcessedLot || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
            console.log(`   –ü–æ—Å–ª–µ–¥–Ω—è—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${progress.lastProcessedCategory || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`);
            console.log(`   –ò–Ω–¥–µ–∫—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${progress.lastProcessedCategoryIndex || 0}`);
            
            if (progress.categoryProgress) {
                console.log('üìã –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:');
                Object.entries(progress.categoryProgress).forEach(([category, data]) => {
                    console.log(`   ${category}: ${data.processed || 0}/${data.total || 0} –ª–æ—Ç–æ–≤`);
                });
            }
        } else {
            console.log('‚ùå –§–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞...');
        const loadedProgress = parser.loadProgress();
        if (loadedProgress) {
            console.log('‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ');
            console.log(`   lastProcessedLot: ${parser.lastProcessedLot}`);
            console.log(`   lastProcessedCategory: ${parser.lastProcessedCategory}`);
            console.log(`   lastProcessedCategoryIndex: ${parser.lastProcessedCategoryIndex}`);
        } else {
            console.log('‚ö†Ô∏è –ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
        }
        
        console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞...');
        console.log('üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º resume —Å resumeFromLastLot: true');
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ª–æ—Ç–∞
        await parser.parseSpecificAuction(auctionNumber, 1, {
            skipExisting: true,
            delayBetweenLots: 1000,
            includeBids: false,
            resumeFromLastLot: true,
            maxLots: 5 // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–∞
        });
        
        console.log('\n‚úÖ –¢–µ—Å—Ç –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
        console.error('‚ùå –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
    } finally {
        if (parser.browser) {
            await parser.browser.close();
        }
        if (parser.dbClient) {
            await parser.dbClient.end();
        }
    }
}

if (require.main === module) {
    testResumeFunctionality();
}
