const WolmarCategoryParser = require('./wolmar-category-parser');
const config = require('./config');

async function restartCategoryParser() {
    console.log('üöÄ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...');
    
    try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä
        const parser = new WolmarCategoryParser(config.dbConfig);
        await parser.init();
        
        console.log('‚úÖ –ü–∞—Ä—Å–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        
        // –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const categories = await parser.discoverCategories();
        console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
        
        if (categories.length === 0) {
            console.log('‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            return;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        console.log('üéØ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:');
        categories.forEach((cat, index) => {
            console.log(`   ${index + 1}. ${cat.name}`);
        });
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        const options = {
            maxCategories: null, // –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            maxLotsPerCategory: 50, // –ü–æ 50 –ª–æ—Ç–æ–≤ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            skipExisting: true, // –ü—Ä–æ–ø—É—Å–∫–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ
            delayBetweenLots: 1000, // 1 —Å–µ–∫—É–Ω–¥–∞ –º–µ–∂–¥—É –ª–æ—Ç–∞–º–∏
            testMode: false // –ü—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º
        };
        
        console.log('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞:');
        console.log(`   - –ú–∞–∫—Å–∏–º—É–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${options.maxCategories || '–≤—Å–µ'}`);
        console.log(`   - –ú–∞–∫—Å–∏–º—É–º –ª–æ—Ç–æ–≤ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ${options.maxLotsPerCategory}`);
        console.log(`   - –ü—Ä–æ–ø—É—Å–∫–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ: ${options.skipExisting}`);
        console.log(`   - –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ª–æ—Ç–∞–º–∏: ${options.delayBetweenLots}ms`);
        console.log(`   - –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: ${options.testMode}`);
        
        console.log('\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π...');
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        const result = await parser.parseAllCategories(options);
        
        console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞:');
        console.log(`   - –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ª–æ—Ç–æ–≤: ${result.processed}`);
        console.log(`   - –û—à–∏–±–æ–∫: ${result.errors}`);
        console.log(`   - –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${result.skipped}`);
        console.log(`   - –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${result.categoriesProcessed}`);
        
        console.log('‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error.message);
        console.error(error.stack);
    } finally {
        process.exit(0);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä
restartCategoryParser();
