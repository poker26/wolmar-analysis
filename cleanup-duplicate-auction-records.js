const { Pool } = require('pg');
const config = require('./config');

const pool = new Pool(config.dbConfig);

async function cleanupDuplicateAuctionRecords() {
    try {
        console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –∞—É–∫—Ü–∏–æ–Ω–æ–≤...');
        
        // –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±—É–¥–µ–º —É–¥–∞–ª—è—Ç—å
        const checkQuery = `
            SELECT 
                auction_number,
                parsing_number,
                COUNT(*) as records_count,
                MIN(auction_end_date) as earliest_date,
                MAX(auction_end_date) as latest_date
            FROM auction_lots 
            WHERE auction_number IS NOT NULL
            GROUP BY auction_number, parsing_number
            HAVING COUNT(*) > 0
            ORDER BY auction_number, parsing_number;
        `;
        
        const checkResult = await pool.query(checkQuery);
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ auction_number
        const auctionGroups = {};
        checkResult.rows.forEach(row => {
            if (!auctionGroups[row.auction_number]) {
                auctionGroups[row.auction_number] = [];
            }
            auctionGroups[row.auction_number].push({
                parsing_number: row.parsing_number,
                records_count: row.records_count,
                earliest_date: row.earliest_date,
                latest_date: row.latest_date
            });
        });
        
        // –ù–∞—Ö–æ–¥–∏–º –∞—É–∫—Ü–∏–æ–Ω—ã —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏
        const duplicatesToClean = [];
        Object.keys(auctionGroups).forEach(auctionNumber => {
            const groups = auctionGroups[auctionNumber];
            if (groups.length > 1) {
                console.log(`\nüîÑ –ê—É–∫—Ü–∏–æ–Ω ${auctionNumber} –∏–º–µ–µ—Ç ${groups.length} —Ä–∞–∑–Ω—ã—Ö parsing_number:`);
                
                // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–ø–∏—Å–µ–π (–±–æ–ª—å—à–µ –∑–∞–ø–∏—Å–µ–π = –±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π)
                groups.sort((a, b) => b.records_count - a.records_count);
                
                groups.forEach((group, index) => {
                    const status = index === 0 ? '‚úÖ –û–°–¢–ê–í–ò–¢–¨' : '‚ùå –£–î–ê–õ–ò–¢–¨';
                    console.log(`  ${status} parsing_number: ${group.parsing_number} (${group.records_count} –∑–∞–ø–∏—Å–µ–π, ${group.earliest_date} - ${group.latest_date})`);
                    
                    if (index > 0) {
                        duplicatesToClean.push({
                            auction_number: auctionNumber,
                            parsing_number: group.parsing_number,
                            records_count: group.records_count
                        });
                    }
                });
            }
        });
        
        if (duplicatesToClean.length === 0) {
            console.log('\n‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
            return;
        }
        
        console.log(`\nüóëÔ∏è –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ ${duplicatesToClean.length} –≥—Ä—É–ø–ø –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π:`);
        duplicatesToClean.forEach(dup => {
            console.log(`  - –ê—É–∫—Ü–∏–æ–Ω ${dup.auction_number}, parsing_number: ${dup.parsing_number} (${dup.records_count} –∑–∞–ø–∏—Å–µ–π)`);
        });
        
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        console.log('\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!');
        console.log('–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –∫–æ–¥ —É–¥–∞–ª–µ–Ω–∏—è –≤ —Å–∫—Ä–∏–ø—Ç–µ.');
        
        // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è:
        /*
        for (const dup of duplicatesToClean) {
            const deleteQuery = `
                DELETE FROM auction_lots 
                WHERE auction_number = $1 AND parsing_number = $2;
            `;
            
            const deleteResult = await pool.query(deleteQuery, [dup.auction_number, dup.parsing_number]);
            console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${deleteResult.rowCount} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞ ${dup.auction_number}, parsing_number: ${dup.parsing_number}`);
        }
        
        console.log('\nüéâ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
        */
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:', error);
    } finally {
        await pool.end();
    }
}

cleanupDuplicateAuctionRecords();
