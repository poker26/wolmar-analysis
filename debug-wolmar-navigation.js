/**
 * –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ Wolmar
 * 
 * –ü–æ–º–æ–≥–∞–µ—Ç –ø–æ–Ω—è—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–∞–π—Ç–∞ –∏ –Ω–∞–π—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
 */

const puppeteer = require('puppeteer-core');
const { launchPuppeteer, createPage } = require('./puppeteer-utils');

async function debugWolmarNavigation() {
    console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ Wolmar...\n');
    
    let browser = null;
    let page = null;
    
    try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
        browser = await launchPuppeteer();
        page = await createPage(browser);
        
        console.log('‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        await page.goto('https://wolmar.ru', { waitUntil: 'domcontentloaded', timeout: 30000 });
        await new Promise(resolve => setTimeout(resolve, 3000));
        
        console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ Wolmar\n');
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const pageAnalysis = await page.evaluate(() => {
            const analysis = {
                allLinks: [],
                categoryLinks: [],
                navBlocks: [],
                menuItems: [],
                potentialCategories: []
            };
            
            // 1. –í—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            const allLinks = document.querySelectorAll('a[href]');
            allLinks.forEach(link => {
                const href = link.href;
                const text = link.textContent.trim();
                if (text && href) {
                    analysis.allLinks.push({
                        text: text,
                        href: href,
                        hasCategory: href.includes('category'),
                        hasAuction: href.includes('auction'),
                        hasMonety: href.includes('monety'),
                        hasBanknoty: href.includes('banknoty')
                    });
                }
            });
            
            // 2. –°—Å—ã–ª–∫–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º category
            const categoryLinks = document.querySelectorAll('a[href*="category"]');
            categoryLinks.forEach(link => {
                const href = link.href;
                const text = link.textContent.trim();
                if (text && href) {
                    analysis.categoryLinks.push({
                        text: text,
                        href: href
                    });
                }
            });
            
            // 3. –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –±–ª–æ–∫–∏
            const navSelectors = [
                '.nav', '.menu', '.categories', '.sidebar', 
                '.left-menu', '.right-menu', '.navigation',
                'nav', 'ul', '.list', '.links'
            ];
            
            navSelectors.forEach(selector => {
                const elements = document.querySelectorAll(selector);
                elements.forEach(element => {
                    const links = element.querySelectorAll('a');
                    if (links.length > 0) {
                        analysis.navBlocks.push({
                            selector: selector,
                            linksCount: links.length,
                            links: Array.from(links).map(link => ({
                                text: link.textContent.trim(),
                                href: link.href
                            }))
                        });
                    }
                });
            });
            
            // 4. –ü–æ–∏—Å–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            const potentialSelectors = [
                'a[href*="monety"]',
                'a[href*="banknoty"]', 
                'a[href*="medali"]',
                'a[href*="znachki"]',
                'a[href*="jetony"]',
                'a[href*="ukrasheniya"]',
                'a[href*="category"]'
            ];
            
            potentialSelectors.forEach(selector => {
                const elements = document.querySelectorAll(selector);
                elements.forEach(element => {
                    const text = element.textContent.trim();
                    const href = element.href;
                    if (text && href) {
                        analysis.potentialCategories.push({
                            text: text,
                            href: href,
                            selector: selector
                        });
                    }
                });
            });
            
            return analysis;
        });
        
        // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        console.log('üìä –ê–ù–ê–õ–ò–ó –°–¢–†–ê–ù–ò–¶–´:');
        console.log(`–í—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫: ${pageAnalysis.allLinks.length}`);
        console.log(`–°—Å—ã–ª–æ–∫ —Å "category": ${pageAnalysis.categoryLinks.length}`);
        console.log(`–ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤: ${pageAnalysis.navBlocks.length}`);
        console.log(`–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${pageAnalysis.potentialCategories.length}\n`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Å—ã–ª–∫–∏ —Å category
        if (pageAnalysis.categoryLinks.length > 0) {
            console.log('üîó –°–°–´–õ–ö–ò –° "CATEGORY":');
            pageAnalysis.categoryLinks.forEach((link, index) => {
                console.log(`   ${index + 1}. "${link.text}" ‚Üí ${link.href}`);
            });
            console.log('');
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if (pageAnalysis.potentialCategories.length > 0) {
            console.log('üéØ –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–´–ï –ö–ê–¢–ï–ì–û–†–ò–ò:');
            pageAnalysis.potentialCategories.forEach((item, index) => {
                console.log(`   ${index + 1}. "${item.text}" ‚Üí ${item.href} (${item.selector})`);
            });
            console.log('');
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –±–ª–æ–∫–∏
        if (pageAnalysis.navBlocks.length > 0) {
            console.log('üß≠ –ù–ê–í–ò–ì–ê–¶–ò–û–ù–ù–´–ï –ë–õ–û–ö–ò:');
            pageAnalysis.navBlocks.forEach((block, index) => {
                console.log(`   ${index + 1}. ${block.selector} (${block.linksCount} —Å—Å—ã–ª–æ–∫):`);
                block.links.slice(0, 5).forEach(link => {
                    console.log(`      - "${link.text}" ‚Üí ${link.href}`);
                });
                if (block.links.length > 5) {
                    console.log(`      ... –∏ –µ—â–µ ${block.links.length - 5} —Å—Å—ã–ª–æ–∫`);
                }
            });
            console.log('');
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫
        console.log('üîç –ü–†–ò–ú–ï–†–´ –í–°–ï–• –°–°–´–õ–û–ö (–ø–µ—Ä–≤—ã–µ 20):');
        pageAnalysis.allLinks.slice(0, 20).forEach((link, index) => {
            const flags = [];
            if (link.hasCategory) flags.push('CATEGORY');
            if (link.hasAuction) flags.push('AUCTION');
            if (link.hasMonety) flags.push('MONETY');
            if (link.hasBanknoty) flags.push('BANKNOTY');
            
            console.log(`   ${index + 1}. "${link.text}" ‚Üí ${link.href} [${flags.join(', ')}]`);
        });
        
        if (pageAnalysis.allLinks.length > 20) {
            console.log(`   ... –∏ –µ—â–µ ${pageAnalysis.allLinks.length - 20} —Å—Å—ã–ª–æ–∫`);
        }
        
        console.log('\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error.message);
        throw error;
    } finally {
        if (browser) {
            await browser.close();
        }
    }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    debugWolmarNavigation()
        .then(() => {
            console.log('‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
            process.exit(0);
        })
        .catch((error) => {
            console.error('‚ùå –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π:', error.message);
            process.exit(1);
        });
}

module.exports = { debugWolmarNavigation };
