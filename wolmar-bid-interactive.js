const { launchPuppeteer, createPage, cleanupChromeTempFiles } = require('./puppeteer-utils');
const readline = require('readline');

class WolmarBidInteractive {
    constructor() {
        this.browser = null;
        this.page = null;
        this.credentials = {
            username: 'hippo26',
            password: 'Gopapopa326'
        };
        this.rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout
        });
    }

    async init() {
        console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...');
        this.browser = await launchPuppeteer();
        this.page = await createPage(this.browser);
        
        await this.page.setViewport({ width: 1280, height: 720 });
        console.log('‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    async askQuestion(question) {
        return new Promise((resolve) => {
            this.rl.question(question, (answer) => {
                resolve(answer.trim());
            });
        });
    }

    async login() {
        try {
            console.log('üîç –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É Wolmar...');
            await this.page.goto('https://www.wolmar.ru/', {
                waitUntil: 'networkidle2',
                timeout: 30000
            });

            await new Promise(resolve => setTimeout(resolve, 3000));

            console.log('üîç –ò—â–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
            
            const usernameField = await this.page.$('input[name="login"]');
            const passwordField = await this.page.$('input[name="password"]');
            
            if (!usernameField || !passwordField) {
                console.log('‚ùå –ü–æ–ª—è —Ñ–æ—Ä–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                return false;
            }

            console.log('‚úÖ –ü–æ–ª—è —Ñ–æ—Ä–º—ã –Ω–∞–π–¥–µ–Ω—ã');
            console.log('üìù –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
            
            await usernameField.type(this.credentials.username);
            await passwordField.type(this.credentials.password);

            const submitButton = await this.page.$('input[type="image"]');
            
            if (!submitButton) {
                console.log('‚ùå –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                return false;
            }

            console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
            await submitButton.click();

            await new Promise(resolve => setTimeout(resolve, 5000));

            const pageContent = await this.page.content();
            const successIndicators = [
                '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç',
                '–õ–æ—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞',
                '–ò—Å—Ç–æ—Ä–∏—è –≤—ã–∏–≥—Ä—ã—à–µ–π',
                '–í—ã—Ö–æ–¥'
            ];

            const isLoggedIn = successIndicators.some(indicator => pageContent.includes(indicator));

            if (isLoggedIn) {
                console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!');
                return true;
            } else {
                console.log('‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å');
                return false;
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error.message);
            return false;
        }
    }

    async analyzeLot(lotUrl) {
        try {
            console.log(`üîç –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ—Ç–∞: ${lotUrl}`);
            await this.page.goto(lotUrl, {
                waitUntil: 'networkidle2',
                timeout: 30000
            });

            await new Promise(resolve => setTimeout(resolve, 3000));

            console.log('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ—Ç–µ...');
            
            const lotInfo = await this.page.evaluate(() => {
                const currentBid = document.getElementById('sum')?.textContent?.trim();
                const minBid = document.getElementById('min_bid')?.textContent?.trim();
                const lotTitle = document.querySelector('h1, h2, .lot-title')?.textContent?.trim();
                const auctionInfo = document.querySelector('.auction-info, .breadcrumb')?.textContent?.trim();
                
                return {
                    currentBid,
                    minBid,
                    lotTitle: lotTitle || '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
                    auctionInfo: auctionInfo || '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—É–∫—Ü–∏–æ–Ω–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
                };
            });

            console.log('üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ—Ç–µ:');
            console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${lotInfo.lotTitle}`);
            console.log(`   –ê—É–∫—Ü–∏–æ–Ω: ${lotInfo.auctionInfo}`);
            console.log(`   –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: ${lotInfo.currentBid} —Ä—É–±.`);
            console.log(`   –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: ${lotInfo.minBid} —Ä—É–±.`);

            return lotInfo;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ª–æ—Ç–∞:', error.message);
            return null;
        }
    }

    async placeBid(lotUrl, bidAmount, useAutoBid = false) {
        try {
            console.log(`üîç –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ—Ç–∞: ${lotUrl}`);
            await this.page.goto(lotUrl, {
                waitUntil: 'networkidle2',
                timeout: 30000
            });

            await new Promise(resolve => setTimeout(resolve, 3000));

            const currentBid = await this.page.evaluate(() => {
                const sumElement = document.getElementById('sum');
                return sumElement ? sumElement.textContent.trim() : null;
            });

            const minBid = await this.page.evaluate(() => {
                const minBidElement = document.getElementById('min_bid');
                return minBidElement ? minBidElement.textContent.trim() : null;
            });

            console.log(`üìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: ${currentBid} —Ä—É–±.`);
            console.log(`üìä –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: ${minBid} —Ä—É–±.`);

            // üö® –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¢–û–õ–¨–ö–û –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É!
            const safeBidAmount = parseInt(minBid) || 2;
            if (bidAmount !== safeBidAmount) {
                console.log(`‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ó–∞–ø—Ä–æ—à–µ–Ω–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ${bidAmount} —Ä—É–±. –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω—É—é –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É ${safeBidAmount} —Ä—É–±.`);
            }
            const finalBidAmount = safeBidAmount;

            const bidForm = await this.page.$('form#bid');
            
            if (!bidForm) {
                console.log('‚ùå –§–æ—Ä–º–∞ —Å—Ç–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                return false;
            }

            console.log('‚úÖ –§–æ—Ä–º–∞ —Å—Ç–∞–≤–∫–∏ –Ω–∞–π–¥–µ–Ω–∞');

            const bidInput = await this.page.$('input[name="value"]');
            
            if (!bidInput) {
                console.log('‚ùå –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —Å—Ç–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
                return false;
            }

            console.log(`üí∞ –†–∞–∑–º–µ—â–∞–µ–º –ë–ï–ó–û–ü–ê–°–ù–£–Æ —Å—Ç–∞–≤–∫—É: ${finalBidAmount} —Ä—É–±.`);

            await bidInput.click();
            await bidInput.evaluate(input => input.select());
            await bidInput.type(finalBidAmount.toString());

            if (useAutoBid) {
                console.log('ü§ñ –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–±–∏–¥...');
                const autoBidCheckbox = await this.page.$('input[name="auto"]');
                if (autoBidCheckbox) {
                    const isChecked = await autoBidCheckbox.evaluate(cb => cb.checked);
                    if (!isChecked) {
                        await autoBidCheckbox.click();
                        console.log('‚úÖ –ê–≤—Ç–æ–±–∏–¥ –≤–∫–ª—é—á–µ–Ω');
                    }
                }
            }

            const submitButton = await this.page.$('input[type="submit"][value="—Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É"]');
            
            if (!submitButton) {
                console.log('‚ùå –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                return false;
            }

            console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞–≤–∫—É...');
            await submitButton.click();

            await new Promise(resolve => setTimeout(resolve, 5000));

            const pageContent = await this.page.content();
            
            if (pageContent.includes('–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞') || pageContent.includes('—Å—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞')) {
                console.log('‚úÖ –°—Ç–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–∞!');
                return true;
            } else {
                console.log('‚ùå –°—Ç–∞–≤–∫–∞ –Ω–µ –±—ã–ª–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∞');
                return false;
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ —Å—Ç–∞–≤–∫–∏:', error.message);
            return false;
        }
    }

    async close() {
        if (this.browser) {
            await this.browser.close();
            console.log('üîí –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç');
        }
        this.rl.close();
        cleanupChromeTempFiles();
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    console.log('üö® –í–ù–ò–ú–ê–ù–ò–ï: –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô –†–ï–ñ–ò–ú –†–ê–ó–ú–ï–©–ï–ù–ò–Ø –°–¢–ê–í–û–ö');
    console.log('üö® –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨ –ü–†–ï–í–´–®–ï –í–°–ï–ì–û - –¢–û–õ–¨–ö–û –ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ï –°–¢–ê–í–ö–ò!');
    console.log('');

    const bidPlacer = new WolmarBidInteractive();
    
    try {
        await bidPlacer.init();
        
        // –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è
        const loginSuccess = await bidPlacer.login();
        if (!loginSuccess) {
            console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è');
            return;
        }

        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º URL –ª–æ—Ç–∞
        const lotUrl = await bidPlacer.askQuestion('üîó –í–≤–µ–¥–∏—Ç–µ URL –ª–æ—Ç–∞: ');
        
        if (!lotUrl || !lotUrl.includes('wolmar.ru')) {
            console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π URL –ª–æ—Ç–∞');
            return;
        }

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ—Ç
        const lotInfo = await bidPlacer.analyzeLot(lotUrl);
        if (!lotInfo) {
            console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª–æ—Ç');
            return;
        }

        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏
        const bidAmountStr = await bidPlacer.askQuestion('üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (—Ä—É–±.): ');
        const bidAmount = parseInt(bidAmountStr);

        if (isNaN(bidAmount) || bidAmount < 1) {
            console.log('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏');
            return;
        }

        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–≤—Ç–æ–±–∏–¥
        const autoBidAnswer = await bidPlacer.askQuestion('ü§ñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–≤—Ç–æ–±–∏–¥? (yes/no): ');
        const useAutoBid = autoBidAnswer.toLowerCase() === 'yes';

        // üö® –§–ò–ù–ê–õ–¨–ù–û–ï –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï
        console.log('');
        console.log('üö® –§–ò–ù–ê–õ–¨–ù–û–ï –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –°–¢–ê–í–ö–ò');
        console.log(`üö® –õ–æ—Ç: ${lotInfo.lotTitle}`);
        console.log(`üö® –ê—É–∫—Ü–∏–æ–Ω: ${lotInfo.auctionInfo}`);
        console.log(`üö® –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: ${lotInfo.currentBid} —Ä—É–±.`);
        console.log(`üö® –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: ${lotInfo.minBid} —Ä—É–±.`);
        console.log(`üö® –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: ${bidAmount} —Ä—É–±.`);
        console.log(`üö® –ê–≤—Ç–æ–±–∏–¥: ${useAutoBid ? '–î–ê' : '–ù–ï–¢'}`);
        console.log('');

        const finalConfirmation = await bidPlacer.askQuestion('üö® –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —ç—Ç—É —Å—Ç–∞–≤–∫—É? (yes/no): ');
        
        if (finalConfirmation.toLowerCase() !== 'yes') {
            console.log('‚ùå –°—Ç–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
            return;
        }

        console.log('‚úÖ –°—Ç–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, —Ä–∞–∑–º–µ—â–∞–µ–º...');
        console.log('');

        const bidSuccess = await bidPlacer.placeBid(lotUrl, bidAmount, useAutoBid);
        
        if (bidSuccess) {
            console.log('üéâ –°—Ç–∞–≤–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
        } else {
            console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Å—Ç–∞–≤–∫—É');
        }
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    } finally {
        await bidPlacer.close();
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
if (require.main === module) {
    main().catch(console.error);
}

module.exports = WolmarBidInteractive;
