/**
 * –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø–æ–≤–µ–¥–µ–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –í–°–ï –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã
 */

const { Pool } = require('pg');

class CompleteAuctionBehaviorAnalyzer {
    constructor(dbConfig) {
        this.db = new Pool(dbConfig);
    }

    async init() {
        console.log('üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞...');
        await this.checkDatabaseConnection();
    }

    async checkDatabaseConnection() {
        try {
            const result = await this.db.query('SELECT NOW()');
            console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:', result.rows[0].now);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', error.message);
            throw error;
        }
    }

    /**
     * 1. –ê–Ω–∞–ª–∏–∑ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π (–¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–∏)
     */
    async analyzeSuspiciousBuyers() {
        console.log('\nüìä –ê–Ω–∞–ª–∏–∑ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π...');
        
        const query = `
            WITH buyer_stats AS (
                SELECT 
                    winner_login,
                    COUNT(*) as total_wins,
                    AVG(winning_bid) as avg_price,
                    COUNT(DISTINCT auction_number) as auctions_participated,
                    COUNT(DISTINCT category) as categories_bought,
                    COUNT(DISTINCT metal) as metals_bought,
                    -- –ü—Ä–æ—Ü–µ–Ω—Ç –ª–æ—Ç–æ–≤ —Å –≤—ã—Å–æ–∫–æ–π —Ü–µ–Ω–æ–π
                    ROUND(
                        COUNT(CASE WHEN winning_bid >= 5000 THEN 1 END) * 100.0 / COUNT(*), 2
                    ) as high_price_percentage,
                    -- –ü—Ä–æ—Ü–µ–Ω—Ç –ª–æ—Ç–æ–≤ —Å –≤—ã—Å–æ–∫–æ–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–µ–π
                    ROUND(
                        COUNT(CASE WHEN bids_count >= 10 THEN 1 END) * 100.0 / COUNT(*), 2
                    ) as high_competition_percentage
                FROM auction_lots 
                WHERE winner_login IS NOT NULL 
                AND winning_bid > 0
                AND bidding_history_collected = false  -- –¢–æ–ª—å–∫–æ –ª–æ—Ç—ã –±–µ–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞–≤–æ–∫
                GROUP BY winner_login
                HAVING COUNT(*) >= 10  -- –ú–∏–Ω–∏–º—É–º 10 –ø–æ–∫—É–ø–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            )
            SELECT 
                winner_login,
                total_wins,
                ROUND(avg_price::numeric, 2) as avg_price,
                auctions_participated,
                categories_bought,
                metals_bought,
                high_price_percentage,
                high_competition_percentage,
                CASE 
                    WHEN high_price_percentage > 70 AND categories_bought <= 3 THEN 'VERY_SUSPICIOUS'
                    WHEN high_price_percentage > 50 AND categories_bought <= 5 THEN 'SUSPICIOUS'
                    WHEN total_wins >= 50 AND high_competition_percentage < 30 THEN 'DOMINANT_BUYER'
                    ELSE 'NORMAL'
                END as suspicion_level
            FROM buyer_stats
            ORDER BY high_price_percentage DESC, total_wins DESC
            LIMIT 50;
        `;

        const result = await this.db.query(query);
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${result.rows.length} –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π`);
        return result.rows;
    }

    /**
     * 2. –ê–Ω–∞–ª–∏–∑ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π —Å —Ü–µ–Ω–∞–º–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å starting_bid)
     */
    async analyzePriceManipulation() {
        console.log('\nüí∞ –ê–Ω–∞–ª–∏–∑ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π —Å —Ü–µ–Ω–∞–º–∏...');
        
        const query = `
            WITH price_patterns AS (
                SELECT 
                    lot_number,
                    auction_number,
                    winner_login,
                    starting_bid,
                    winning_bid,
                    bids_count,
                    category,
                    metal,
                    -- –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –Ω–∞–∫—Ä—É—Ç–∫–∏
                    CASE 
                        WHEN starting_bid > 0 THEN ROUND((winning_bid / starting_bid)::numeric, 2)
                        ELSE NULL
                    END as price_multiplier
                FROM auction_lots
                WHERE winner_login IS NOT NULL
                AND winning_bid > 0
                AND starting_bid IS NOT NULL
                AND starting_bid > 0
                AND winning_bid > starting_bid * 3  -- –¶–µ–Ω–∞ –≤—ã—Ä–æ—Å–ª–∞ –≤ 3+ —Ä–∞–∑
            )
            SELECT 
                winner_login,
                COUNT(*) as manipulated_lots,
                ROUND(AVG(price_multiplier)::numeric, 2) as avg_multiplier,
                ROUND(MAX(price_multiplier)::numeric, 2) as max_multiplier,
                ROUND(AVG(winning_bid)::numeric, 2) as avg_final_price,
                ROUND(AVG(bids_count)::numeric, 1) as avg_competition,
                COUNT(DISTINCT category) as categories_manipulated,
                CASE 
                    WHEN AVG(price_multiplier) > 10 AND COUNT(DISTINCT category) <= 2 THEN 'VERY_SUSPICIOUS'
                    WHEN AVG(price_multiplier) > 5 AND COUNT(DISTINCT category) <= 3 THEN 'SUSPICIOUS'
                    ELSE 'NORMAL'
                END as manipulation_level
            FROM price_patterns
            GROUP BY winner_login
            HAVING COUNT(*) >= 3
            ORDER BY avg_multiplier DESC, manipulated_lots DESC
            LIMIT 30;
        `;

        const result = await this.db.query(query);
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${result.rows.length} —Å–ª—É—á–∞–µ–≤ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π —Å —Ü–µ–Ω–∞–º–∏`);
        return result.rows;
    }

    /**
     * 3. –ê–Ω–∞–ª–∏–∑ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –º–æ–Ω–µ—Ç
     */
    async analyzeRepeatedPurchases() {
        console.log('\nüîÑ –ê–Ω–∞–ª–∏–∑ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫...');
        
        const query = `
            WITH repeated_purchases AS (
                SELECT 
                    winner_login,
                    coin_description,
                    category,
                    metal,
                    year,
                    COUNT(*) as purchase_count,
                    COUNT(DISTINCT auction_number) as auctions_participated,
                    AVG(winning_bid) as avg_price,
                    MIN(winning_bid) as min_price,
                    MAX(winning_bid) as max_price,
                    AVG(bids_count) as avg_competition,
                    -- –í—Ä–µ–º–µ–Ω–Ω–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –º–µ–∂–¥—É –ø–æ–∫—É–ø–∫–∞–º–∏
                    MIN(auction_end_date) as first_purchase,
                    MAX(auction_end_date) as last_purchase
                FROM auction_lots
                WHERE winner_login IS NOT NULL
                AND coin_description IS NOT NULL
                AND winning_bid > 0
                GROUP BY winner_login, coin_description, category, metal, year
                HAVING COUNT(*) >= 3  -- –ú–∏–Ω–∏–º—É–º 3 –ø–æ–∫—É–ø–∫–∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–≥–æ –ª–æ—Ç–∞
            )
            SELECT 
                winner_login,
                coin_description,
                category,
                metal,
                year,
                purchase_count,
                auctions_participated,
                ROUND(avg_price::numeric, 2) as avg_price,
                ROUND(min_price::numeric, 2) as min_price,
                ROUND(max_price::numeric, 2) as max_price,
                ROUND(avg_competition::numeric, 1) as avg_competition,
                first_purchase,
                last_purchase,
                -- –†–∞–∑–±—Ä–æ—Å —Ü–µ–Ω
                ROUND(((max_price - min_price) / min_price * 100)::numeric, 1) as price_variation_pct,
                CASE 
                    WHEN purchase_count >= 5 AND avg_competition < 5 THEN 'VERY_SUSPICIOUS'
                    WHEN purchase_count >= 3 AND avg_competition < 8 THEN 'SUSPICIOUS'
                    ELSE 'NORMAL'
                END as repetition_level
            FROM repeated_purchases
            ORDER BY purchase_count DESC, avg_price DESC
            LIMIT 50;
        `;

        const result = await this.db.query(query);
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${result.rows.length} —Å–ª—É—á–∞–µ–≤ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫`);
        return result.rows;
    }

    /**
     * 4. –ê–Ω–∞–ª–∏–∑ –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
     */
    async analyzeCategoryDominance() {
        console.log('\nüèÜ –ê–Ω–∞–ª–∏–∑ –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º...');
        
        const query = `
            WITH category_dominance AS (
                SELECT 
                    winner_login,
                    category,
                    COUNT(*) as purchases_in_category,
                    AVG(winning_bid) as avg_price_in_category,
                    COUNT(DISTINCT auction_number) as auctions_in_category,
                    AVG(bids_count) as avg_competition,
                    -- –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
                    SUM(COUNT(*)) OVER (PARTITION BY winner_login) as total_purchases
                FROM auction_lots
                WHERE winner_login IS NOT NULL
                AND category IS NOT NULL
                AND winning_bid > 0
                GROUP BY winner_login, category
                HAVING COUNT(*) >= 5  -- –ú–∏–Ω–∏–º—É–º 5 –ø–æ–∫—É–ø–æ–∫ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            )
            SELECT 
                winner_login,
                category,
                purchases_in_category,
                ROUND(avg_price_in_category::numeric, 2) as avg_price_in_category,
                auctions_in_category,
                ROUND(avg_competition::numeric, 1) as avg_competition,
                total_purchases,
                -- –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∫—É–ø–æ–∫ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                ROUND((purchases_in_category::numeric / total_purchases * 100)::numeric, 1) as category_percentage,
                CASE 
                    WHEN (purchases_in_category::numeric / total_purchases * 100) > 80 AND avg_competition < 5 THEN 'VERY_SUSPICIOUS'
                    WHEN (purchases_in_category::numeric / total_purchases * 100) > 60 AND avg_competition < 8 THEN 'SUSPICIOUS'
                    ELSE 'NORMAL'
                END as dominance_level
            FROM category_dominance
            ORDER BY category_percentage DESC, purchases_in_category DESC
            LIMIT 30;
        `;

        const result = await this.db.query(query);
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${result.rows.length} —Å–ª—É—á–∞–µ–≤ –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º`);
        return result.rows;
    }

    /**
     * 5. –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø–æ–∫—É–ø–æ–∫
     */
    async analyzeTemporalPatterns() {
        console.log('\n‚è∞ –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤...');
        
        const query = `
            WITH temporal_patterns AS (
                SELECT 
                    winner_login,
                    EXTRACT(HOUR FROM auction_end_date) as hour_of_day,
                    EXTRACT(DOW FROM auction_end_date) as day_of_week,
                    COUNT(*) as purchases_count,
                    AVG(winning_bid) as avg_price,
                    AVG(bids_count) as avg_competition
                FROM auction_lots
                WHERE winner_login IS NOT NULL
                AND auction_end_date IS NOT NULL
                AND winning_bid > 0
                GROUP BY winner_login, EXTRACT(HOUR FROM auction_end_date), EXTRACT(DOW FROM auction_end_date)
                HAVING COUNT(*) >= 3
            )
            SELECT 
                winner_login,
                hour_of_day,
                day_of_week,
                purchases_count,
                ROUND(avg_price::numeric, 2) as avg_price,
                ROUND(avg_competition::numeric, 1) as avg_competition,
                CASE 
                    WHEN purchases_count >= 10 AND avg_competition < 5 THEN 'VERY_SUSPICIOUS'
                    WHEN purchases_count >= 5 AND avg_competition < 8 THEN 'SUSPICIOUS'
                    ELSE 'NORMAL'
                END as pattern_level
            FROM temporal_patterns
            ORDER BY purchases_count DESC, avg_competition ASC
            LIMIT 30;
        `;

        const result = await this.db.query(query);
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${result.rows.length} –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤`);
        return result.rows;
    }

    /**
     * 6. –ê–Ω–∞–ª–∏–∑ –ª–æ—Ç–æ–≤ —Å –Ω–∏–∑–∫–æ–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–µ–π
     */
    async analyzeLowCompetitionLots() {
        console.log('\nüéØ –ê–Ω–∞–ª–∏–∑ –ª–æ—Ç–æ–≤ —Å –Ω–∏–∑–∫–æ–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–µ–π...');
        
        const query = `
            WITH low_competition AS (
                SELECT 
                    winner_login,
                    COUNT(*) as low_competition_wins,
                    AVG(winning_bid) as avg_price,
                    COUNT(DISTINCT category) as categories,
                    COUNT(DISTINCT auction_number) as auctions,
                    AVG(bids_count) as avg_bids_count
                FROM auction_lots
                WHERE winner_login IS NOT NULL
                AND winning_bid > 0
                AND bids_count <= 3  -- –ù–∏–∑–∫–∞—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è
                AND winning_bid >= 1000  -- –ù–æ –≤—ã—Å–æ–∫–∞—è —Ü–µ–Ω–∞
                GROUP BY winner_login
                HAVING COUNT(*) >= 5
            )
            SELECT 
                winner_login,
                low_competition_wins,
                ROUND(avg_price::numeric, 2) as avg_price,
                categories,
                auctions,
                ROUND(avg_bids_count::numeric, 1) as avg_bids_count,
                CASE 
                    WHEN low_competition_wins >= 20 AND avg_bids_count <= 2 THEN 'VERY_SUSPICIOUS'
                    WHEN low_competition_wins >= 10 AND avg_bids_count <= 3 THEN 'SUSPICIOUS'
                    ELSE 'NORMAL'
                END as suspicion_level
            FROM low_competition
            ORDER BY low_competition_wins DESC, avg_price DESC
            LIMIT 30;
        `;

        const result = await this.db.query(query);
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${result.rows.length} –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –Ω–∏–∑–∫–æ–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–µ–π`);
        return result.rows;
    }

    /**
     * –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
     */
    async runComprehensiveAnalysis() {
        console.log('\nüöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è...');
        
        const results = {
            suspiciousBuyers: await this.analyzeSuspiciousBuyers(),
            priceManipulation: await this.analyzePriceManipulation(),
            repeatedPurchases: await this.analyzeRepeatedPurchases(),
            categoryDominance: await this.analyzeCategoryDominance(),
            temporalPatterns: await this.analyzeTemporalPatterns(),
            lowCompetition: await this.analyzeLowCompetitionLots(),
            summary: {}
        };

        // –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–∫—É
        results.summary = {
            analysisDate: new Date().toISOString(),
            suspiciousBuyers: results.suspiciousBuyers.filter(s => s.suspicion_level !== 'NORMAL').length,
            priceManipulators: results.priceManipulation.filter(p => p.manipulation_level !== 'NORMAL').length,
            repeatedPurchases: results.repeatedPurchases.filter(r => r.repetition_level !== 'NORMAL').length,
            categoryDominators: results.categoryDominance.filter(d => d.dominance_level !== 'NORMAL').length,
            temporalPatterns: results.temporalPatterns.filter(t => t.pattern_level !== 'NORMAL').length,
            lowCompetition: results.lowCompetition.filter(l => l.suspicion_level !== 'NORMAL').length
        };

        console.log('\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê:');
        console.log(`   –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π: ${results.summary.suspiciousBuyers}`);
        console.log(`   –ú–∞–Ω–∏–ø—É–ª—è—Ç–æ—Ä–æ–≤ —Ü–µ–Ω: ${results.summary.priceManipulators}`);
        console.log(`   –ü–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫: ${results.summary.repeatedPurchases}`);
        console.log(`   –î–æ–º–∏–Ω–∏—Ä—É—é—â–∏—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º: ${results.summary.categoryDominators}`);
        console.log(`   –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: ${results.summary.temporalPatterns}`);
        console.log(`   –õ–æ—Ç–æ–≤ —Å –Ω–∏–∑–∫–æ–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–µ–π: ${results.summary.lowCompetition}`);

        return results;
    }

    async close() {
        await this.db.end();
        console.log('üîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ');
    }
}

module.exports = CompleteAuctionBehaviorAnalyzer;

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
if (require.main === module) {
    const dbConfig = {
        user: 'postgres.xkwgspqwebfeteoblayu',
        host: 'aws-0-eu-north-1.pooler.supabase.com',
        database: 'postgres',
        password: 'Gopapopa326+',
        port: 6543,
        ssl: { rejectUnauthorized: false }
    };

    async function runCompleteAnalysis() {
        const analyzer = new CompleteAuctionBehaviorAnalyzer(dbConfig);
        
        try {
            await analyzer.init();
            const results = await analyzer.runComprehensiveAnalysis();
            
            console.log('\nüéâ –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!');
            console.log('\nüìä –¢–û–ü –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–• –ü–û–ö–£–ü–ê–¢–ï–õ–ï–ô:');
            results.suspiciousBuyers.slice(0, 10).forEach((buyer, index) => {
                console.log(`${index + 1}. ${buyer.winner_login}: ${buyer.total_wins} –ø–æ–∫—É–ø–æ–∫, ${buyer.suspicion_level}`);
            });
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error.message);
        } finally {
            await analyzer.close();
        }
    }

    runCompleteAnalysis();
}
