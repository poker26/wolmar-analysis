const express = require('express');
const cors = require('cors');
const { Pool } = require('pg');
const path = require('path');
// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
const isProduction = process.env.NODE_ENV === 'production' || process.env.PORT;
const config = require(isProduction ? './config.production' : './config');
const AuthService = require('./auth-service');
const CollectionService = require('./collection-service');
const CollectionPriceService = require('./collection-price-service');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç–∞–≤–∫–∏ –æ–¥–Ω–æ–≥–æ –ª–æ—Ç–∞ (—Ç–æ—á–Ω–∞—è –∫–æ–ø–∏—è –ª–æ–≥–∏–∫–∏ –∏–∑ update-current-auction.js)
async function parseSingleLotBid(lotUrl) {
    const { launchPuppeteer, createPage } = require('./puppeteer-utils');
    
    const browser = await launchPuppeteer();
    
    try {
        const page = await createPage(browser);
        
        console.log(`üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ—Ç: ${lotUrl}`);
        await page.goto(lotUrl, { waitUntil: 'domcontentloaded', timeout: 30000 });
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        const lotData = await page.evaluate(() => {
            const data = {};
            
            // –ù–æ–º–µ—Ä –ª–æ—Ç–∞ - –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ h5
            const lotTitle = document.querySelector('h5');
            if (lotTitle) {
                const match = lotTitle.textContent.match(/–õ–æ—Ç\s*‚Ññ\s*(\d+)/i);
                if (match) {
                    data.lotNumber = parseInt(match[1]);
                }
            }
            
            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ—Ä–≥–∞—Ö
            const valuesDiv = document.querySelectorAll('.values')[1];
            if (valuesDiv) {
                const valuesText = valuesDiv.textContent;
                
                // –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞
                const bidMatch = valuesText.match(/–°—Ç–∞–≤–∫–∞:\s*(\d+(?:\s?\d+)*(?:[.,]\d+)?)\s*—Ä—É–±/i);
                if (bidMatch) {
                    data.winningBid = bidMatch[1].replace(/\s/g, '').replace(',', '.');
                }
                
                // –õ–∏–¥–µ—Ä
                const leaderMatch = valuesText.match(/–õ–∏–¥–µ—Ä:\s*([a-zA-Z0-9_–ê-–Ø–∞-—è]+)/i);
                if (leaderMatch) {
                    data.winnerLogin = leaderMatch[1];
                }
            }
            
            return data;
        });
        
        console.log(`üìä –ü–∞—Ä—Å–∏–Ω–≥ –ª–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω:`, lotData);
        return lotData;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ª–æ—Ç–∞:', error);
        return null;
    } finally {
        await browser.close();
    }
}

// –ï–¥–∏–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞
async function getCurrentAuctionNumber(pool) {
    try {
        // 1. –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∞—É–∫—Ü–∏–æ–Ω (–¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–π)
        const activeAuctionQuery = `
            SELECT 
                auction_number
            FROM auction_lots 
            WHERE auction_number IS NOT NULL
            AND auction_end_date > NOW()
            ORDER BY auction_number DESC
            LIMIT 1
        `;
        
        let currentAuctionResult = await pool.query(activeAuctionQuery);
        let currentAuctionNumber = currentAuctionResult.rows.length > 0 
            ? currentAuctionResult.rows[0].auction_number 
            : null;
        
        // 2. –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –∞—É–∫—Ü–∏–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –±–µ—Ä–µ–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π –∞—É–∫—Ü–∏–æ–Ω
        if (!currentAuctionNumber) {
            const latestAuctionQuery = `
                SELECT 
                    auction_number
                FROM auction_lots 
                WHERE auction_number IS NOT NULL
                ORDER BY auction_number DESC
                LIMIT 1
            `;
            currentAuctionResult = await pool.query(latestAuctionQuery);
            currentAuctionNumber = currentAuctionResult.rows.length > 0 
                ? currentAuctionResult.rows[0].auction_number 
                : null;
        }
        
        return currentAuctionNumber;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞:', error);
        return null;
    }
}
const MetalsPriceService = require('./metals-price-service');
const WinnerRatingsService = require('./winner-ratings-service');
const adminFunctions = require('./admin-server');

const app = express();
const PORT = process.env.PORT || 3001;

// Middleware
app.use(cors());
app.use(express.json());

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
const authenticateToken = async (req, res, next) => {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1]; // Bearer TOKEN

    if (!token) {
        return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
    }

    try {
        const user = await authService.verifyUser(token);
        if (!user) {
            return res.status(403).json({ error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω' });
        }
        console.log('üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user);
        req.user = user;
        next();
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error.message);
        res.status(401).json({ error: error.message });
    }
};

// –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å - –î–û–õ–ñ–ù–ê –ë–´–¢–¨ –î–û —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
app.get('/admin', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'admin.html'));
});

// –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä–∞
app.get('/monitor', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'monitor.html'));
});

// Health check endpoint –¥–ª—è PM2
app.get('/api/health', (req, res) => {
    try {
        res.json({
            status: 'ok',
            timestamp: new Date().toISOString(),
            uptime: process.uptime(),
            memory: process.memoryUsage(),
            version: process.version,
            pid: process.pid
        });
    } catch (error) {
        res.status(500).json({
            status: 'error',
            error: error.message,
            timestamp: new Date().toISOString()
        });
    }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ PM2
app.get('/api/logs', (req, res) => {
    try {
        const { exec } = require('child_process');
        const lines = req.query.lines || 50;
        
        exec(`pm2 logs wolmar-parser --lines ${lines} --nostream`, (error, stdout, stderr) => {
            if (error) {
                return res.status(500).json({
                    error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤',
                    message: error.message
                });
            }
            
            // –ü–∞—Ä—Å–∏–º –ª–æ–≥–∏ PM2
            const logLines = stdout.split('\n').filter(line => line.trim());
            const logs = logLines.map(line => {
                try {
                    // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –ª–æ–≥
                    const logData = JSON.parse(line);
                    return {
                        timestamp: logData.timestamp,
                        message: logData.message,
                        type: logData.type || 'info'
                    };
                } catch (e) {
                    // –ï—Å–ª–∏ –Ω–µ JSON, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
                    return {
                        timestamp: new Date().toISOString(),
                        message: line,
                        type: 'info'
                    };
                }
            });
            
            res.json({ logs });
        });
    } catch (error) {
        res.status(500).json({
            error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤',
            message: error.message
        });
    }
});

// API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–±–æ—è –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–æ–≤
app.post('/api/crash-recovery/analyze', (req, res) => {
    try {
        const { exec } = require('child_process');
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å–±–æ—è
        exec('node analyze-crash-recovery.js', (error, stdout, stderr) => {
            if (error) {
                console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–±–æ—è:', error);
                return res.status(500).json({
                    success: false,
                    error: '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–±–æ—è',
                    message: error.message,
                    stderr: stderr
                });
            }
            
            console.log('–ê–Ω–∞–ª–∏–∑ —Å–±–æ—è –∑–∞–≤–µ—Ä—à–µ–Ω:', stdout);
            res.json({
                success: true,
                message: '–ê–Ω–∞–ª–∏–∑ —Å–±–æ—è –∑–∞–≤–µ—Ä—à–µ–Ω',
                output: stdout,
                report: '–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ crash-recovery-report.json'
            });
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ API –∞–Ω–∞–ª–∏–∑–∞ —Å–±–æ—è:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–±–æ—è',
            message: error.message
        });
    }
});

app.post('/api/crash-recovery/auto-recovery', (req, res) => {
    try {
        const { exec } = require('child_process');
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
        exec('node analyze-crash-recovery.js --auto-recovery', (error, stdout, stderr) => {
            if (error) {
                console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
                return res.status(500).json({
                    success: false,
                    error: '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è',
                    message: error.message,
                    stderr: stderr
                });
            }
            
            console.log('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:', stdout);
            res.json({
                success: true,
                message: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ',
                output: stdout
            });
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ API –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è',
            message: error.message
        });
    }
});

// API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–º
app.post('/api/server/restart', (req, res) => {
    try {
        const { exec } = require('child_process');
        
        // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
        res.json({
            success: true,
            message: '–ö–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞',
            note: '–°–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥'
        });
        
        // –ó–∞—Ç–µ–º –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
        setTimeout(() => {
            exec('pm2 restart wolmar-parser --silent', (error, stdout, stderr) => {
                if (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞:', error);
                } else {
                    console.log('–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —É—Å–ø–µ—à–µ–Ω:', stdout);
                }
            });
        }, 1000); // –ó–∞–¥–µ—Ä–∂–∫–∞ 1 —Å–µ–∫—É–Ω–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ API –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
            message: error.message
        });
    }
});

app.post('/api/server/stop', (req, res) => {
    try {
        const { exec } = require('child_process');
        
        exec('pm2 stop wolmar-parser', (error, stdout, stderr) => {
            if (error) {
                return res.status(500).json({
                    success: false,
                    error: '–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞',
                    message: error.message
                });
            }
            
            res.json({
                success: true,
                message: '–°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
                output: stdout
            });
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞',
            message: error.message
        });
    }
});

app.post('/api/server/start', (req, res) => {
    try {
        const { exec } = require('child_process');
        
        exec('pm2 start wolmar-parser', (error, stdout, stderr) => {
            if (error) {
                return res.status(500).json({
                    success: false,
                    error: '–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
                    message: error.message
                });
            }
            
            res.json({
                success: true,
                message: '–°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω',
                output: stdout
            });
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
            message: error.message
        });
    }
});

// –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ API –º–∞—Ä—à—Ä—É—Ç—ã - –î–û–õ–ñ–ù–´ –ë–´–¢–¨ –î–û —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
app.get('/api/admin/status', (req, res) => {
    try {
        const status = adminFunctions.getStatus();
        res.json(status);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞' });
    }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤
app.get('/api/admin/logs/:type', (req, res) => {
    try {
        const { type } = req.params;
        const logs = adminFunctions.readLogs(type, 100);
        res.json({ logs });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤' });
    }
});

app.use(express.static(path.join(__dirname, 'public')));

// Database connection
const pool = new Pool(config.dbConfig);

// Metals price service
const metalsService = new MetalsPriceService();

// Catalog services
const authService = new AuthService();
const collectionService = new CollectionService();
const collectionPriceService = new CollectionPriceService();

// Test database connection
pool.on('connect', () => {
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
});

pool.on('error', (err) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', err);
});

// API Routes

// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤

// –ü–æ–ª—É—á–∏—Ç—å –ª–æ—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞

// –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ—Ç–µ

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞—É–∫—Ü–∏–æ–Ω–∞

// –ü–æ–ª—É—á–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
app.get('/api/winners/:login', async (req, res) => {
    try {
        const { login } = req.params;
        
        // –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        const statsQuery = `
            SELECT 
                winner_login,
                COUNT(*) as total_lots,
                SUM(winning_bid) as total_amount,
                MIN(auction_end_date) as first_win,
                MAX(auction_end_date) as last_win
            FROM auction_lots 
            WHERE winner_login = $1
            GROUP BY winner_login
        `;
        
        const statsResult = await pool.query(statsQuery, [login]);
        
        if (statsResult.rows.length === 0) {
            return res.status(404).json({ error: '–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞—É–∫—Ü–∏–æ–Ω–æ–≤ –≥–¥–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –ø–æ–±–µ–¥–∏—Ç–µ–ª—å
        const auctionsQuery = `
            SELECT 
                auction_number,
                COUNT(*) as lots_won,
                SUM(winning_bid) as total_spent,
                MIN(auction_end_date) as auction_date
            FROM auction_lots 
            WHERE winner_login = $1
            GROUP BY auction_number
            ORDER BY auction_date DESC
        `;
        
        const auctionsResult = await pool.query(auctionsQuery, [login]);
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö –ª–æ—Ç–æ–≤
        const lotsQuery = `
            SELECT 
                id, lot_number, coin_description, 
                avers_image_url, revers_image_url,
                winning_bid, auction_end_date, auction_number,
                year, letters, metal, condition, weight
            FROM auction_lots 
            WHERE winner_login = $1
            ORDER BY auction_end_date DESC, lot_number::int ASC
        `;
        
        const lotsResult = await pool.query(lotsQuery, [login]);
        
        res.json({
            stats: statsResult.rows[0],
            auctions: auctionsResult.rows,
            lots: lotsResult.rows
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è' });
    }
});

// API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
const ratingsService = new WinnerRatingsService();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
app.get('/api/ratings/init', async (req, res) => {
    try {
        await ratingsService.createRatingsTable();
        res.json({ success: true, message: '–¢–∞–±–ª–∏—Ü–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞' });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–π—Ç–∏–Ω–≥–æ–≤:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–π—Ç–∏–Ω–≥–æ–≤' });
    }
});

// –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
app.get('/api/ratings/:login', async (req, res) => {
    try {
        const { login } = req.params;
        const rating = await ratingsService.getWinnerRating(login);
        
        if (!rating) {
            return res.status(404).json({ error: '–†–µ–π—Ç–∏–Ω–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        res.json(rating);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞' });
    }
});

// –û–±–Ω–æ–≤–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
app.post('/api/ratings/:login/update', async (req, res) => {
    try {
        const { login } = req.params;
        const result = await ratingsService.updateWinnerRating(login);
        
        if (!result) {
            return res.status(404).json({ error: '–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        res.json(result);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞' });
    }
});

// –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
app.post('/api/ratings/update-all', async (req, res) => {
    try {
        const result = await ratingsService.updateAllRatings();
        res.json(result);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤' });
    }
});

// –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
app.get('/api/ratings/top', async (req, res) => {
    try {
        const limit = parseInt(req.query.limit) || 20;
        const topWinners = await ratingsService.getTopWinners(limit);
        res.json(topWinners);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π' });
    }
});

// API route for auctions list
app.get('/api/auctions', async (req, res) => {
    try {
        const query = `
            SELECT 
                auction_number,
                MIN(auction_end_date) as start_date,
                MAX(auction_end_date) as end_date,
                COUNT(*) as lots_count,
                SUM(winning_bid) as total_value,
                AVG(winning_bid) as avg_bid,
                MAX(winning_bid) as max_price,
                MIN(winning_bid) as min_price
            FROM auction_lots 
            WHERE auction_number IS NOT NULL
            GROUP BY auction_number
            ORDER BY auction_number DESC
        `;
        
        const result = await pool.query(query);
        res.json(result.rows);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞—É–∫—Ü–∏–æ–Ω–æ–≤:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞—É–∫—Ü–∏–æ–Ω–æ–≤' });
    }
});

// API route for auction lots
app.get('/api/auctions/:auctionNumber/lots', async (req, res) => {
    try {
        const { auctionNumber } = req.params;
        const { page = 1, limit = 20, search, metal, condition, year, minPrice, maxPrice } = req.query;
        
        let query = `
            SELECT 
                id, lot_number, auction_number, coin_description,
                winning_bid, auction_end_date, bids_count, lot_status,
                metal, condition, weight, year,
                avers_image_url, revers_image_url,
                winner_login
            FROM auction_lots 
            WHERE auction_number = $1
        `;
        
        const params = [auctionNumber];
        let paramIndex = 2;
        
        if (search) {
            query += ` AND coin_description ILIKE $${paramIndex}`;
            params.push(`%${search}%`);
            paramIndex++;
        }
        
        if (metal) {
            query += ` AND metal = $${paramIndex}`;
            params.push(metal);
            paramIndex++;
        }
        
        if (condition) {
            query += ` AND condition = $${paramIndex}`;
            params.push(condition);
            paramIndex++;
        }
        
        if (year) {
            query += ` AND year = $${paramIndex}`;
            params.push(parseInt(year));
            paramIndex++;
        }
        
        if (minPrice) {
            query += ` AND winning_bid >= $${paramIndex}`;
            params.push(parseFloat(minPrice));
            paramIndex++;
        }
        
        if (maxPrice) {
            query += ` AND winning_bid <= $${paramIndex}`;
            params.push(parseFloat(maxPrice));
            paramIndex++;
        }
        
        const offset = (parseInt(page) - 1) * parseInt(limit);
        query += ` ORDER BY lot_number::int ASC LIMIT $${paramIndex} OFFSET $${paramIndex + 1}`;
        params.push(parseInt(limit), offset);
        
        const result = await pool.query(query, params);
        
        // Get total count
        let countQuery = `SELECT COUNT(*) FROM auction_lots WHERE auction_number = $1`;
        const countParams = [auctionNumber];
        let countParamIndex = 2;
        
        if (search) {
            countQuery += ` AND coin_description ILIKE $${countParamIndex}`;
            countParams.push(`%${search}%`);
            countParamIndex++;
        }
        
        if (metal) {
            countQuery += ` AND metal = $${countParamIndex}`;
            countParams.push(metal);
            countParamIndex++;
        }
        
        if (condition) {
            countQuery += ` AND condition = $${countParamIndex}`;
            countParams.push(condition);
            countParamIndex++;
        }
        
        if (year) {
            countQuery += ` AND year = $${countParamIndex}`;
            countParams.push(parseInt(year));
            countParamIndex++;
        }
        
        if (minPrice) {
            countQuery += ` AND winning_bid >= $${countParamIndex}`;
            countParams.push(parseFloat(minPrice));
            countParamIndex++;
        }
        
        if (maxPrice) {
            countQuery += ` AND winning_bid <= $${countParamIndex}`;
            countParams.push(parseFloat(maxPrice));
            countParamIndex++;
        }
        
        const countResult = await pool.query(countQuery, countParams);
        const totalLots = parseInt(countResult.rows[0].count);
        
        res.json({
            lots: result.rows,
            pagination: {
                page: parseInt(page),
                limit: parseInt(limit),
                total: totalLots,
                pages: Math.ceil(totalLots / parseInt(limit))
            }
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ—Ç–æ–≤ –∞—É–∫—Ü–∏–æ–Ω–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ—Ç–æ–≤ –∞—É–∫—Ü–∏–æ–Ω–∞' });
    }
});

// API route for filters
app.get('/api/filters', async (req, res) => {
    try {
        const { auctionNumber } = req.query;
        
        let query = `
            SELECT DISTINCT metal, condition, year
            FROM auction_lots 
            WHERE metal IS NOT NULL AND metal != ''
        `;
        
        const params = [];
        if (auctionNumber) {
            query += ` AND auction_number = $1`;
            params.push(auctionNumber);
        }
        
        const result = await pool.query(query, params);
        
        const metals = [...new Set(result.rows.map(row => row.metal).filter(Boolean))];
        const conditions = [...new Set(result.rows.map(row => row.condition).filter(Boolean))];
        const years = [...new Set(result.rows.map(row => row.year).filter(Boolean))].sort((a, b) => b - a);
        
        res.json({
            metals,
            conditions,
            years
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤' });
    }
});

// –ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
app.get('/api/statistics', async (req, res) => {
    try {
        const query = `
            SELECT 
                COUNT(DISTINCT auction_number) as total_auctions,
                COUNT(*) as total_lots,
                COUNT(CASE WHEN winning_bid IS NOT NULL THEN 1 END) as sold_lots,
                COUNT(CASE WHEN winning_bid IS NULL THEN 1 END) as unsold_lots,
                SUM(winning_bid) as total_value,
                AVG(winning_bid) as avg_price,
                MAX(winning_bid) as max_price,
                MIN(winning_bid) as min_price,
                COUNT(DISTINCT winner_login) as unique_participants,
                COUNT(DISTINCT metal) as metals_count,
                COUNT(DISTINCT condition) as conditions_count
            FROM auction_lots 
            WHERE auction_number IS NOT NULL
        `;
        
        const result = await pool.query(query);
        res.json(result.rows[0]);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏' });
    }
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ª–æ—Ç–æ–≤ –ø–æ –≤—Å–µ–º –∞—É–∫—Ü–∏–æ–Ω–∞–º
app.get('/api/search-lots', async (req, res) => {
    try {
        const { page = 1, limit = 20, search, metal, condition, year, minPrice, maxPrice } = req.query;
        
        let query = `
            SELECT 
                id, lot_number, coin_description, 
                avers_image_url, revers_image_url,
                winner_login, winning_bid, auction_end_date,
                bids_count, lot_status, year, letters, metal, condition, weight,
                parsed_at, source_url, auction_number
            FROM auction_lots 
            WHERE auction_number IS NOT NULL
        `;
        
        const queryParams = [];
        let paramIndex = 1;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        if (search) {
            query += ` AND coin_description ILIKE $${paramIndex}`;
            queryParams.push(`%${search}%`);
            paramIndex++;
        }
        
        if (metal) {
            query += ` AND metal = $${paramIndex}`;
            queryParams.push(metal);
            paramIndex++;
        }
        
        if (condition) {
            query += ` AND condition = $${paramIndex}`;
            queryParams.push(condition);
            paramIndex++;
        }
        
        if (year) {
            query += ` AND year = $${paramIndex}`;
            queryParams.push(parseInt(year));
            paramIndex++;
        }
        
        if (minPrice) {
            query += ` AND winning_bid >= $${paramIndex}`;
            queryParams.push(parseFloat(minPrice));
            paramIndex++;
        }
        
        if (maxPrice) {
            query += ` AND winning_bid <= $${paramIndex}`;
            queryParams.push(parseFloat(maxPrice));
            paramIndex++;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏—é
        query += ` ORDER BY winning_bid DESC NULLS LAST, auction_number DESC, lot_number ASC`;
        
        const offset = (page - 1) * limit;
        query += ` LIMIT $${paramIndex} OFFSET $${paramIndex + 1}`;
        queryParams.push(parseInt(limit), offset);
        
        const result = await pool.query(query, queryParams);
        
        // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        let countQuery = `
            SELECT COUNT(*) as total
            FROM auction_lots 
            WHERE auction_number IS NOT NULL
        `;
        
        const countParams = [];
        let countParamIndex = 1;
        
        if (search) {
            countQuery += ` AND coin_description ILIKE $${countParamIndex}`;
            countParams.push(`%${search}%`);
            countParamIndex++;
        }
        
        if (metal) {
            countQuery += ` AND metal = $${countParamIndex}`;
            countParams.push(metal);
            countParamIndex++;
        }
        
        if (condition) {
            countQuery += ` AND condition = $${countParamIndex}`;
            countParams.push(condition);
            countParamIndex++;
        }
        
        if (year) {
            countQuery += ` AND year = $${countParamIndex}`;
            countParams.push(parseInt(year));
            countParamIndex++;
        }
        
        if (minPrice) {
            countQuery += ` AND winning_bid >= $${countParamIndex}`;
            countParams.push(parseFloat(minPrice));
            countParamIndex++;
        }
        
        if (maxPrice) {
            countQuery += ` AND winning_bid <= $${countParamIndex}`;
            countParams.push(parseFloat(maxPrice));
            countParamIndex++;
        }
        
        const countResult = await pool.query(countQuery, countParams);
        const total = parseInt(countResult.rows[0].total);
        
        res.json({
            lots: result.rows,
            pagination: {
                page: parseInt(page),
                limit: parseInt(limit),
                total: total,
                pages: Math.ceil(total / limit)
            }
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ª–æ—Ç–æ–≤:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ª–æ—Ç–æ–≤' });
    }
});

// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
app.get('/api/winners', async (req, res) => {
    try {
        const query = `
            SELECT 
                winner_login,
                COUNT(*) as total_lots,
                SUM(winning_bid) as total_amount
            FROM auction_lots 
            WHERE winner_login IS NOT NULL AND winner_login != ''
            GROUP BY winner_login
            ORDER BY total_lots DESC
            LIMIT 20
        `;
        
        const result = await pool.query(query);
        res.json(result.rows);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π' });
    }
});

// –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –ª–æ—Ç–æ–≤ –ø–æ —Ü–µ–Ω–µ
app.get('/api/top-lots', async (req, res) => {
    try {
        const { limit = 10, auctionNumber } = req.query;
        
        let query = `
            SELECT 
                id, lot_number, auction_number, coin_description,
                avers_image_url, winning_bid, winner_login,
                auction_end_date, metal, condition, weight
            FROM auction_lots 
            WHERE winning_bid IS NOT NULL
        `;
        
        const params = [];
        let paramIndex = 1;
        
        if (auctionNumber) {
            query += ` AND auction_number = $${paramIndex}`;
            params.push(auctionNumber);
            paramIndex++;
        }
        
        query += ` ORDER BY winning_bid DESC LIMIT $${paramIndex}`;
        params.push(parseInt(limit));
        
        const result = await pool.query(query, params);
        res.json(result.rows);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø –ª–æ—Ç–æ–≤:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø –ª–æ—Ç–æ–≤' });
    }
});

// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∞—É–∫—Ü–∏–æ–Ω (–ª–æ—Ç—ã –±–µ–∑ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π) —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
app.get('/api/current-auction', async (req, res) => {
    try {
        const { 
            page = 1, 
            limit = 20,
            // –§–∏–ª—å—Ç—Ä—ã
            country,
            metal,
            rarity,
            condition,
            mint,
            yearFrom,
            yearTo,
            search,
            priceFrom,
            priceTo,
            sort = 'lot_number'
        } = req.query;
        
        console.log('üîç –ó–∞–ø—Ä–æ—Å —Ç–µ–∫—É—â–µ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏:', req.query);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞
        const currentAuctionNumber = await getCurrentAuctionNumber(pool);
        
        // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –∞—É–∫—Ü–∏–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if (!currentAuctionNumber) {
            return res.json({
                currentAuctionNumber: null,
                lots: [],
                pagination: {
                    page: parseInt(page),
                    limit: parseInt(limit),
                    total: 0,
                    pages: 0
                }
            });
        }
        
        // –°—Ç—Ä–æ–∏–º WHERE —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        let whereConditions = ['auction_number = $1'];
        let queryParams = [currentAuctionNumber];
        let paramIndex = 2;
        
        // –§–∏–ª—å—Ç—Ä –ø–æ –º–µ—Ç–∞–ª–ª—É
        if (metal) {
            whereConditions.push(`metal = $${paramIndex}`);
            queryParams.push(metal);
            paramIndex++;
        }
        
        // –§–∏–ª—å—Ç—Ä –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é
        if (condition) {
            whereConditions.push(`condition = $${paramIndex}`);
            queryParams.push(condition);
            paramIndex++;
        }
        
        // –§–∏–ª—å—Ç—Ä –ø–æ –≥–æ–¥—É
        if (yearFrom) {
            whereConditions.push(`year >= $${paramIndex}`);
            queryParams.push(parseInt(yearFrom));
            paramIndex++;
        }
        
        if (yearTo) {
            whereConditions.push(`year <= $${paramIndex}`);
            queryParams.push(parseInt(yearTo));
            paramIndex++;
        }
        
        // –ü–æ–∏—Å–∫ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
        if (search) {
            whereConditions.push(`coin_description ILIKE $${paramIndex}`);
            queryParams.push(`%${search}%`);
            paramIndex++;
        }
        
        // –§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ (—Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ = winning_bid)
        if (priceFrom) {
            whereConditions.push(`winning_bid >= $${paramIndex}`);
            queryParams.push(parseFloat(priceFrom));
            paramIndex++;
        }
        
        if (priceTo) {
            whereConditions.push(`winning_bid <= $${paramIndex}`);
            queryParams.push(parseFloat(priceTo));
            paramIndex++;
        }
        
        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        let orderBy = 'lot_number::int ASC';
        switch (sort) {
            case 'premium-desc':
                orderBy = 'winning_bid DESC';
                break;
            case 'premium-asc':
                orderBy = 'winning_bid ASC';
                break;
            case 'price-desc':
                orderBy = 'winning_bid DESC';
                break;
            case 'price-asc':
                orderBy = 'winning_bid ASC';
                break;
            case 'weight-desc':
                orderBy = 'weight DESC';
                break;
            case 'weight-asc':
                orderBy = 'weight ASC';
                break;
            case 'year-desc':
                orderBy = 'year DESC';
                break;
            case 'year-asc':
                orderBy = 'year ASC';
                break;
        }
        
        // –°—Ç—Ä–æ–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        const whereClause = whereConditions.length > 0 ? 'WHERE ' + whereConditions.join(' AND ') : '';
        
        const query = `
            SELECT 
                id, lot_number, auction_number, coin_description,
                avers_image_url, revers_image_url, winner_login, 
                winning_bid, auction_end_date, bids_count, lot_status,
                year, letters, metal, condition, weight, parsed_at, source_url,
                -- –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—á–µ—Ç –Ω–∞—Ü–µ–Ω–∫–∏ (–ø–æ–∫–∞ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
                CASE 
                    WHEN winning_bid > 0 THEN 
                        ROUND(((winning_bid - COALESCE(weight * 0.001, 0)) / COALESCE(weight * 0.001, 1)) * 100, 1)
                    ELSE 0 
                END as premium
            FROM auction_lots 
            ${whereClause}
            ORDER BY ${orderBy}
            LIMIT $${paramIndex} OFFSET $${paramIndex + 1}
        `;
        
        const offset = (page - 1) * limit;
        queryParams.push(parseInt(limit), offset);
        
        console.log('üì° SQL –∑–∞–ø—Ä–æ—Å:', query);
        console.log('üì° –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:', queryParams);
        
        const result = await pool.query(query, queryParams);
        
        // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ—Ç–æ–≤ —Å —Ç–µ–º–∏ –∂–µ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
        const countQuery = `
            SELECT COUNT(*) as total
            FROM auction_lots 
            ${whereClause}
        `;
        
        const countResult = await pool.query(countQuery, queryParams.slice(0, -2)); // –£–±–∏—Ä–∞–µ–º limit –∏ offset
        const total = parseInt(countResult.rows[0].total);
        
        console.log('üìä –ù–∞–π–¥–µ–Ω–æ –ª–æ—Ç–æ–≤:', total);
        
        res.json({
            currentAuctionNumber: currentAuctionNumber,
            lots: result.rows,
            pagination: {
                page: parseInt(page),
                limit: parseInt(limit),
                total,
                pages: Math.ceil(total / limit)
            }
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞' });
    }
});

// –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ—Ç–µ (—Ä–∞–±–æ—á–∏–π —ç–Ω–¥–ø–æ–∏–Ω—Ç)
app.get('/api/lot-details/:lotId', async (req, res) => {
    try {
        const { lotId } = req.params;
        
        const query = `
            SELECT 
                id, lot_number, auction_number, coin_description,
                avers_image_url, revers_image_url, winner_login, 
                winning_bid, auction_end_date, bids_count, lot_status,
                year, letters, metal, condition, weight, parsed_at, source_url
            FROM auction_lots 
            WHERE id = $1
        `;
        
        const result = await pool.query(query, [lotId]);
        
        if (result.rows.length === 0) {
            return res.status(404).json({ error: '–õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        res.json(result.rows[0]);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –ª–æ—Ç–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –ª–æ—Ç–∞' });
    }
});

// –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ—Ç–µ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
app.get('/api/lots/:lotId', async (req, res) => {
    try {
        const { lotId } = req.params;
        
        const query = `
            SELECT 
                id, lot_number, auction_number, coin_description,
                avers_image_url, revers_image_url, winner_login, 
                winning_bid, auction_end_date, bids_count, lot_status,
                year, letters, metal, condition, weight, parsed_at, source_url
            FROM auction_lots 
            WHERE id = $1
        `;
        
        const result = await pool.query(query, [lotId]);
        
        if (result.rows.length === 0) {
            return res.status(404).json({ error: '–õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        res.json(result.rows[0]);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –ª–æ—Ç–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –ª–æ—Ç–∞' });
    }
});


// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã —Ü–µ–Ω –¥–ª—è –ª–æ—Ç–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞
app.get('/api/predictions/:auctionNumber', async (req, res) => {
    try {
        const { auctionNumber } = req.params;
        
        const query = `
            SELECT 
                al.id,
                al.lot_number,
                al.condition,
                al.metal,
                al.weight,
                al.year,
                al.letters,
                al.winning_bid,
                al.coin_description,
                lpp.predicted_price,
                lpp.metal_value,
                lpp.numismatic_premium,
                lpp.confidence_score,
                lpp.prediction_method,
                lpp.sample_size,
                lpp.created_at as prediction_created_at
            FROM auction_lots al
            LEFT JOIN lot_price_predictions lpp ON al.id = lpp.lot_id
            WHERE al.auction_number = $1
            ORDER BY al.lot_number
        `;
        
        const result = await pool.query(query, [auctionNumber]);
        
        res.json(result.rows);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤' });
    }
});

// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ª–æ—Ç–∞
app.get('/api/prediction/:lotId', async (req, res) => {
    try {
        const { lotId } = req.params;
        
        const query = `
            SELECT 
                al.id,
                al.lot_number,
                al.condition,
                al.metal,
                al.weight,
                al.year,
                al.letters,
                al.winning_bid,
                al.coin_description,
                lpp.predicted_price,
                lpp.metal_value,
                lpp.numismatic_premium,
                lpp.confidence_score,
                lpp.prediction_method,
                lpp.sample_size,
                lpp.created_at as prediction_created_at
            FROM auction_lots al
            LEFT JOIN lot_price_predictions lpp ON al.id = lpp.lot_id
            WHERE al.id = $1
        `;
        
        const result = await pool.query(query, [lotId]);
        
        if (result.rows.length === 0) {
            return res.status(404).json({ error: '–õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        res.json(result.rows[0]);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞' });
    }
});

// –ü–æ–∏—Å–∫ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã—Ö –ª–æ—Ç–æ–≤ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
app.get('/api/similar-lots/:lotId', async (req, res) => {
    try {
        const { lotId } = req.params;
        
        // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ª–æ—Ç–µ
        const currentLotQuery = `
            SELECT 
                coin_description, metal, condition, year, letters, auction_number
            FROM auction_lots 
            WHERE id = $1
        `;
        
        const currentLotResult = await pool.query(currentLotQuery, [lotId]);
        
        if (currentLotResult.rows.length === 0) {
            return res.status(404).json({ error: '–õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        const currentLot = currentLotResult.rows[0];
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–∏–Ω–∞–ª –∏ —Ç–∏–ø –≤–∞–ª—é—Ç—ã –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –º–æ–Ω–µ—Ç—ã
        const denominationMatch = currentLot.coin_description.match(/(\d+)\s*—Ä—É–±–ª–µ–π?/i);
        const currentDenomination = denominationMatch ? denominationMatch[1] : null;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤–∞–ª—é—Ç—ã/–º–æ–Ω–µ—Ç—ã
        let currentCurrency = null;
        const currencyPatterns = [
            { pattern: /—Ä—É–±–ª–µ–π?|—Ä—É–±–ª/i, currency: '—Ä—É–±–ª—å' },
            { pattern: /—ç–∫—é|ecu/i, currency: '—ç–∫—é' },
            { pattern: /—Å—Ç—é–≤–µ—Ä|stuiver/i, currency: '—Å—Ç—é–≤–µ—Ä' },
            { pattern: /—Ç–∞–ª–µ—Ä|thaler/i, currency: '—Ç–∞–ª–µ—Ä' },
            { pattern: /—Ñ–ª–æ—Ä–∏–Ω|florin/i, currency: '—Ñ–ª–æ—Ä–∏–Ω' },
            { pattern: /–¥—É–∫–∞—Ç|ducat/i, currency: '–¥—É–∫–∞—Ç' },
            { pattern: /–∫—Ä–æ–Ω–∞|krona/i, currency: '–∫—Ä–æ–Ω–∞' },
            { pattern: /—à–∏–ª–ª–∏–Ω–≥|shilling/i, currency: '—à–∏–ª–ª–∏–Ω–≥' },
            { pattern: /–ø–µ–Ω–Ω–∏|penny/i, currency: '–ø–µ–Ω–Ω–∏' },
            { pattern: /—Å–æ–ª—å–¥–æ|soldo/i, currency: '—Å–æ–ª—å–¥–æ' },
            { pattern: /—Ä–µ–∞–ª|real/i, currency: '—Ä–µ–∞–ª' },
            { pattern: /–ª–∏—Ä–∞|lira/i, currency: '–ª–∏—Ä–∞' }
        ];
        
        for (const { pattern, currency } of currencyPatterns) {
            if (pattern.test(currentLot.coin_description)) {
                currentCurrency = currency;
                break;
            }
        }
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä–∞–Ω—É –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –º–æ–Ω–µ—Ç—ã
        let currentCountry = null;
        const countryPatterns = [
            { pattern: /–†–æ—Å—Å–∏—è|–†–æ—Å—Å–∏–π—Å–∫–∞—è|–†–æ—Å—Å–∏–π—Å–∫–æ–π|–†–æ—Å—Å–∏–π—Å–∫–∞—è –∏–º–ø–µ—Ä–∏—è/i, country: '–†–æ—Å—Å–∏—è' },
            { pattern: /–§—Ä–∞–Ω—Ü–∏—è|–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∞—è|–§—Ä–∞–Ω—Ü—É–∑—Å–∫–æ–π/i, country: '–§—Ä–∞–Ω—Ü–∏—è' },
            { pattern: /–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã|–ì–æ–ª–ª–∞–Ω–¥–∏—è|–ì–æ–ª–ª–∞–Ω–¥—Å–∫–∞—è|–ì–æ–ª–ª–∞–Ω–¥—Å–∫–æ–π/i, country: '–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã' },
            { pattern: /–ì–µ—Ä–º–∞–Ω–∏—è|–ù–µ–º–µ—Ü–∫–∞—è|–ù–µ–º–µ—Ü–∫–æ–π|–ü—Ä—É—Å—Å–∏—è|–ü—Ä—É—Å—Å–∫–∞—è/i, country: '–ì–µ—Ä–º–∞–Ω–∏—è' },
            { pattern: /–ê–≤—Å—Ç—Ä–∏—è|–ê–≤—Å—Ç—Ä–∏–π—Å–∫–∞—è|–ê–≤—Å—Ç—Ä–∏–π—Å–∫–æ–π/i, country: '–ê–≤—Å—Ç—Ä–∏—è' },
            { pattern: /–ê–Ω–≥–ª–∏—è|–ê–Ω–≥–ª–∏–π—Å–∫–∞—è|–ê–Ω–≥–ª–∏–π—Å–∫–æ–π|–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è/i, country: '–ê–Ω–≥–ª–∏—è' },
            { pattern: /–ò—Å–ø–∞–Ω–∏—è|–ò—Å–ø–∞–Ω—Å–∫–∞—è|–ò—Å–ø–∞–Ω—Å–∫–æ–π/i, country: '–ò—Å–ø–∞–Ω–∏—è' },
            { pattern: /–ò—Ç–∞–ª–∏—è|–ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è|–ò—Ç–∞–ª—å—è–Ω—Å–∫–æ–π/i, country: '–ò—Ç–∞–ª–∏—è' }
        ];
        
        for (const { pattern, country } of countryPatterns) {
            if (pattern.test(currentLot.coin_description)) {
                currentCountry = country;
                break;
            }
        }
        
        // –ò—â–µ–º –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ –ª–æ—Ç—ã —Å —É—á–µ—Ç–æ–º –Ω–æ–º–∏–Ω–∞–ª–∞
        // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ condition, metal, year, letters –ò –Ω–æ–º–∏–Ω–∞–ª—É
        // –ò—Å–∫–ª—é—á–∞–µ–º –ª–æ—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞
        let similarQuery = `
            SELECT 
                id, lot_number, auction_number, coin_description,
                winning_bid, winner_login, auction_end_date,
                metal, condition, year, letters, weight
            FROM auction_lots 
            WHERE condition = $2 
                AND metal = $3 
                AND year = $4 
                AND letters = $5
                AND id != $1
                AND auction_number != $6
                AND winning_bid IS NOT NULL 
                AND winning_bid > 0
        `;
        
        const params = [
            lotId,
            currentLot.condition,
            currentLot.metal, 
            currentLot.year,
            currentLot.letters,
            currentLot.auction_number
        ];
        
        // –ï—Å–ª–∏ –Ω–æ–º–∏–Ω–∞–ª –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —É—Å–ª–æ–≤–∏–µ –ø–æ–∏—Å–∫–∞
        if (currentDenomination) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ —Å–ª–æ–≤
            similarQuery += ` AND coin_description ~ $${params.length + 1}`;
            params.push(`\\m${currentDenomination}\\s*—Ä—É–±–ª–µ–π?\\M`);
        }
        
        // –ï—Å–ª–∏ —Ç–∏–ø –≤–∞–ª—é—Ç—ã –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –≤–∞–ª—é—Ç–µ
        if (currentCurrency) {
            similarQuery += ` AND coin_description ~* $${params.length + 1}`;
            // –°–æ–∑–¥–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–ª—é—Ç—ã –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
            let currencyPattern = '';
            switch (currentCurrency) {
                case '—Ä—É–±–ª—å':
                    currencyPattern = '—Ä—É–±–ª–µ–π?|—Ä—É–±–ª';
                    break;
                case '—ç–∫—é':
                    currencyPattern = '—ç–∫—é|ecu';
                    break;
                case '—Å—Ç—é–≤–µ—Ä':
                    currencyPattern = '—Å—Ç—é–≤–µ—Ä|stuiver';
                    break;
                case '—Ç–∞–ª–µ—Ä':
                    currencyPattern = '—Ç–∞–ª–µ—Ä|thaler';
                    break;
                case '—Ñ–ª–æ—Ä–∏–Ω':
                    currencyPattern = '—Ñ–ª–æ—Ä–∏–Ω|florin';
                    break;
                case '–¥—É–∫–∞—Ç':
                    currencyPattern = '–¥—É–∫–∞—Ç|ducat';
                    break;
                case '–∫—Ä–æ–Ω–∞':
                    currencyPattern = '–∫—Ä–æ–Ω–∞|krona';
                    break;
                case '—à–∏–ª–ª–∏–Ω–≥':
                    currencyPattern = '—à–∏–ª–ª–∏–Ω–≥|shilling';
                    break;
                case '–ø–µ–Ω–Ω–∏':
                    currencyPattern = '–ø–µ–Ω–Ω–∏|penny';
                    break;
                case '—Å–æ–ª—å–¥–æ':
                    currencyPattern = '—Å–æ–ª—å–¥–æ|soldo';
                    break;
                case '—Ä–µ–∞–ª':
                    currencyPattern = '—Ä–µ–∞–ª|real';
                    break;
                case '–ª–∏—Ä–∞':
                    currencyPattern = '–ª–∏—Ä–∞|lira';
                    break;
            }
            params.push(currencyPattern);
        }
        
        // –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∞ –Ω–∞–π–¥–µ–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ —Å—Ç—Ä–∞–Ω–µ
        if (currentCountry) {
            similarQuery += ` AND coin_description ~* $${params.length + 1}`;
            // –°–æ–∑–¥–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–∞–Ω—ã –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
            let countryPattern = '';
            switch (currentCountry) {
                case '–†–æ—Å—Å–∏—è':
                    countryPattern = '–†–æ—Å—Å–∏—è|–†–æ—Å—Å–∏–π—Å–∫–∞—è|–†–æ—Å—Å–∏–π—Å–∫–æ–π|–†–æ—Å—Å–∏–π—Å–∫–∞—è –∏–º–ø–µ—Ä–∏—è';
                    break;
                case '–§—Ä–∞–Ω—Ü–∏—è':
                    countryPattern = '–§—Ä–∞–Ω—Ü–∏—è|–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∞—è|–§—Ä–∞–Ω—Ü—É–∑—Å–∫–æ–π';
                    break;
                case '–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã':
                    countryPattern = '–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã|–ì–æ–ª–ª–∞–Ω–¥–∏—è|–ì–æ–ª–ª–∞–Ω–¥—Å–∫–∞—è|–ì–æ–ª–ª–∞–Ω–¥—Å–∫–æ–π';
                    break;
                case '–ì–µ—Ä–º–∞–Ω–∏—è':
                    countryPattern = '–ì–µ—Ä–º–∞–Ω–∏—è|–ù–µ–º–µ—Ü–∫–∞—è|–ù–µ–º–µ—Ü–∫–æ–π|–ü—Ä—É—Å—Å–∏—è|–ü—Ä—É—Å—Å–∫–∞—è';
                    break;
                case '–ê–≤—Å—Ç—Ä–∏—è':
                    countryPattern = '–ê–≤—Å—Ç—Ä–∏—è|–ê–≤—Å—Ç—Ä–∏–π—Å–∫–∞—è|–ê–≤—Å—Ç—Ä–∏–π—Å–∫–æ–π';
                    break;
                case '–ê–Ω–≥–ª–∏—è':
                    countryPattern = '–ê–Ω–≥–ª–∏—è|–ê–Ω–≥–ª–∏–π—Å–∫–∞—è|–ê–Ω–≥–ª–∏–π—Å–∫–æ–π|–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è';
                    break;
                case '–ò—Å–ø–∞–Ω–∏—è':
                    countryPattern = '–ò—Å–ø–∞–Ω–∏—è|–ò—Å–ø–∞–Ω—Å–∫–∞—è|–ò—Å–ø–∞–Ω—Å–∫–æ–π';
                    break;
                case '–ò—Ç–∞–ª–∏—è':
                    countryPattern = '–ò—Ç–∞–ª–∏—è|–ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è|–ò—Ç–∞–ª—å—è–Ω—Å–∫–æ–π';
                    break;
            }
            params.push(countryPattern);
        }
        
        similarQuery += ` ORDER BY auction_end_date DESC`;
        
        // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        console.log(`–ü–æ–∏—Å–∫ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã—Ö –ª–æ—Ç–æ–≤ –¥–ª—è –ª–æ—Ç–∞ ${lotId}:`);
        console.log(`- –°—Ç—Ä–∞–Ω–∞: ${currentCountry || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'}`);
        console.log(`- –í–∞–ª—é—Ç–∞: ${currentCurrency || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'}`);
        console.log(`- –ù–æ–º–∏–Ω–∞–ª: ${currentDenomination || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}`);
        console.log(`- –ú–µ—Ç–∞–ª–ª: ${currentLot.metal}, –ì–æ–¥: ${currentLot.year}, –°–æ—Å—Ç–æ—è–Ω–∏–µ: ${currentLot.condition}`);
        console.log(`- –ó–∞–ø—Ä–æ—Å: ${similarQuery}`);
        console.log(`- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: ${JSON.stringify(params)}`);
        
        const similarResult = await pool.query(similarQuery, params);
        
        console.log(`–ù–∞–π–¥–µ–Ω–æ ${similarResult.rows.length} –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã—Ö –ª–æ—Ç–æ–≤`);
        
        res.json({
            currentLot: currentLot,
            similarLots: similarResult.rows,
            searchCriteria: {
                country: currentCountry,
                currency: currentCurrency,
                denomination: currentDenomination,
                metal: currentLot.metal,
                year: currentLot.year,
                condition: currentLot.condition
            }
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã—Ö –ª–æ—Ç–æ–≤:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã—Ö –ª–æ—Ç–æ–≤' });
    }
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CSV
app.get('/api/export/csv', async (req, res) => {
    try {
        const { auctionNumber } = req.query;
        
        let query = `
            SELECT 
                lot_number, auction_number, coin_description,
                winner_login, winning_bid, auction_end_date,
                bids_count, lot_status, year, letters, metal, condition,
                parsed_at, source_url
            FROM auction_lots
        `;
        
        const params = [];
        if (auctionNumber) {
            query += ` WHERE auction_number = $1`;
            params.push(auctionNumber);
        }
        
        query += ` ORDER BY auction_number DESC, lot_number::int ASC`;
        
        const result = await pool.query(query, params);
        
        // –°–æ–∑–¥–∞–µ–º CSV
        const headers = [
            '–ù–æ–º–µ—Ä –ª–æ—Ç–∞', '–ù–æ–º–µ—Ä –∞—É–∫—Ü–∏–æ–Ω–∞', '–û–ø–∏—Å–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã',
            '–ü–æ–±–µ–¥–∏—Ç–µ–ª—å', '–¶–µ–Ω–∞', '–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞',
            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–≤–æ–∫', '–°—Ç–∞—Ç—É—Å', '–ì–æ–¥', '–ë—É–∫–≤—ã', '–ú–µ—Ç–∞–ª–ª', '–°–æ—Å—Ç–æ—è–Ω–∏–µ',
            '–î–∞—Ç–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞', 'URL –∏—Å—Ç–æ—á–Ω–∏–∫–∞'
        ];
        
        const csvContent = [
            headers.join(','),
            ...result.rows.map(row => [
                row.lot_number || '',
                row.auction_number || '',
                `"${(row.coin_description || '').replace(/"/g, '""')}"`,
                row.winner_login || '',
                row.winning_bid || '',
                row.auction_end_date || '',
                row.bids_count || '',
                row.lot_status || '',
                row.year || '',
                row.letters || '',
                row.metal || '',
                row.condition || '',
                row.parsed_at || '',
                row.source_url || ''
            ].join(','))
        ].join('\n');
        
        res.setHeader('Content-Type', 'text/csv; charset=utf-8');
        res.setHeader('Content-Disposition', `attachment; filename="wolmar-auctions${auctionNumber ? `-${auctionNumber}` : ''}-${new Date().toISOString().split('T')[0]}.csv"`);
        res.send('\ufeff' + csvContent); // BOM –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Excel
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ CSV:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö' });
    }
});

// Metals prices API endpoints
app.get('/api/metals-prices/:date', async (req, res) => {
    try {
        const { date } = req.params;
        const { metal = 'gold' } = req.query;
        const priceData = await metalsService.getMetalPriceFromDB(date, metal);
        
        if (!priceData) {
            return res.status(404).json({ error: '–î–∞–Ω–Ω—ã–µ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' });
        }
        
        res.json(priceData);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω –Ω–∞ –º–µ—Ç–∞–ª–ª—ã:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω –Ω–∞ –º–µ—Ç–∞–ª–ª—ã' });
    }
});

app.get('/api/metals-prices', async (req, res) => {
    try {
        const { start_date, end_date, limit = 100 } = req.query;
        
        let query = `
            SELECT date, usd_rate, gold_price, silver_price, platinum_price, palladium_price
            FROM metals_prices
            WHERE 1=1
        `;
        const params = [];
        let paramIndex = 1;
        
        if (start_date) {
            query += ` AND date >= $${paramIndex}`;
            params.push(start_date);
            paramIndex++;
        }
        
        if (end_date) {
            query += ` AND date <= $${paramIndex}`;
            params.push(end_date);
            paramIndex++;
        }
        
        query += ` ORDER BY date DESC LIMIT $${paramIndex}`;
        params.push(parseInt(limit));
        
        const result = await pool.query(query, params);
        res.json(result.rows);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ü–µ–Ω –Ω–∞ –º–µ—Ç–∞–ª–ª—ã:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ü–µ–Ω –Ω–∞ –º–µ—Ç–∞–ª–ª—ã' });
    }
});

app.get('/api/numismatic-premium/:lotId', async (req, res) => {
    try {
        const { lotId } = req.params;
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ª–æ—Ç–∞
        const lotQuery = `
            SELECT id, lot_number, auction_number, coin_description, 
                   winning_bid, auction_end_date, metal, weight
            FROM auction_lots 
            WHERE id = $1
        `;
        
        const lotResult = await pool.query(lotQuery, [lotId]);
        
        if (lotResult.rows.length === 0) {
            return res.status(404).json({ error: '–õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        const lot = lotResult.rows[0];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
        if (!lot.winning_bid || !lot.metal || !lot.weight || !lot.auction_end_date) {
            return res.status(400).json({ 
                error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω—É–º–∏–∑–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Ü–µ–Ω–∫–∏',
                missing: {
                    winning_bid: !lot.winning_bid,
                    metal: !lot.metal,
                    weight: !lot.weight,
                    auction_end_date: !lot.auction_end_date
                }
            });
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –º–µ—Ç–∞–ª–ª–∞ –Ω–∞ –¥–∞—Ç—É –∞—É–∫—Ü–∏–æ–Ω–∞ (—Ç–æ–ª—å–∫–æ –¥–∞—Ç–∞, –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏)
        const metalType = lot.metal.toLowerCase() + '_price';
        const auctionDate = new Date(lot.auction_end_date).toISOString().split('T')[0]; // YYYY-MM-DD
        const priceData = await metalsService.getMetalPriceFromDB(auctionDate, metalType);
        
        if (!priceData) {
            return res.status(404).json({ 
                error: '–¶–µ–Ω–∞ –º–µ—Ç–∞–ª–ª–∞ –Ω–∞ –¥–∞—Ç—É –∞—É–∫—Ü–∏–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
                auction_date: lot.auction_end_date
            });
        }
        
        // –í—ã—á–∏—Å–ª—è–µ–º –Ω—É–º–∏–∑–º–∞—Ç–∏—á–µ—Å–∫—É—é –Ω–∞—Ü–µ–Ω–∫—É
        const premium = metalsService.calculateNumismaticPremium(
            lot.winning_bid,
            lot.weight,
            priceData.price,
            priceData.usdRate
        );
        
        res.json({
            lot: {
                id: lot.id,
                lot_number: lot.lot_number,
                auction_number: lot.auction_number,
                metal: lot.metal,
                weight: lot.weight,
                winning_bid: lot.winning_bid,
                auction_end_date: lot.auction_end_date
            },
            metal_price: {
                price_per_gram: priceData.price,
                usd_rate: priceData.usdRate,
                date: lot.auction_end_date
            },
            numismatic_premium: premium
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –Ω—É–º–∏–∑–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Ü–µ–Ω–∫–∏:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –Ω—É–º–∏–∑–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Ü–µ–Ω–∫–∏' });
    }
});

// API —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω—É–º–∏–∑–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Ü–µ–Ω–∫–∏ –Ω–∞ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
app.get('/api/numismatic-premium-current/:lotId', async (req, res) => {
    try {
        const { lotId } = req.params;
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ª–æ—Ç–∞
        const lotQuery = `
            SELECT id, lot_number, auction_number, coin_description, 
                   winning_bid, auction_end_date, metal, weight
            FROM auction_lots 
            WHERE id = $1
        `;
        
        const lotResult = await pool.query(lotQuery, [lotId]);
        
        if (lotResult.rows.length === 0) {
            return res.status(404).json({ error: '–õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        const lot = lotResult.rows[0];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
        if (!lot.winning_bid || !lot.metal || !lot.weight) {
            return res.status(400).json({ 
                error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω—É–º–∏–∑–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Ü–µ–Ω–∫–∏',
                missing: {
                    winning_bid: !lot.winning_bid,
                    metal: !lot.metal,
                    weight: !lot.weight
                }
            });
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –º–µ—Ç–∞–ª–ª–∞ –Ω–∞ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É (—Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –≤—á–µ—Ä–∞)
        const metalType = lot.metal.toLowerCase() + '_price';
        const today = new Date().toISOString().split('T')[0];
        const yesterday = new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString().split('T')[0];
        
        let priceData = await metalsService.getMetalPriceFromDB(today, metalType);
        let priceDate = today;
        
        // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, –ø—Ä–æ–±—É–µ–º –≤—á–µ—Ä–∞
        if (!priceData) {
            priceData = await metalsService.getMetalPriceFromDB(yesterday, metalType);
            priceDate = yesterday;
        }
        
        if (!priceData) {
            return res.status(404).json({ 
                error: '–¶–µ–Ω–∞ –º–µ—Ç–∞–ª–ª–∞ –Ω–∞ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
                tried_dates: [today, yesterday]
            });
        }
        
        // –í—ã—á–∏—Å–ª—è–µ–º –Ω—É–º–∏–∑–º–∞—Ç–∏—á–µ—Å–∫—É—é –Ω–∞—Ü–µ–Ω–∫—É
        const premium = metalsService.calculateNumismaticPremium(
            lot.winning_bid,
            lot.weight,
            priceData.price,
            priceData.usdRate
        );
        
        res.json({
            lot: {
                id: lot.id,
                lot_number: lot.lot_number,
                auction_number: lot.auction_number,
                metal: lot.metal,
                weight: lot.weight,
                winning_bid: lot.winning_bid,
                auction_end_date: lot.auction_end_date
            },
            metal_price: {
                price_per_gram: priceData.price,
                usd_rate: priceData.usdRate,
                date: priceDate
            },
            numismatic_premium: premium
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –Ω—É–º–∏–∑–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Ü–µ–Ω–∫–∏ –Ω–∞ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –Ω—É–º–∏–∑–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Ü–µ–Ω–∫–∏ –Ω–∞ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É' });
    }
});

// ==================== API –î–õ–Ø –ü–ê–†–°–ï–†–ê –ö–ê–¢–ê–õ–û–ì–ê ====================

// API –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞
app.post('/api/admin/start-catalog-parser', async (req, res) => {
    try {
        const { exec } = require('child_process');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ PM2
        exec('pm2 --version', (pm2Error, pm2Stdout, pm2Stderr) => {
            if (pm2Error) {
                // PM2 –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ node
                console.log('PM2 –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ node');
                const child = exec('node catalog-parser.js --resume', (error, stdout, stderr) => {
                    if (error) {
                        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ —á–µ—Ä–µ–∑ node:', error);
                        res.status(500).json({ 
                            success: false,
                            error: '–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞: ' + error.message 
                        });
                        return;
                    }
                    
                    console.log('Node stdout:', stdout);
                    if (stderr) console.log('Node stderr:', stderr);
                    
                    res.json({
                        success: true,
                        message: '–ü–∞—Ä—Å–µ—Ä –∫–∞—Ç–∞–ª–æ–≥–∞ –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ node',
                        output: stdout
                    });
                });
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å—Ä–∞–∑—É, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–µ
                res.json({
                    success: true,
                    message: '–ü–∞—Ä—Å–µ—Ä –∫–∞—Ç–∞–ª–æ–≥–∞ –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ —á–µ—Ä–µ–∑ node',
                    pid: child.pid
                });
            } else {
                // PM2 –¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                console.log('PM2 –¥–æ—Å—Ç—É–ø–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä —á–µ—Ä–µ–∑ PM2');
                exec('pm2 start catalog-parser.js --name "catalog-parser" -- --resume', (error, stdout, stderr) => {
                    if (error) {
                        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ —á–µ—Ä–µ–∑ PM2:', error);
                        res.status(500).json({ 
                            success: false,
                            error: '–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ —á–µ—Ä–µ–∑ PM2: ' + error.message 
                        });
                        return;
                    }
                    
                    console.log('PM2 stdout:', stdout);
                    if (stderr) console.log('PM2 stderr:', stderr);
                    
                    res.json({
                        success: true,
                        message: '–ü–∞—Ä—Å–µ—Ä –∫–∞—Ç–∞–ª–æ–≥–∞ –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ PM2',
                        output: stdout
                    });
                });
            }
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞' });
    }
});

// API –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞
app.post('/api/admin/stop-catalog-parser', async (req, res) => {
    try {
        const { exec } = require('child_process');
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º PM2 –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞
        exec('pm2 stop catalog-parser', (error, stdout, stderr) => {
            if (error) {
                console.error('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞ —á–µ—Ä–µ–∑ PM2:', error);
                res.status(500).json({ 
                    success: false,
                    error: '–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ —á–µ—Ä–µ–∑ PM2: ' + error.message 
                });
                return;
            }
            
            console.log('PM2 stop stdout:', stdout);
            if (stderr) console.log('PM2 stop stderr:', stderr);
            
            res.json({
                success: true,
                message: '–ü–∞—Ä—Å–µ—Ä –∫–∞—Ç–∞–ª–æ–≥–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ PM2',
                output: stdout
            });
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞' });
    }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—Ä—Å–µ—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞
app.get('/api/admin/catalog-parser-status', async (req, res) => {
    try {
        const { exec } = require('child_process');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ PM2
        exec('pm2 jlist', (error, stdout, stderr) => {
            if (error) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ PM2:', error);
                res.status(500).json({ 
                    status: 'error',
                    message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ PM2',
                    error: error.message
                });
                return;
            }
            
            try {
                const pm2Processes = JSON.parse(stdout);
                const catalogParser = pm2Processes.find(proc => proc.name === 'catalog-parser');
                
                if (catalogParser) {
                    res.json({
                        status: catalogParser.pm2_env.status,
                        message: `–ü–∞—Ä—Å–µ—Ä –∫–∞—Ç–∞–ª–æ–≥–∞ ${catalogParser.pm2_env.status} (PM2 ID: ${catalogParser.pm_id})`,
                        pid: catalogParser.pid,
                        startTime: new Date(catalogParser.pm2_env.created_at).toISOString(),
                        uptime: catalogParser.pm2_env.uptime,
                        memory: catalogParser.monit.memory,
                        cpu: catalogParser.monit.cpu
                    });
                } else {
                    res.json({
                        status: 'stopped',
                        message: '–ü–∞—Ä—Å–µ—Ä –∫–∞—Ç–∞–ª–æ–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PM2'
                    });
                }
            } catch (parseError) {
                console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ PM2 JSON:', parseError);
                res.status(500).json({ 
                    status: 'error',
                    message: '–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç–∞—Ç—É—Å–∞ PM2',
                    error: parseError.message
                });
            }
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—Ä—Å–µ—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—Ä—Å–µ—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞' });
    }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ –ø–∞—Ä—Å–µ—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞
app.get('/api/admin/catalog-parser-logs', async (req, res) => {
    try {
        const fs = require('fs');
        const path = require('path');
        
        // –ò—â–µ–º —Ñ–∞–π–ª—ã –ª–æ–≥–æ–≤ –ø–∞—Ä—Å–µ—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ª–æ–≥–∞–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)
        const logFiles = [
            'catalog-activity.log',
            'catalog-errors.log',
            'catalog-progress.json'
        ];
        
        let logs = [];
        
        for (const logFile of logFiles) {
            if (fs.existsSync(logFile)) {
                try {
                    const content = fs.readFileSync(logFile, 'utf8');
                    if (logFile.endsWith('.json')) {
                        // JSON —Ñ–∞–π–ª - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                        const jsonData = JSON.parse(content);
                        logs.push({
                            file: logFile,
                            type: 'json',
                            data: jsonData
                        });
                    } else {
                        // –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
                        const lines = content.split('\n').slice(-50); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫
                        logs.push({
                            file: logFile,
                            type: 'text',
                            lines: lines
                        });
                    }
                } catch (e) {
                    logs.push({
                        file: logFile,
                        type: 'error',
                        error: '–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞'
                    });
                }
            }
        }
        
        res.json({ logs });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ –ø–∞—Ä—Å–µ—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ –ø–∞—Ä—Å–µ—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞' });
    }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–∞—Ä—Å–µ—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞
app.get('/api/admin/catalog-parser-progress', async (req, res) => {
    try {
        const fs = require('fs');
        const { Pool } = require('pg');
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const pool = new Pool({
            user: 'postgres',
            host: 'localhost',
            database: 'wolmar',
            password: 'postgres',
            port: 5432,
        });
        
        let progressData = null;
        let totalLots = 0;
        
        // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        if (fs.existsSync('catalog-progress.json')) {
            progressData = JSON.parse(fs.readFileSync('catalog-progress.json', 'utf8'));
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ—Ç–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞—Ç–∞–ª–æ–≥–∞
        try {
            const client = await pool.connect();
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å, —Å—á–∏—Ç–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ª–æ—Ç—ã
            if (progressData && progressData.lastProcessedId > 0) {
                const result = await client.query(`
                    SELECT COUNT(*) as total
                    FROM auction_lots 
                    WHERE id > ${progressData.lastProcessedId}
                    AND coin_description IS NOT NULL 
                    AND coin_description != ''
                `);
                totalLots = parseInt(result.rows[0].total);
            } else {
                // –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞, —Å—á–∏—Ç–∞–µ–º –≤—Å–µ –ª–æ—Ç—ã
                const result = await client.query(`
                    SELECT COUNT(*) as total
                    FROM auction_lots 
                    WHERE coin_description IS NOT NULL 
                    AND coin_description != ''
                `);
                totalLots = parseInt(result.rows[0].total);
            }
            client.release();
        } catch (dbError) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª–æ—Ç–æ–≤:', dbError);
            // –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –ë–î, –∏—Å–ø–æ–ª—å–∑—É–µ–º 0
            totalLots = 0;
        }
        
        if (progressData) {
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ—Ç–æ–≤ –∫ –¥–∞–Ω–Ω—ã–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            progressData.totalLots = totalLots;
            res.json({
                success: true,
                progress: progressData
            });
        } else {
            res.json({
                success: false,
                message: '–§–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω',
                totalLots: totalLots
            });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–∞—Ä—Å–µ—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–∞—Ä—Å–µ—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞' });
    }
});

// API –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–∞—Ä—Å–µ—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞
app.post('/api/admin/clear-catalog-progress', async (req, res) => {
    try {
        const fs = require('fs');
        
        if (fs.existsSync('catalog-progress.json')) {
            fs.unlinkSync('catalog-progress.json');
        }
        
        res.json({
            success: true,
            message: '–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–∞—Ä—Å–µ—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω'
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–∞—Ä—Å–µ—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–∞—Ä—Å–µ—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞' });
    }
});

// ==================== CATALOG API ====================

// Serve catalog static files
app.use('/catalog', express.static(path.join(__dirname, 'catalog-public'), {
    setHeaders: (res, path) => {
        res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate, max-age=0');
        res.setHeader('Pragma', 'no-cache');
        res.setHeader('Expires', '0');
    }
}));

// Serve catalog images
app.use('/catalog/images', express.static('catalog-images'));

// Catalog main page
app.get('/catalog', (req, res) => {
    res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate, max-age=0');
    res.setHeader('Pragma', 'no-cache');
    res.setHeader('Expires', '0');
    res.setHeader('Last-Modified', new Date().toUTCString());
    res.sendFile(path.join(__dirname, 'catalog-public', 'index.html'));
});

// Catalog statistics
app.get('/api/catalog/stats', async (req, res) => {
    try {
        const result = await pool.query(`
            SELECT 
                COUNT(*) as total_coins,
                COUNT(DISTINCT country) as countries,
                COUNT(DISTINCT year) as years,
                COUNT(DISTINCT metal) as metals
            FROM coin_catalog
        `);
        res.json(result.rows[0]);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞' });
    }
});

// Get countries
app.get('/api/catalog/countries', async (req, res) => {
    try {
        console.log('üîç –ó–∞–ø—Ä–æ—Å —Å—Ç—Ä–∞–Ω –∫–∞—Ç–∞–ª–æ–≥–∞');
        const result = await pool.query(`
            SELECT DISTINCT country, COUNT(*) as count
            FROM coin_catalog 
            WHERE country IS NOT NULL AND country != ''
            GROUP BY country 
            ORDER BY count DESC, country
        `);
        console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ç—Ä–∞–Ω:', result.rows);
        res.json(result.rows);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω' });
    }
});

// Get metals
app.get('/api/catalog/metals', async (req, res) => {
    try {
        console.log('üîç –ó–∞–ø—Ä–æ—Å –º–µ—Ç–∞–ª–ª–æ–≤ –∫–∞—Ç–∞–ª–æ–≥–∞');
        const result = await pool.query(`
            SELECT DISTINCT metal, COUNT(*) as count
            FROM coin_catalog 
            WHERE metal IS NOT NULL AND metal != ''
            GROUP BY metal 
            ORDER BY count DESC, metal
        `);
        console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –º–µ—Ç–∞–ª–ª–æ–≤:', result.rows);
        res.json(result.rows);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–ª–ª–æ–≤:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–ª–ª–æ–≤' });
    }
});

// Get rarities
app.get('/api/catalog/rarities', async (req, res) => {
    try {
        const result = await pool.query(`
            SELECT DISTINCT rarity, COUNT(*) as count
            FROM coin_catalog 
            WHERE rarity IS NOT NULL AND rarity != ''
            GROUP BY rarity 
            ORDER BY count DESC, rarity
        `);
        res.json(result.rows);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–¥–∫–æ—Å—Ç–µ–π:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–¥–∫–æ—Å—Ç–µ–π' });
    }
});

// Get conditions
app.get('/api/catalog/conditions', async (req, res) => {
    try {
        const result = await pool.query(`
            SELECT DISTINCT condition, COUNT(*) as count
            FROM coin_catalog 
            WHERE condition IS NOT NULL AND condition != ''
            GROUP BY condition 
            ORDER BY count DESC, condition
        `);
        res.json(result.rows);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π' });
    }
});

// Get mints
app.get('/api/catalog/mints', async (req, res) => {
    try {
        const result = await pool.query(`
            SELECT DISTINCT mint, COUNT(*) as count
            FROM coin_catalog 
            WHERE mint IS NOT NULL AND mint != ''
            GROUP BY mint 
            ORDER BY count DESC, mint
        `);
        res.json(result.rows);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–Ω–µ—Ç–Ω—ã—Ö –¥–≤–æ—Ä–æ–≤:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–Ω–µ—Ç–Ω—ã—Ö –¥–≤–æ—Ä–æ–≤' });
    }
});

// Get all filters at once
app.get('/api/catalog/filters', async (req, res) => {
    try {
        console.log('üîç –ó–∞–ø—Ä–æ—Å –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫–∞—Ç–∞–ª–æ–≥–∞');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        const [countriesResult, metalsResult, raritiesResult, conditionsResult, mintsResult] = await Promise.all([
            pool.query(`
                SELECT DISTINCT country, COUNT(*) as count
                FROM coin_catalog 
                WHERE country IS NOT NULL AND country != ''
                GROUP BY country 
                ORDER BY count DESC, country
            `),
            pool.query(`
                SELECT DISTINCT metal, COUNT(*) as count
                FROM coin_catalog 
                WHERE metal IS NOT NULL AND metal != ''
                GROUP BY metal 
                ORDER BY count DESC, metal
            `),
            pool.query(`
                SELECT DISTINCT rarity, COUNT(*) as count
                FROM coin_catalog 
                WHERE rarity IS NOT NULL AND rarity != ''
                GROUP BY rarity 
                ORDER BY count DESC, rarity
            `),
            pool.query(`
                SELECT DISTINCT condition, COUNT(*) as count
                FROM coin_catalog 
                WHERE condition IS NOT NULL AND condition != ''
                GROUP BY condition 
                ORDER BY count DESC, condition
            `),
            pool.query(`
                SELECT DISTINCT mint, COUNT(*) as count
                FROM coin_catalog 
                WHERE mint IS NOT NULL AND mint != ''
                GROUP BY mint 
                ORDER BY count DESC, mint
            `)
        ]);

        const result = {
            countries: countriesResult.rows.map(row => row.country),
            metals: metalsResult.rows.map(row => row.metal),
            rarities: raritiesResult.rows.map(row => row.rarity),
            conditions: conditionsResult.rows.map(row => row.condition),
            mints: mintsResult.rows.map(row => row.mint)
        };

        console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤:', result);
        res.json(result);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤' });
    }
});

// Get coins with filters and pagination
app.get('/api/catalog/coins', async (req, res) => {
    try {
        const { 
            page = 1, 
            limit = 20, 
            country, 
            year, 
            metal, 
            search,
            sortBy = 'id',
            sortOrder = 'DESC'
        } = req.query;

        let whereConditions = [];
        let queryParams = [];
        let paramIndex = 1;

        if (country) {
            whereConditions.push(`country = $${paramIndex++}`);
            queryParams.push(country);
        }

        if (year) {
            whereConditions.push(`year = $${paramIndex++}`);
            queryParams.push(parseInt(year));
        }

        if (metal) {
            whereConditions.push(`metal = $${paramIndex++}`);
            queryParams.push(metal);
        }

        if (search) {
            whereConditions.push(`(coin_name ILIKE $${paramIndex} OR denomination ILIKE $${paramIndex})`);
            queryParams.push(`%${search}%`);
            paramIndex++;
        }

        const whereClause = whereConditions.length > 0 ? `WHERE ${whereConditions.join(' AND ')}` : '';
        
        const offset = (parseInt(page) - 1) * parseInt(limit);
        
        const countQuery = `SELECT COUNT(*) FROM coin_catalog ${whereClause}`;
        const countResult = await pool.query(countQuery, queryParams);
        const total = parseInt(countResult.rows[0].count);

        const dataQuery = `
            SELECT 
                id, coin_name, denomination, year, metal, country,
                coin_weight, fineness, pure_metal_weight,
                bitkin_info, uzdenikov_info, ilyin_info, petrov_info,
                avers_image_data, revers_image_data
            FROM coin_catalog 
            ${whereClause}
            ORDER BY ${sortBy} ${sortOrder}
            LIMIT $${paramIndex++} OFFSET $${paramIndex++}
        `;
        
        queryParams.push(parseInt(limit), offset);
        const result = await pool.query(dataQuery, queryParams);

        res.json({
            coins: result.rows,
            pagination: {
                page: parseInt(page),
                limit: parseInt(limit),
                total,
                pages: Math.ceil(total / parseInt(limit))
            }
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–Ω–µ—Ç:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–Ω–µ—Ç' });
    }
});

// Get single coin details
app.get('/api/catalog/coins/:id', async (req, res) => {
    try {
        const { id } = req.params;
        const result = await pool.query(`
            SELECT * FROM coin_catalog WHERE id = $1
        `, [id]);
        
        if (result.rows.length === 0) {
            return res.status(404).json({ error: '–ú–æ–Ω–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        }
        
        res.json(result.rows[0]);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–Ω–µ—Ç—ã:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–Ω–µ—Ç—ã' });
    }
});

// Get coin image
app.get('/api/catalog/coins/:coin_id/image/:type', async (req, res) => {
    try {
        const { coin_id, type } = req.params;
        
        if (!['avers', 'revers'].includes(type)) {
            return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è' });
        }
        
        const imageField = type === 'avers' ? 'avers_image_data' : 'revers_image_data';
        const result = await pool.query(`
            SELECT ${imageField} FROM coin_catalog WHERE id = $1
        `, [coin_id]);
        
        if (result.rows.length === 0 || !result.rows[0][imageField]) {
            return res.status(404).json({ error: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
        }
        
        const imageData = result.rows[0][imageField];
        res.setHeader('Content-Type', 'image/jpeg');
        res.send(imageData);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è' });
    }
});

// ==================== AUTH API ====================

// User registration
app.post('/api/auth/register', async (req, res) => {
    try {
        const { username, email, password, fullName } = req.body;
        const result = await authService.register(username, password, email, fullName);
        res.json(result);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
        res.status(400).json({ error: error.message });
    }
});

// User login
app.post('/api/auth/login', async (req, res) => {
    try {
        console.log('üîê –ó–∞–ø—Ä–æ—Å –≤—Ö–æ–¥–∞:', req.body);
        const { username, password } = req.body;
        console.log('üîê –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—Ö–æ–¥–∞:', { username, password: password ? '***' : 'undefined' });
        
        const result = await authService.login(username, password);
        console.log('üîê –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—Ö–æ–¥–∞:', result);
        res.json(result);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
        res.status(401).json({ error: error.message });
    }
});

// Get user profile
app.get('/api/auth/profile', authenticateToken, async (req, res) => {
    try {
        res.json({ user: req.user });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è' });
    }
});

// ==================== COLLECTION API ====================

// Get user collection
app.get('/api/collection', authenticateToken, async (req, res) => {
    try {
        console.log('üìö –ó–∞–ø—Ä–æ—Å –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', req.user);
        console.log('üÜî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', req.user.id);
        const { page = 1, limit = 20, ...filters } = req.query;
        const result = await collectionService.getUserCollection(
            req.user.id, 
            parseInt(page), 
            parseInt(limit), 
            filters
        );
        console.log('üìö –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–ª–ª–µ–∫—Ü–∏–∏:', result);
        res.json(result);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏' });
    }
});

// Add coin to collection
app.post('/api/collection/add', authenticateToken, async (req, res) => {
    try {
        const { coinId, notes, conditionRating, purchasePrice, purchaseDate } = req.body;

        if (!coinId) {
            return res.status(400).json({ error: 'ID –º–æ–Ω–µ—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
        }

        const result = await collectionService.addToCollection(
            req.user.id,
            parseInt(coinId),
            notes,
            conditionRating,
            purchasePrice,
            purchaseDate
        );
        
        res.json(result);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é:', error);
        res.status(400).json({ error: error.message });
    }
});

// Remove coin from collection
app.delete('/api/collection/remove', authenticateToken, async (req, res) => {
    try {
        const { coinId } = req.body;

        if (!coinId) {
            return res.status(400).json({ error: 'ID –º–æ–Ω–µ—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
        }

        await collectionService.removeFromCollection(req.user.id, parseInt(coinId));
        res.json({ success: true });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:', error);
        res.status(400).json({ error: error.message });
    }
});

// Update collection item
app.put('/api/collection/update', authenticateToken, async (req, res) => {
    try {
        const { coinId, ...updates } = req.body;

        if (!coinId) {
            return res.status(400).json({ error: 'ID –º–æ–Ω–µ—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
        }

        const result = await collectionService.updateCollectionItem(
            req.user.id,
            parseInt(coinId),
            updates
        );
        
        res.json(result);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏:', error);
        res.status(400).json({ error: error.message });
    }
});

// Check if coin is in collection
app.get('/api/collection/check/:coinId', authenticateToken, async (req, res) => {
    try {
        const { coinId } = req.params;
        const isInCollection = await collectionService.isInCollection(req.user.id, parseInt(coinId));
        res.json({ isInCollection });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏' });
    }
});

// Get collection stats
app.get('/api/collection/stats', authenticateToken, async (req, res) => {
    try {
        const stats = await collectionService.getCollectionStats(req.user.id);
        res.json(stats);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏' });
    }
});

// Recalculate collection prices
app.post('/api/collection/recalculate-prices', authenticateToken, async (req, res) => {
    try {
        console.log(`üîÑ –ü–µ—Ä–µ—Å—á–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã—Ö —Ü–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${req.user.id}`);
        
        if (!collectionPriceService.calibrationTable) {
            await collectionPriceService.init();
        }
        
        const result = await collectionPriceService.recalculateUserCollectionPrices(req.user.id);
        res.json(result);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã—Ö —Ü–µ–Ω:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã—Ö —Ü–µ–Ω' });
    }
});

// Get collection total value
app.get('/api/collection/total-value', authenticateToken, async (req, res) => {
    try {
        const totalValue = await collectionPriceService.getCollectionTotalValue(req.user.id);
        res.json(totalValue);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É–º–º–∞—Ä–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É–º–º–∞—Ä–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏' });
    }
});

// Update watchlist lot data (bids and predictions)
app.post('/api/watchlist/update-lots', authenticateToken, async (req, res) => {
    try {
        console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ª–æ—Ç–æ–≤ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${req.user.id}`);
        
        const { lotIds } = req.body;
        if (!lotIds || !Array.isArray(lotIds)) {
            return res.status(400).json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –º–∞—Å—Å–∏–≤ ID –ª–æ—Ç–æ–≤' });
        }
        
        console.log(`üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${lotIds.length} –ª–æ—Ç–æ–≤ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ`);
        
        const results = {
            updatedBids: 0,
            updatedPredictions: 0,
            errors: []
        };
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞–≤–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ª–æ—Ç–∞
        for (const lotId of lotIds) {
            try {
                // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ—Ç–µ
                const lotResult = await pool.query(`
                    SELECT lot_number, auction_number, source_url 
                    FROM auction_lots 
                    WHERE id = $1
                `, [lotId]);
                
                if (lotResult.rows.length === 0) {
                    results.errors.push(`–õ–æ—Ç ${lotId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                    continue;
                }
                
                const lot = lotResult.rows[0];
                
                // –ü–∞—Ä—Å–∏–º —Å—Ç–∞–≤–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ª–æ—Ç–∞
                const bidData = await parseSingleLotBid(lot.source_url);
                if (bidData) {
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞–≤–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    const updateResult = await pool.query(`
                        UPDATE auction_lots 
                        SET winning_bid = $1, 
                            winner_login = $2
                        WHERE id = $3
                    `, [bidData.winningBid, bidData.winnerLogin, lotId]);
                    
                    if (updateResult.rowCount > 0) {
                        results.updatedBids++;
                        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞–≤–∫–∞ –¥–ª—è –ª–æ—Ç–∞ ${lot.lot_number}: ${bidData.winningBid}‚ÇΩ (${bidData.winnerLogin})`);
                    } else {
                        results.errors.push(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ª–æ—Ç ${lot.lot_number}`);
                    }
                } else {
                    results.errors.push(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–æ—Ç–∞ ${lot.lot_number}`);
                }
                
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ—Ç–∞ ${lotId}:`, error);
                results.errors.push(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ—Ç–∞ ${lotId}: ${error.message}`);
            }
        }
        
        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ —Ü–µ–Ω—ã –¥–ª—è –ª–æ—Ç–æ–≤ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        try {
            if (!collectionPriceService.calibrationTable) {
                await collectionPriceService.init();
            }
            
            // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ª–æ—Ç–æ–≤ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
            const predictionResult = await collectionPriceService.recalculateLotPredictions(lotIds);
            results.updatedPredictions = predictionResult.updated || 0;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã—Ö —Ü–µ–Ω:', error);
            results.errors.push(`–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: ${error.message}`);
        }
        
        res.json({
            success: true,
            message: '–î–∞–Ω–Ω—ã–µ –ª–æ—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã',
            results
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ—Ç–æ–≤ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ—Ç–æ–≤ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ' });
    }
});

// Get coin predicted price
app.get('/api/collection/coin/:coinId/predicted-price', authenticateToken, async (req, res) => {
    try {
        const { coinId } = req.params;
        const predictedPrice = await collectionPriceService.getCoinPredictedPrice(req.user.id, parseInt(coinId));
        
        if (!predictedPrice) {
            return res.status(404).json({ error: '–ü—Ä–æ–≥–Ω–æ–∑–Ω–∞—è —Ü–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        }
        
        res.json(predictedPrice);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–Ω–æ–π —Ü–µ–Ω—ã:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–Ω–æ–π —Ü–µ–Ω—ã' });
    }
});

// Serve React app
app.get('*', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// Error handling middleware
app.use((error, req, res, next) => {
    console.error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
});

// Start server
app.listen(PORT, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üìä API –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${PORT}/api`);
    console.log(`üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:${PORT}`);
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ª–æ—Ç–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞ (–¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏)
app.get('/api/current-auction-all', async (req, res) => {
    try {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞
        const currentAuctionNumber = await getCurrentAuctionNumber(pool);
        
        // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –∞—É–∫—Ü–∏–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if (!currentAuctionNumber) {
            return res.json({
                currentAuctionNumber: null,
                lots: [],
                total: 0
            });
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –í–°–ï –ª–æ—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞ (–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)
        const query = `
            SELECT 
                id, lot_number, auction_number, coin_description,
                avers_image_url, revers_image_url, winner_login, 
                winning_bid, auction_end_date, bids_count, lot_status,
                year, letters, metal, condition, weight, parsed_at, source_url
            FROM auction_lots 
            WHERE auction_number = $1
            ORDER BY lot_number::int ASC
        `;
        
        const result = await pool.query(query, [currentAuctionNumber]);
        
        res.json({
            currentAuctionNumber: currentAuctionNumber,
            lots: result.rows,
            total: result.rows.length
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ª–æ—Ç–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ—Ç–æ–≤' });
    }
});

// ==================== –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–ò–í–ù–´–ï –ú–ê–†–®–†–£–¢–´ ====================

// API –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞
app.post('/api/admin/start-main-parser', async (req, res) => {
    try {
        const { auctionNumber, mode, resumeLot } = req.body;
        
        if (!auctionNumber) {
            return res.status(400).json({ error: '–ù–æ–º–µ—Ä –∞—É–∫—Ü–∏–æ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
        }

        const result = await adminFunctions.startMainParser(auctionNumber, mode, resumeLot);
        res.json(result);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞:', error);
        res.status(500).json({ error: error.message });
    }
});

// API –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞
app.post('/api/admin/stop-main-parser', async (req, res) => {
    try {
        const result = await adminFunctions.stopMainParser();
        res.json(result);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞:', error);
        res.status(500).json({ error: error.message });
    }
});

// API –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
app.post('/api/admin/start-update-parser', async (req, res) => {
    try {
        const { auctionNumber } = req.body;
        
        if (!auctionNumber) {
            return res.status(400).json({ error: '–ù–æ–º–µ—Ä –∞—É–∫—Ü–∏–æ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
        }

        const result = await adminFunctions.startUpdateParser(auctionNumber);
        res.json(result);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:', error);
        res.status(500).json({ error: error.message });
    }
});

// API –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
app.post('/api/admin/stop-update-parser', async (req, res) => {
    try {
        const result = await adminFunctions.stopUpdateParser();
        res.json(result);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:', error);
        res.status(500).json({ error: error.message });
    }
});

// API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
app.post('/api/admin/schedule', async (req, res) => {
    try {
        const { time, auctionNumber } = req.body;
        
        if (!time || !auctionNumber) {
            return res.status(400).json({ error: '–í—Ä–µ–º—è –∏ –Ω–æ–º–µ—Ä –∞—É–∫—Ü–∏–æ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
        }

        const result = adminFunctions.setSchedule(time, auctionNumber);
        res.json(result);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', error);
        res.status(500).json({ error: error.message });
    }
});

// API –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
app.delete('/api/admin/schedule', async (req, res) => {
    try {
        const result = adminFunctions.deleteSchedule();
        res.json(result);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', error);
        res.status(500).json({ error: error.message });
    }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤
app.get('/api/admin/logs/:type', (req, res) => {
    try {
        const { type } = req.params;
        const logs = adminFunctions.readLogs(type, 100);
        res.json({ logs });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤' });
    }
});

// API –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤
app.post('/api/admin/logs/clear', (req, res) => {
    try {
        adminFunctions.clearLogs('main');
        adminFunctions.clearLogs('update');
        adminFunctions.clearLogs('predictions');
        
        // –¢–∞–∫–∂–µ –æ—á–∏—â–∞–µ–º –ª–æ–≥–∏ –ø–∞—Ä—Å–µ—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞
        const fs = require('fs');
        const path = require('path');
        
        // –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª—ã –ª–æ–≥–æ–≤ –ø–∞—Ä—Å–µ—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞
        const catalogLogs = [
            'catalog-activity.log',
            'catalog-errors.log'
        ];
        
        for (const logFile of catalogLogs) {
            const logPath = path.join(process.cwd(), logFile);
            if (fs.existsSync(logPath)) {
                fs.writeFileSync(logPath, '');
            }
        }
        
        res.json({ success: true, message: '–í—Å–µ –ª–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã (–≤–∫–ª—é—á–∞—è –ª–æ–≥–∏ –ø–∞—Ä—Å–µ—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞)' });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤' });
    }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–∞—Ä—Å–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
app.get('/api/admin/update-progress/:auctionNumber', (req, res) => {
    try {
        const { auctionNumber } = req.params;
        const progress = adminFunctions.getUpdateProgress(parseInt(auctionNumber));
        res.json({ progress });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞' });
    }
});

// API –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–∞—Ä—Å–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
app.post('/api/admin/clear-update-progress/:auctionNumber', (req, res) => {
    try {
        const { auctionNumber } = req.params;
        const result = adminFunctions.clearUpdateProgress(parseInt(auctionNumber));
        res.json(result);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞' });
    }
});

// API –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
app.post('/api/admin/start-predictions', async (req, res) => {
    try {
        const { auctionNumber, startFromIndex } = req.body;
        
        if (!auctionNumber) {
            return res.status(400).json({ error: '–ù–æ–º–µ—Ä –∞—É–∫—Ü–∏–æ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
        }

        const result = await adminFunctions.startPredictionsGenerator(auctionNumber, startFromIndex);
        res.json(result);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤:', error);
        res.status(500).json({ error: error.message });
    }
});

// API –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
app.post('/api/admin/stop-predictions', async (req, res) => {
    try {
        const result = await adminFunctions.stopPredictionsGenerator();
        res.json(result);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤:', error);
        res.status(500).json({ error: error.message });
    }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
app.get('/api/admin/predictions-progress/:auctionNumber', (req, res) => {
    try {
        const { auctionNumber } = req.params;
        const progress = adminFunctions.getPredictionsProgress(parseInt(auctionNumber));
        res.json({ progress });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤' });
    }
});

// API –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
app.post('/api/admin/clear-predictions-progress/:auctionNumber', (req, res) => {
    try {
        const { auctionNumber } = req.params;
        const result = adminFunctions.clearPredictionsProgress(parseInt(auctionNumber));
        res.json(result);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤' });
    }
});

// Graceful shutdown
process.on('SIGINT', async () => {
    console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...');
    await pool.end();
    process.exit(0);
});

module.exports = app;
