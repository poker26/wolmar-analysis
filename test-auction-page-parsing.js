const puppeteer = require('puppeteer-core');

async function testAuctionPageParsing() {
    const browser = await puppeteer.launch({
        headless: false, // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        executablePath: 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe',
        args: ['--no-sandbox', '--disable-setuid-sandbox',
            '--user-data-dir=/tmp/chrome-temp-9g8ln',
            '--disable-metrics',
            '--disable-metrics-reporting',
            '--disable-background-mode',
            '--disable-background-timer-throttling',
            '--disable-renderer-backgrounding',
            '--disable-backgrounding-occluded-windows',
            '--disable-logging',
            '--disable-gpu-logging',
            '--disable-features=TranslateUI,BlinkGenPropertyTrees,VizDisplayCompositor']
    });
    
    const page = await browser.newPage();
    await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36');
    
    try {
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω–µ 2124
        const auctionUrl = 'https://www.wolmar.ru/auction/2124';
        console.log(`üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${auctionUrl}`);
        
        await page.goto(auctionUrl, { waitUntil: 'networkidle2', timeout: 30000 });
        await new Promise(resolve => setTimeout(resolve, 3000));
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ª–æ—Ç–∞—Ö –∏ –∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö
        const lotsData = await page.evaluate(() => {
            const lots = [];
            
            console.log('üîç –ò—â–µ–º –ª–æ—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ...');
            
            // –ú–µ—Ç–æ–¥ 1: –ò—â–µ–º –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º —Ç–∞–±–ª–∏—Ü—ã
            const tableRows = document.querySelectorAll('table tr, .auction-table tr');
            console.log(`–ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ —Ç–∞–±–ª–∏—Ü—ã: ${tableRows.length}`);
            
            tableRows.forEach((row, index) => {
                try {
                    const lot = {};
                    
                    // –ò—â–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ª–æ—Ç
                    const lotLink = row.querySelector('a[href*="/auction/"]');
                    if (lotLink && lotLink.href) {
                        lot.url = lotLink.href;
                        
                        // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –ª–æ—Ç–∞ –∏–∑ —Å—Å—ã–ª–∫–∏
                        const urlMatch = lotLink.href.match(/\/auction\/\d+\/(\d+)/);
                        if (urlMatch) {
                            lot.lotNumber = urlMatch[1];
                        }
                        
                        // –ò—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —è—á–µ–π–∫–∞—Ö —Å—Ç—Ä–æ–∫–∏
                        const cells = row.querySelectorAll('td');
                        cells.forEach(cell => {
                            const cellText = cell.textContent.trim();
                            // –ò—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–∏–ø–∞ MS, AU, XF, VF, UNC —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ —Ü–∏—Ñ—Ä–∞–º–∏
                            if (cellText.match(/^(MS|AU|XF|VF|UNC|PL)[\s\d\-\+\/]*$/i)) {
                                lot.condition = cellText;
                            }
                        });
                        
                        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ —è—á–µ–π–∫–∞—Ö, –∏—â–µ–º –≤ —Ç–µ–∫—Å—Ç–µ —Å—Ç—Ä–æ–∫–∏
                        if (!lot.condition) {
                            const rowText = row.textContent;
                            const conditionMatch = rowText.match(/(MS|AU|XF|VF|UNC|PL)[\s\d\-\+\/]*/i);
                            if (conditionMatch) {
                                lot.condition = conditionMatch[0].trim();
                            }
                        }
                        
                        if (lot.url && lot.lotNumber && lot.condition) {
                            lots.push(lot);
                        }
                    }
                } catch (error) {
                    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å—Ç—Ä–æ–∫–∏ ${index}:`, error);
                }
            });
            
            // –ú–µ—Ç–æ–¥ 2: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –∫–ª–∞—Å—Å–∞–º
            if (lots.length === 0) {
                console.log('üîç –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞...');
                
                const lotElements = document.querySelectorAll('.lot, .lot-item, [class*="lot"]');
                console.log(`–ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ª–æ—Ç–æ–≤: ${lotElements.length}`);
                
                lotElements.forEach((element, index) => {
                    try {
                        const lot = {};
                        
                        const lotLink = element.querySelector('a[href*="/auction/"]');
                        if (lotLink && lotLink.href) {
                            lot.url = lotLink.href;
                            
                            const urlMatch = lotLink.href.match(/\/auction\/\d+\/(\d+)/);
                            if (urlMatch) {
                                lot.lotNumber = urlMatch[1];
                            }
                            
                            const elementText = element.textContent;
                            const conditionMatch = elementText.match(/(MS|AU|XF|VF|UNC|PL)[\s\d\-\+\/]*/i);
                            if (conditionMatch) {
                                lot.condition = conditionMatch[0].trim();
                            }
                            
                            if (lot.url && lot.lotNumber && lot.condition) {
                                lots.push(lot);
                            }
                        }
                    } catch (error) {
                        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —ç–ª–µ–º–µ–Ω—Ç–∞ ${index}:`, error);
                    }
                });
            }
            
            // –ú–µ—Ç–æ–¥ 3: –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º—É —Ç–µ–∫—Å—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            if (lots.length === 0) {
                console.log('üîç –ü—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º—É —Ç–µ–∫—Å—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
                
                const pageText = document.body.textContent;
                const lotMatches = pageText.match(/\/auction\/\d+\/\d+/g);
                
                if (lotMatches) {
                    console.log(`–ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫ –Ω–∞ –ª–æ—Ç—ã –≤ —Ç–µ–∫—Å—Ç–µ: ${lotMatches.length}`);
                    
                    lotMatches.forEach(match => {
                        const urlMatch = match.match(/\/auction\/(\d+)\/(\d+)/);
                        if (urlMatch) {
                            const auctionNumber = urlMatch[1];
                            const lotNumber = urlMatch[2];
                            
                            // –ò—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä—è–¥–æ–º —Å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π
                            const contextStart = pageText.indexOf(match) - 200;
                            const contextEnd = pageText.indexOf(match) + 200;
                            const context = pageText.substring(Math.max(0, contextStart), contextEnd);
                            
                            const conditionMatch = context.match(/(MS|AU|XF|VF|UNC|PL)[\s\d\-\+\/]*/i);
                            if (conditionMatch) {
                                lots.push({
                                    url: `https://www.wolmar.ru${match}`,
                                    lotNumber: lotNumber,
                                    condition: conditionMatch[0].trim()
                                });
                            }
                        }
                    });
                }
            }
            
            return lots;
        });
        
        console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞:`);
        console.log(`–ù–∞–π–¥–µ–Ω–æ –ª–æ—Ç–æ–≤: ${lotsData.length}`);
        
        if (lotsData.length > 0) {
            console.log(`\nüìã –ü–µ—Ä–≤—ã–µ 10 –ª–æ—Ç–æ–≤:`);
            lotsData.slice(0, 10).forEach((lot, index) => {
                console.log(`${index + 1}. –õ–æ—Ç ${lot.lotNumber}: ${lot.condition} (${lot.url})`);
            });
            
            // –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–π
            const conditions = lotsData.map(lot => lot.condition);
            const uniqueConditions = [...new Set(conditions)];
            console.log(`\nüìä –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (${uniqueConditions.length}):`);
            uniqueConditions.forEach(condition => {
                const count = conditions.filter(c => c === condition).length;
                console.log(`  ${condition}: ${count} –ª–æ—Ç–æ–≤`);
            });
        } else {
            console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –æ –ª–æ—Ç–∞—Ö');
            console.log('üîç –ü—Ä–æ–≤–µ—Ä–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
            
            const pageStructure = await page.evaluate(() => {
                const structure = {
                    tables: document.querySelectorAll('table').length,
                    lotLinks: document.querySelectorAll('a[href*="/auction/"]').length,
                    lotClasses: document.querySelectorAll('[class*="lot"]').length,
                    bodyText: document.body.textContent.length
                };
                
                // –ò—â–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ª–æ—Ç—ã
                const allLotLinks = Array.from(document.querySelectorAll('a[href*="/auction/"]')).map(link => link.href);
                
                return {
                    structure,
                    sampleLotLinks: allLotLinks.slice(0, 5)
                };
            });
            
            console.log('üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', pageStructure.structure);
            console.log('üîó –ü—Ä–∏–º–µ—Ä—ã —Å—Å—ã–ª–æ–∫ –Ω–∞ –ª–æ—Ç—ã:', pageStructure.sampleLotLinks);
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
    } finally {
        await browser.close();
    }
}

testAuctionPageParsing();
