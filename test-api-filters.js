const { Client } = require('pg');
const config = require('./config');

async function testApiFilters() {
    const client = new Client(config.dbConfig);
    
    try {
        await client.connect();
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ—Ç –∂–µ –∑–∞–ø—Ä–æ—Å, —á—Ç–æ –∏ –≤ API /api/filters
        const query = `
            SELECT DISTINCT metal, condition, year, category
            FROM auction_lots 
            WHERE metal IS NOT NULL AND metal != ''
        `;
        
        console.log('üîç –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å API /api/filters...');
        const result = await client.query(query);
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${result.rows.length}`);
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –≤ API
        const metals = [...new Set(result.rows.map(row => row.metal).filter(Boolean))];
        const conditions = [...new Set(result.rows.map(row => row.condition).filter(Boolean))];
        const years = [...new Set(result.rows.map(row => row.year).filter(Boolean))].sort((a, b) => b - a);
        const categories = [...new Set(result.rows.map(row => row.category).filter(Boolean))];
        
        console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏:');
        console.log(`   –ú–µ—Ç–∞–ª–ª—ã: ${metals.length} (${metals.slice(0, 5).join(', ')}...)`);
        console.log(`   –°–æ—Å—Ç–æ—è–Ω–∏—è: ${conditions.length} (${conditions.slice(0, 5).join(', ')}...)`);
        console.log(`   –ì–æ–¥—ã: ${years.length} (${years.slice(0, 5).join(', ')}...)`);
        console.log(`   –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: ${categories.length} (${categories.join(', ')})`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        const categoryRecords = result.rows.filter(row => row.category && row.category.trim() !== '');
        console.log(`\nüîç –ó–∞–ø–∏—Å–µ–π —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ: ${categoryRecords.length}`);
        
        if (categoryRecords.length > 0) {
            console.log('üìù –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏:');
            categoryRecords.slice(0, 3).forEach((row, index) => {
                console.log(`   ${index + 1}. –ú–µ—Ç–∞–ª–ª: ${row.metal}, –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${row.category}`);
            });
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    } finally {
        await client.end();
    }
}

testApiFilters();
