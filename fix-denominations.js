const { Pool } = require('pg');
const config = require('./config');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–æ–º–∏–Ω–∞–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
function fixDenomination(originalDescription, currentDenomination) {
    // –ï—Å–ª–∏ –Ω–æ–º–∏–Ω–∞–ª —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞–ª—é—Ç—É, –Ω–µ –º–µ–Ω—è–µ–º
    if (currentDenomination.includes('—Ä—É–±–ª—å') || 
        currentDenomination.includes('–∫–æ–ø–µ–π–∫–∞') || 
        currentDenomination.includes('–¥–æ–ª–ª–∞—Ä') ||
        currentDenomination.includes('–µ–≤—Ä–æ') ||
        currentDenomination.includes('—Ñ—É–Ω—Ç') ||
        currentDenomination.includes('—Ñ—Ä–∞–Ω–∫') ||
        currentDenomination.includes('–º–∞—Ä–∫–∞') ||
        currentDenomination.includes('–∫—Ä–æ–Ω–∞') ||
        currentDenomination.includes('—Ü–µ–Ω—Ç')) {
        return currentDenomination;
    }
    
    // –ò—â–µ–º –≤–∞–ª—é—Ç—É –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
    const description = originalDescription.toLowerCase();
    
    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–ª—é—Ç—ã
    const currencyPatterns = [
        { pattern: /(\d+(?:\.\d+)?)\s*—Ä—É–±–ª–µ–π?/i, replacement: '$1 —Ä—É–±–ª—å' },
        { pattern: /(\d+(?:\.\d+)?)\s*–∫–æ–ø–µ–µ–∫?/i, replacement: '$1 –∫–æ–ø–µ–π–∫–∞' },
        { pattern: /(\d+(?:\.\d+)?)\s*–¥–æ–ª–ª–∞—Ä–æ–≤?/i, replacement: '$1 –¥–æ–ª–ª–∞—Ä' },
        { pattern: /(\d+(?:\.\d+)?)\s*–µ–≤—Ä–æ/i, replacement: '$1 –µ–≤—Ä–æ' },
        { pattern: /(\d+(?:\.\d+)?)\s*—Ñ—É–Ω—Ç–æ–≤?/i, replacement: '$1 —Ñ—É–Ω—Ç' },
        { pattern: /(\d+(?:\.\d+)?)\s*—Ñ—Ä–∞–Ω–∫–æ–≤?/i, replacement: '$1 —Ñ—Ä–∞–Ω–∫' },
        { pattern: /(\d+(?:\.\d+)?)\s*–º–∞—Ä–æ–∫?/i, replacement: '$1 –º–∞—Ä–∫–∞' },
        { pattern: /(\d+(?:\.\d+)?)\s*–∫—Ä–æ–Ω?/i, replacement: '$1 –∫—Ä–æ–Ω–∞' },
        { pattern: /(\d+(?:\.\d+)?)\s*—Ü–µ–Ω—Ç–æ–≤?/i, replacement: '$1 —Ü–µ–Ω—Ç' },
        { pattern: /(\d+(?:\.\d+)?)\s*–π–µ–Ω/i, replacement: '$1 –π–µ–Ω–∞' },
        { pattern: /(\d+(?:\.\d+)?)\s*–∑–ª–æ—Ç—ã—Ö?/i, replacement: '$1 –∑–ª–æ—Ç—ã–π' },
        { pattern: /(\d+(?:\.\d+)?)\s*–¥–∏–Ω–∞—Ä/i, replacement: '$1 –¥–∏–Ω–∞—Ä' },
        { pattern: /(\d+(?:\.\d+)?)\s*–¥—Ä–∞—Ö–º?/i, replacement: '$1 –¥—Ä–∞—Ö–º–∞' },
        { pattern: /(\d+(?:\.\d+)?)\s*–≥—É–ª—å–¥–µ–Ω/i, replacement: '$1 –≥—É–ª—å–¥–µ–Ω' },
        { pattern: /(\d+(?:\.\d+)?)\s*—Ä–∏–∞–ª/i, replacement: '$1 —Ä–∏–∞–ª' },
        { pattern: /(\d+(?:\.\d+)?)\s*–±–∞—Ç/i, replacement: '$1 –±–∞—Ç' },
        { pattern: /(\d+(?:\.\d+)?)\s*–≤–æ–Ω/i, replacement: '$1 –≤–æ–Ω–∞' },
        { pattern: /(\d+(?:\.\d+)?)\s*–≥—Ä–∏–≤–µ–Ω—å/i, replacement: '$1 –≥—Ä–∏–≤–Ω–∞' },
        { pattern: /(\d+(?:\.\d+)?)\s*–≥—É–∞—Ä–∞–Ω–∏/i, replacement: '$1 –≥—É–∞—Ä–∞–Ω–∏' },
        { pattern: /(\d+(?:\.\d+)?)\s*–¥–∏—Ä—Ö–∞–º/i, replacement: '$1 –¥–∏—Ä—Ö–∞–º' },
        { pattern: /(\d+(?:\.\d+)?)\s*–¥–æ–Ω–≥–æ–≤?/i, replacement: '$1 –¥–æ–Ω–≥' },
        { pattern: /(\d+(?:\.\d+)?)\s*–¥—Ä–∞–º–æ–≤?/i, replacement: '$1 –¥—Ä–∞–º' },
        { pattern: /(\d+(?:\.\d+)?)\s*–∏–Ω—Ç–∏/i, replacement: '$1 –∏–Ω—Ç–∏' },
        { pattern: /(\d+(?:\.\d+)?)\s*–∫–∞—Ä–¥–æ–±/i, replacement: '$1 –∫–∞—Ä–¥–æ–±–∞' },
        { pattern: /(\d+(?:\.\d+)?)\s*–∞—Ä–∏–∞—Ä–∏/i, replacement: '$1 –∞—Ä–∏–∞—Ä–∏' },
        { pattern: /(\d+(?:\.\d+)?)\s*–∑–∞–∏—Ä/i, replacement: '$1 –∑–∞–∏—Ä' }
    ];
    
    // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤–∞–ª—é—Ç—É –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
    for (const { pattern, replacement } of currencyPatterns) {
        const match = originalDescription.match(pattern);
        if (match) {
            return replacement.replace('$1', match[1]);
        }
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤–∞–ª—é—Ç—É, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–∏–π –Ω–æ–º–∏–Ω–∞–ª
    return currentDenomination;
}

async function fixDenominations() {
    const pool = new Pool(config.dbConfig);
    
    try {
        console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–º–∏–Ω–∞–ª—ã –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å—è—Ö...');
        
        // –ü–æ–ª—É—á–∞–µ–º –í–°–ï –∑–∞–ø–∏—Å–∏ —Å —á–∏—Å–ª–æ–≤—ã–º–∏ –Ω–æ–º–∏–Ω–∞–ª–∞–º–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º
        const query = `
            SELECT id, denomination, original_description
            FROM coin_catalog 
            WHERE denomination ~ '^[0-9]+(\.[0-9]+)?$'
            AND original_description IS NOT NULL
            AND original_description != ''
            ORDER BY id
        `;
        
        const result = await pool.query(query);
        
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${result.rows.length} –∑–∞–ø–∏—Å–µ–π —Å —á–∏—Å–ª–æ–≤—ã–º–∏ –Ω–æ–º–∏–Ω–∞–ª–∞–º–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏`);
        
        let updatedCount = 0;
        let processedCount = 0;
        
        for (const row of result.rows) {
            processedCount++;
            
            if (processedCount % 100 === 0) {
                console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processedCount}/${result.rows.length}`);
            }
            
            const newDenomination = fixDenomination(row.original_description, row.denomination);
            
            if (newDenomination !== row.denomination) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
                const updateQuery = `
                    UPDATE coin_catalog 
                    SET denomination = $1
                    WHERE id = $2
                `;
                
                await pool.query(updateQuery, [newDenomination, row.id]);
                updatedCount++;
                
                if (updatedCount <= 10) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –ø—Ä–∏–º–µ—Ä–æ–≤
                    console.log(`   ID ${row.id}: "${row.denomination}" ‚Üí "${newDenomination}"`);
                    console.log(`     –û–ø–∏—Å–∞–Ω–∏–µ: "${row.original_description.substring(0, 100)}..."`);
                }
            }
        }
        
        console.log(`\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!`);
        console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${processedCount}`);
        console.log(`   –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${updatedCount}`);
        
        // –ü—Ä–æ–≤–µ—Ä–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...');
        
        const checkQuery = `
            SELECT 
                denomination,
                COUNT(*) as count
            FROM coin_catalog 
            WHERE denomination IS NOT NULL
            GROUP BY denomination
            ORDER BY count DESC
            LIMIT 15
        `;
        
        const checkResult = await pool.query(checkQuery);
        
        console.log('\nüìä –¢–æ–ø-15 –Ω–æ–º–∏–Ω–∞–ª–æ–≤ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:');
        checkResult.rows.forEach((row, index) => {
            console.log(`${index + 1}. "${row.denomination}": ${row.count} –∑–∞–ø–∏—Å–µ–π`);
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    } finally {
        await pool.end();
    }
}

fixDenominations();
