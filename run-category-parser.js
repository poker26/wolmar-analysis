/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * node run-category-parser.js [--test] [--max-categories=N] [--max-lots=N] [--delay=N]
 * 
 * –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
 * --test              - —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º (2 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ø–æ 5 –ª–æ—Ç–æ–≤)
 * --max-categories=N  - –º–∞–∫—Å–∏–º—É–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
 * --max-lots=N        - –º–∞–∫—Å–∏–º—É–º –ª–æ—Ç–æ–≤ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
 * --delay=N           - –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ª–æ—Ç–∞–º–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
 * --skip-existing     - –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ª–æ—Ç—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é true)
 */

const WolmarCategoryParser = require('./wolmar-category-parser');
const config = require('./config');

// –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
function parseArguments() {
    const args = process.argv.slice(2);
    const options = {
        testMode: false,
        maxCategories: null,
        maxLotsPerCategory: null,
        delayBetweenLots: 800,
        skipExisting: true
    };
    
    args.forEach(arg => {
        if (arg === '--test') {
            options.testMode = true;
            options.maxCategories = 2;
            options.maxLotsPerCategory = 5;
            options.delayBetweenLots = 1500;
        } else if (arg.startsWith('--max-categories=')) {
            options.maxCategories = parseInt(arg.split('=')[1]);
        } else if (arg.startsWith('--max-lots=')) {
            options.maxLotsPerCategory = parseInt(arg.split('=')[1]);
        } else if (arg.startsWith('--delay=')) {
            options.delayBetweenLots = parseInt(arg.split('=')[1]);
        } else if (arg === '--skip-existing') {
            options.skipExisting = true;
        } else if (arg === '--no-skip-existing') {
            options.skipExisting = false;
        }
    });
    
    return options;
}

async function runCategoryParser() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ Wolmar Category Parser...\n');
    
    const options = parseArguments();
    
    console.log('üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞:');
    console.log(`   - –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: ${options.testMode}`);
    console.log(`   - –ú–∞–∫—Å–∏–º—É–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${options.maxCategories || '–≤—Å–µ'}`);
    console.log(`   - –ú–∞–∫—Å–∏–º—É–º –ª–æ—Ç–æ–≤ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ${options.maxLotsPerCategory || '–≤—Å–µ'}`);
    console.log(`   - –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ª–æ—Ç–∞–º–∏: ${options.delayBetweenLots}ms`);
    console.log(`   - –ü—Ä–æ–ø—É—Å–∫–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ: ${options.skipExisting}\n`);
    
    const parser = new WolmarCategoryParser(config.dbConfig);
    
    try {
        const startTime = Date.now();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
        await parser.parseAllCategories(options);
        
        const endTime = Date.now();
        const duration = Math.round((endTime - startTime) / 1000);
        
        console.log(`\nüéâ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ ${duration} —Å–µ–∫—É–Ω–¥!`);
        console.log(`üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
        console.log(`   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ª–æ—Ç–æ–≤: ${parser.processed}`);
        console.log(`   ‚ùå –û—à–∏–±–æ–∫: ${parser.errors}`);
        console.log(`   ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${parser.skipped}`);
        
    } catch (error) {
        console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error.message);
        console.error('Stack trace:', error.stack);
        throw error;
    }
}

// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É
function showHelp() {
    console.log(`
üöÄ Wolmar Category Parser

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  node run-category-parser.js [–æ–ø—Ü–∏–∏]

–û–ø—Ü–∏–∏:
  --test                    –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º (2 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ø–æ 5 –ª–æ—Ç–æ–≤)
  --max-categories=N        –ú–∞–∫—Å–∏–º—É–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
  --max-lots=N              –ú–∞–∫—Å–∏–º—É–º –ª–æ—Ç–æ–≤ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é  
  --delay=N                 –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ª–æ—Ç–∞–º–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 800)
  --skip-existing           –ü—Ä–æ–ø—É—Å–∫–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ª–æ—Ç—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
  --no-skip-existing        –ù–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ª–æ—Ç—ã
  --help                    –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
  node run-category-parser.js --test
  node run-category-parser.js --max-categories=5 --max-lots=20
  node run-category-parser.js --delay=1000 --no-skip-existing
`);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
if (process.argv.includes('--help')) {
    showHelp();
    process.exit(0);
}

// –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞
if (require.main === module) {
    runCategoryParser()
        .then(() => {
            console.log('‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
            process.exit(0);
        })
        .catch((error) => {
            console.error('‚ùå –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π:', error.message);
            process.exit(1);
        });
}

module.exports = { runCategoryParser, parseArguments };

