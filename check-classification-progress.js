const { Pool } = require('pg');
const config = require('./config');

async function checkClassificationProgress() {
    const pool = new Pool(config.dbConfig);
    
    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        const totalQuery = `SELECT COUNT(*) as total FROM coin_catalog`;
        const totalResult = await pool.query(totalQuery);
        const total = parseInt(totalResult.rows[0].total);
        console.log(`üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –∫–∞—Ç–∞–ª–æ–≥–µ: ${total}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∂–µ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        const classifiedQuery = `
            SELECT 
                category,
                COUNT(*) as count
            FROM coin_catalog 
            WHERE category IS NOT NULL AND category != 'other'
            GROUP BY category
            ORDER BY count DESC
        `;
        
        const classifiedResult = await pool.query(classifiedQuery);
        const classifiedCount = classifiedResult.rows.reduce((sum, row) => sum + parseInt(row.count), 0);
        
        console.log(`üìä –£–∂–µ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ: ${classifiedCount} –∑–∞–ø–∏—Å–µ–π (${((classifiedCount / total) * 100).toFixed(1)}%)`);
        
        if (classifiedResult.rows.length > 0) {
            console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:');
            classifiedResult.rows.forEach(row => {
                const percentage = ((row.count / total) * 100).toFixed(2);
                console.log(`  ${row.category}: ${row.count} –∑–∞–ø–∏—Å–µ–π (${percentage}%)`);
            });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π —Å category = 'other' (–Ω–µ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö)
        const otherQuery = `SELECT COUNT(*) as count FROM coin_catalog WHERE category = 'other' OR category IS NULL`;
        const otherResult = await pool.query(otherQuery);
        const otherCount = parseInt(otherResult.rows[0].count);
        
        console.log(`üìä –ù–µ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ (other/null): ${otherCount} –∑–∞–ø–∏—Å–µ–π (${((otherCount / total) * 100).toFixed(1)}%)`);
        
        // –ù–∞—Ö–æ–¥–∏–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
        const lastClassifiedQuery = `
            SELECT MAX(id) as max_id 
            FROM coin_catalog 
            WHERE category IS NOT NULL AND category != 'other'
        `;
        
        const lastClassifiedResult = await pool.query(lastClassifiedQuery);
        const lastClassifiedId = lastClassifiedResult.rows[0].max_id;
        
        if (lastClassifiedId) {
            console.log(`üìä –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID: ${lastClassifiedId}`);
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    } finally {
        await pool.end();
    }
}

checkClassificationProgress();
