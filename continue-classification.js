const { Pool } = require('pg');
const config = require('./config');
const { classifyItem, CATEGORIES } = require('./category-classifier');

async function continueClassification() {
    const pool = new Pool(config.dbConfig);
    
    try {
        console.log('üè∑Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ...');
        
        // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        const totalQuery = `SELECT COUNT(*) as total FROM coin_catalog`;
        const totalResult = await pool.query(totalQuery);
        const total = parseInt(totalResult.rows[0].total);
        console.log(`üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –∫–∞—Ç–∞–ª–æ–≥–µ: ${total}`);
        
        // –ù–∞—Ö–æ–¥–∏–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
        const lastClassifiedQuery = `
            SELECT MAX(id) as max_id 
            FROM coin_catalog 
            WHERE category IS NOT NULL AND category != 'other'
        `;
        
        const lastClassifiedResult = await pool.query(lastClassifiedQuery);
        const lastClassifiedId = lastClassifiedResult.rows[0].max_id || 0;
        console.log(`üìä –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å ID: ${lastClassifiedId + 1}`);
        
        // –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø–∞–∫–µ—Ç–∞–º–∏ –ø–æ 1000 –∑–∞–ø–∏—Å–µ–π, –Ω–∞—á–∏–Ω–∞—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ ID
        const batchSize = 1000;
        let processed = 0;
        let updated = 0;
        
        const categoryStats = {};
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–ø–∏—Å–µ–π
        const remainingQuery = `
            SELECT COUNT(*) as count 
            FROM coin_catalog 
            WHERE id > $1 AND (category = 'other' OR category IS NULL)
        `;
        
        const remainingResult = await pool.query(remainingQuery, [lastClassifiedId]);
        const remaining = parseInt(remainingResult.rows[0].count);
        console.log(`üìä –û—Å—Ç–∞–ª–æ—Å—å –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å: ${remaining} –∑–∞–ø–∏—Å–µ–π`);
        
        for (let offset = lastClassifiedId; offset < total; offset += batchSize) {
            console.log(`\nüîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø–∏—Å–∏ ${offset + 1}-${Math.min(offset + batchSize, total)}...`);
            
            // –ü–æ–ª—É—á–∞–µ–º –ø–∞–∫–µ—Ç –∑–∞–ø–∏—Å–µ–π, –Ω–∞—á–∏–Ω–∞—è —Å offset
            const batchQuery = `
                SELECT 
                    id,
                    denomination,
                    metal,
                    coin_weight,
                    original_description
                FROM coin_catalog 
                WHERE id > $1 AND (category = 'other' OR category IS NULL)
                ORDER BY id
                LIMIT $2
            `;
            
            const batchResult = await pool.query(batchQuery, [offset, batchSize]);
            
            if (batchResult.rows.length === 0) {
                console.log('‚úÖ –í—Å–µ –∑–∞–ø–∏—Å–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã!');
                break;
            }
            
            // –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å
            for (const row of batchResult.rows) {
                const category = classifyItem(
                    row.original_description,
                    row.denomination,
                    row.metal,
                    row.coin_weight
                );
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –ë–î
                const updateQuery = `
                    UPDATE coin_catalog 
                    SET category = $1 
                    WHERE id = $2
                `;
                
                await pool.query(updateQuery, [category, row.id]);
                updated++;
                
                // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                categoryStats[category] = (categoryStats[category] || 0) + 1;
                
                processed++;
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 100 –∑–∞–ø–∏—Å–µ–π
                if (processed % 100 === 0) {
                    const progress = ((processed / remaining) * 100).toFixed(1);
                    console.log(`  üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: ${processed}/${remaining} (${progress}%)`);
                }
            }
        }
        
        console.log('\n‚úÖ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
        console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${processed}`);
        console.log(`üìä –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${updated}`);
        
        // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:');
        Object.entries(categoryStats)
            .sort(([,a], [,b]) => b - a)
            .forEach(([category, count]) => {
                const percentage = ((count / total) * 100).toFixed(2);
                console.log(`  ${category}: ${count} –∑–∞–ø–∏—Å–µ–π (${percentage}%)`);
            });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç...');
        const verifyQuery = `
            SELECT 
                category,
                COUNT(*) as count
            FROM coin_catalog 
            GROUP BY category
            ORDER BY count DESC
        `;
        
        const verifyResult = await pool.query(verifyQuery);
        console.log('\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
        verifyResult.rows.forEach(row => {
            const percentage = ((row.count / total) * 100).toFixed(2);
            console.log(`  ${row.category}: ${row.count} –∑–∞–ø–∏—Å–µ–π (${percentage}%)`);
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    } finally {
        await pool.end();
    }
}

continueClassification();
