const { Pool } = require('pg');
const config = require('./config');

async function analyzeDuplicatesSafe() {
    const pool = new Pool(config.dbConfig);
    
    try {
        console.log('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ë–ï–ó —É–¥–∞–ª–µ–Ω–∏—è...');
        
        // –°–Ω–∞—á–∞–ª–∞ –ø–æ—Å–º–æ—Ç—Ä–∏–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const totalQuery = 'SELECT COUNT(*) as total FROM coin_catalog';
        const totalResult = await pool.query(totalQuery);
        console.log(`üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –∫–∞—Ç–∞–ª–æ–≥–µ: ${totalResult.rows[0].total}`);
        
        // –ù–∞–π–¥–µ–º –≤—Å–µ –¥—É–±–ª–∏–∫–∞—Ç—ã, –Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const duplicateQuery = `
            SELECT 
                denomination, coin_name, year, mint, coin_weight, metal,
                COUNT(*) as count,
                STRING_AGG(id::text, ', ') as ids,
                MIN(id) as keep_id
            FROM coin_catalog 
            GROUP BY denomination, coin_name, year, mint, coin_weight, metal
            HAVING COUNT(*) > 1
            ORDER BY count DESC, metal
            LIMIT 20
        `;
        
        const duplicateResult = await pool.query(duplicateQuery);
        
        if (duplicateResult.rows.length === 0) {
            console.log('‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            return;
        }
        
        console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${duplicateResult.rows.length} –≥—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ (–ø–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 20):`);
        
        let totalToDelete = 0;
        
        // –ü–æ–∫–∞–∂–µ–º –¥–µ—Ç–∞–ª–∏ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
        duplicateResult.rows.forEach((dup, index) => {
            const ids = dup.ids.split(', ').map(id => parseInt(id));
            const idsToDelete = ids.filter(id => id !== dup.keep_id);
            totalToDelete += idsToDelete.length;
            
            console.log(`\n${index + 1}. ${dup.metal} | ${dup.denomination} ${dup.coin_name} | ${dup.year || '–±–µ–∑ –≥–æ–¥–∞'} | ${dup.mint || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–≤–æ—Ä'} | –≤–µ—Å: ${dup.coin_weight || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
            console.log(`   –í—Å–µ–≥–æ: ${dup.count} —à—Ç—É–∫`);
            console.log(`   –û—Å—Ç–∞–≤–∏–º: ID ${dup.keep_id}`);
            console.log(`   –£–¥–∞–ª–∏–º: ID ${idsToDelete.join(', ')} (${idsToDelete.length} —à—Ç—É–∫)`);
        });
        
        console.log(`\nüìä –ò—Ç–æ–≥–æ –ø–æ –ø–µ—Ä–≤—ã–º 20 –≥—Ä—É–ø–ø–∞–º:`);
        console.log(`   –ó–∞–ø–∏—Å–µ–π –∫ —É–¥–∞–ª–µ–Ω–∏—é: ${totalToDelete}`);
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Ç–∞–ª–ª–∞–º –¥–ª—è –ø–µ—Ä–≤—ã—Ö 20 –≥—Ä—É–ø–ø
        const metalStats = {};
        duplicateResult.rows.forEach(dup => {
            if (!metalStats[dup.metal]) {
                metalStats[dup.metal] = { groups: 0, toDelete: 0 };
            }
            metalStats[dup.metal].groups++;
            metalStats[dup.metal].toDelete += dup.count - 1;
        });
        
        console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Ç–∞–ª–ª–∞–º (–ø–µ—Ä–≤—ã–µ 20 –≥—Ä—É–ø–ø):');
        Object.entries(metalStats).forEach(([metal, stats]) => {
            console.log(`   ${metal}: ${stats.groups} –≥—Ä—É–ø–ø, ${stats.toDelete} –∫ —É–¥–∞–ª–µ–Ω–∏—é`);
        });
        
        // –ü—Ä–æ–≤–µ—Ä–∏–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        const totalDuplicatesQuery = `
            SELECT 
                COUNT(*) as total_groups,
                SUM(count - 1) as total_to_delete
            FROM (
                SELECT 
                    denomination, coin_name, year, mint, coin_weight, metal,
                    COUNT(*) as count
                FROM coin_catalog 
                GROUP BY denomination, coin_name, year, mint, coin_weight, metal
                HAVING COUNT(*) > 1
            ) as duplicates
        `;
        
        const totalDuplicatesResult = await pool.query(totalDuplicatesQuery);
        console.log(`\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:`);
        console.log(`   –í—Å–µ–≥–æ –≥—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${totalDuplicatesResult.rows[0].total_groups}`);
        console.log(`   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –∫ —É–¥–∞–ª–µ–Ω–∏—é: ${totalDuplicatesResult.rows[0].total_to_delete}`);
        
        // –ü–æ–∫–∞–∂–µ–º –ø—Ä–∏–º–µ—Ä—ã —Å–∞–º—ã—Ö –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –≥—Ä—É–ø–ø
        console.log('\nüîç –¢–æ–ø-10 —Å–∞–º—ã—Ö –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –≥—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:');
        const topDuplicatesQuery = `
            SELECT 
                denomination, coin_name, year, mint, coin_weight, metal,
                COUNT(*) as count
            FROM coin_catalog 
            GROUP BY denomination, coin_name, year, mint, coin_weight, metal
            HAVING COUNT(*) > 1
            ORDER BY count DESC
            LIMIT 10
        `;
        
        const topDuplicatesResult = await pool.query(topDuplicatesQuery);
        topDuplicatesResult.rows.forEach((dup, index) => {
            console.log(`${index + 1}. ${dup.metal} | ${dup.denomination} ${dup.coin_name} | ${dup.year || '–±–µ–∑ –≥–æ–¥–∞'} | ${dup.mint || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–≤–æ—Ä'} | –≤–µ—Å: ${dup.coin_weight || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} - ${dup.count} —à—Ç—É–∫`);
        });
        
        console.log('\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ —Ç–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑! –ù–∏—á–µ–≥–æ –Ω–µ —É–¥–∞–ª–µ–Ω–æ.');
        console.log('   –î–ª—è —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ clean-duplicates-execute.js');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
        console.error('Stack:', error.stack);
    } finally {
        await pool.end();
    }
}

analyzeDuplicatesSafe();
