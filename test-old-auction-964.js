/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç–∞—Ä–æ–º –∞—É–∫—Ü–∏–æ–Ω–µ 964
 */

const { Client } = require('pg');
const puppeteer = require('puppeteer-core');
const config = require('./config');

async function testOldAuction964() {
    const client = new Client(config.dbConfig);
    
    try {
        await client.connect();
        console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±—Ä–∞—É–∑–µ—Ä
        const browser = await puppeteer.launch({
            executablePath: 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe',
            headless: true,
            args: ['--no-sandbox', '--disable-setuid-sandbox',
            '--user-data-dir=/tmp/chrome-temp-9g8ln',
            '--disable-metrics',
            '--disable-metrics-reporting',
            '--disable-background-mode',
            '--disable-background-timer-throttling',
            '--disable-renderer-backgrounding',
            '--disable-backgrounding-occluded-windows',
            '--disable-logging',
            '--disable-gpu-logging',
            '--disable-features=TranslateUI,BlinkGenPropertyTrees,VizDisplayCompositor']
        });
        const page = await browser.newPage();
        await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36');
        
        console.log('üåê –ë—Ä–∞—É–∑–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –≥—Ä–∞–¥–∞—Ü–∏–µ–π
        function extractConditionWithGrade(conditionText) {
            if (!conditionText) return null;
            return conditionText.replace(/\s+/g, '');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É–∫—Ü–∏–æ–Ω 964 –≤ –ë–î
        console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É–∫—Ü–∏–æ–Ω 964 –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:');
        
        const auction964Stats = await client.query(`
            SELECT 
                COUNT(*) as total_lots,
                COUNT(CASE WHEN condition LIKE '% %' THEN 1 END) as lots_with_spaces,
                COUNT(CASE WHEN condition NOT LIKE '% %' THEN 1 END) as lots_without_spaces
            FROM auction_lots 
            WHERE auction_number = '964';
        `);
        
        const stats = auction964Stats.rows[0];
        console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞—É–∫—Ü–∏–æ–Ω–∞ 964 –≤ –ë–î:`);
        console.log(`  –í—Å–µ–≥–æ –ª–æ—Ç–æ–≤: ${stats.total_lots}`);
        console.log(`  –° –ø—Ä–æ–±–µ–ª–∞–º–∏: ${stats.lots_with_spaces}`);
        console.log(`  –ë–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤: ${stats.lots_without_spaces}`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –ª–æ—Ç–æ–≤
        const sampleLots = await client.query(`
            SELECT lot_number, condition, source_url
            FROM auction_lots 
            WHERE auction_number = '964'
            ORDER BY lot_number
            LIMIT 10;
        `);
        
        console.log(`\nüìã –ü—Ä–∏–º–µ—Ä—ã –ª–æ—Ç–æ–≤ –∞—É–∫—Ü–∏–æ–Ω–∞ 964:`);
        sampleLots.rows.forEach((lot, index) => {
            const hasSpaces = lot.condition.includes(' ');
            console.log(`  ${index + 1}. –õ–æ—Ç ${lot.lot_number}: "${lot.condition}" ${hasSpaces ? '‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–ï–õ–´' : '‚úÖ –ë–ï–ó –ü–†–û–ë–ï–õ–û–í'}`);
        });
        
        // –¢–µ–ø–µ—Ä—å –ø–∞—Ä—Å–∏–º –æ–±—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞—É–∫—Ü–∏–æ–Ω–∞ 964
        console.log(`\nüß™ –ü–∞—Ä—Å–∏–º –æ–±—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞—É–∫—Ü–∏–æ–Ω–∞ 964:`);
        
        const auctionUrl = 'https://www.wolmar.ru/auction/2124'; // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞ 964
        console.log(`üìÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞: ${auctionUrl}`);
        
        await page.goto(auctionUrl, { waitUntil: 'networkidle2', timeout: 30000 });
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        const totalPages = await page.evaluate(() => {
            const pagination = document.querySelector('.pagination');
            if (!pagination) return 1;
            
            const pageLinks = pagination.querySelectorAll('a');
            let maxPage = 1;
            
            pageLinks.forEach(link => {
                const text = link.textContent.trim();
                const pageNum = parseInt(text);
                if (!isNaN(pageNum) && pageNum > maxPage) {
                    maxPage = pageNum;
                }
            });
            
            return maxPage;
        });
        
        console.log(`üìÑ –ù–∞–π–¥–µ–Ω–æ ${totalPages} —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞`);
        
        // –ü–∞—Ä—Å–∏–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è —Ç–µ—Å—Ç–∞
        console.log(`\nüìñ –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É 1/${totalPages}...`);
        
        const lotsData = await page.evaluate(() => {
            const lots = [];
            const tables = document.querySelectorAll('table');
            
            tables.forEach(table => {
                const rows = table.querySelectorAll('tr');
                
                rows.forEach(row => {
                    const cells = row.querySelectorAll('td, th');
                    
                    if (cells.length >= 10) {
                        const lotLink = row.querySelector('a[href*="/auction/"]');
                        
                        if (lotLink) {
                            const lotUrl = lotLink.href;
                            const lotNumberMatch = lotUrl.match(/\/auction\/\d+\/(\d+)/);
                            const lotNumber = lotNumberMatch ? lotNumberMatch[1] : null;
                            
                            const conditionCell = cells[5];
                            const condition = conditionCell ? conditionCell.textContent.trim() : null;
                            
                            if (lotNumber && condition && condition.match(/^(MS|PF|AU|UNC|XF|VF|VG|F|G|PR|PL|Proof|Gem)/i)) {
                                lots.push({
                                    lotNumber: lotNumber,
                                    lotUrl: lotUrl,
                                    condition: condition
                                });
                            }
                        }
                    }
                });
            });
            
            return lots;
        });
        
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${lotsData.length} –ª–æ—Ç–æ–≤ —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –ª–æ—Ç–æ–≤
        console.log(`\nüìã –ü–µ—Ä–≤—ã–µ 5 –ª–æ—Ç–æ–≤ —Å –ø–∞—Ä—Å–∏–Ω–≥–∞:`);
        lotsData.slice(0, 5).forEach((lot, index) => {
            console.log(`  ${index + 1}. –õ–æ—Ç ${lot.lotNumber}: "${lot.condition}"`);
            console.log(`     URL: ${lot.lotUrl}`);
        });
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–≤—ã—Ö 10 –ª–æ—Ç–æ–≤
        console.log(`\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–≤—ã—Ö 10 –ª–æ—Ç–æ–≤:`);
        
        let updated = 0;
        let skipped = 0;
        let notFound = 0;
        
        for (const lot of lotsData.slice(0, 10)) {
            try {
                const newCondition = extractConditionWithGrade(lot.condition);
                
                // –ò—â–µ–º –ª–æ—Ç –≤ –±–∞–∑–µ –ø–æ URL
                const findResult = await client.query(`
                    SELECT id, lot_number, condition 
                    FROM auction_lots 
                    WHERE source_url = $1;
                `, [lot.lotUrl]);
                
                if (findResult.rows.length > 0) {
                    const lotRecord = findResult.rows[0];
                    const oldCondition = lotRecord.condition;
                    
                    if (oldCondition !== newCondition) {
                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                        await client.query(`
                            UPDATE auction_lots 
                            SET condition = $1 
                            WHERE id = $2;
                        `, [newCondition, lotRecord.id]);
                        console.log(`‚úÖ –õ–æ—Ç ${lotRecord.lot_number}: "${oldCondition}" -> "${newCondition}"`);
                        updated++;
                    } else {
                        console.log(`‚è≠Ô∏è –õ–æ—Ç ${lotRecord.lot_number}: –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ("${oldCondition}")`);
                        skipped++;
                    }
                } else {
                    console.log(`‚ö†Ô∏è –õ–æ—Ç ${lot.lotNumber}: –ù–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
                    notFound++;
                }
                
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ—Ç–∞ ${lot.lotNumber}:`, error.message);
            }
        }
        
        console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:`);
        console.log(`  ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${updated}`);
        console.log(`  ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skipped}`);
        console.log(`  ‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ: ${notFound}`);
        
        await browser.close();
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    } finally {
        await client.end();
    }
}

testOldAuction964();
