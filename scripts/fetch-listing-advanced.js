const puppeteer = require('puppeteer');
const fs = require('fs-extra');
const path = require('path');

async function fetchListingAdvanced(categoryId = '252', finished = true) {
  console.log('üöÄ Launching browser with advanced settings...');
  
  const browser = await puppeteer.launch({
    headless: true,
    args: ['--no-sandbox',
      '--disable-setuid-sandbox',
      '--disable-dev-shm-usage',
      '--disable-accelerated-2d-canvas',
      '--no-first-run',
      '--no-zygote',
      '--disable-gpu',
      '--disable-background-timer-throttling',
      '--disable-backgrounding-occluded-windows',
      '--disable-renderer-backgrounding',
      '--disable-web-security',
      '--disable-features=VizDisplayCompositor',
      '--disable-extensions',
      '--disable-plugins',
      '--disable-images',
      '--disable-javascript',
      '--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
      '--user-data-dir=/tmp/chrome-temp-womoa',
      '--disable-metrics',
      '--disable-metrics-reporting',
      '--disable-background-mode',
      '--disable-background-timer-throttling',
      '--disable-renderer-backgrounding',
      '--disable-backgrounding-occluded-windows',
      '--disable-logging',
      '--disable-gpu-logging',
      '--disable-features=TranslateUI,BlinkGenPropertyTrees,VizDisplayCompositor']
  });
  
  const page = await browser.newPage();
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ viewport –∏ user agent
  await page.setViewport({ width: 1920, height: 1080 });
  await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36');
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
  await page.setExtraHTTPHeaders({
    'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8',
    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
    'Cache-Control': 'no-cache',
    'Pragma': 'no-cache'
  });
  
  const opt = finished ? '2' : '1';
  const url = `https://meshok.net/good/${categoryId}${finished ? '?opt=2' : ''}`;
  
  console.log(`üìÑ Fetching: ${url}`);
  
  try {
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
    await page.goto(url, {
      waitUntil: 'domcontentloaded',
      timeout: 120000
    });
    
    console.log('‚è≥ Waiting for Cloudflare challenge...');
    
    // –ñ–¥–µ–º –¥–æ 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è Cloudflare
    let attempts = 0;
    let content = '';
    
    while (attempts < 30) {
      await new Promise(resolve => setTimeout(resolve, 1000));
      content = await page.content();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–∏ –ª–∏ –º—ã Cloudflare
      if (!content.includes('Just a moment') && !content.includes('Checking your browser')) {
        console.log('‚úÖ Cloudflare challenge passed!');
        break;
      }
      
      attempts++;
      console.log(`‚è≥ Attempt ${attempts}/30 - Still waiting for Cloudflare...`);
    }
    
    if (content.includes('Just a moment')) {
      console.log('‚ö†Ô∏è  Cloudflare challenge still active after 30 seconds');
      console.log('üí° Try running the script again or use a different approach');
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const filename = `listing_good${categoryId}_opt${opt}_${timestamp}.html`;
    const filepath = path.join(__dirname, '../data', filename);
    
    await fs.ensureDir(path.join(__dirname, '../data'));
    await fs.writeFile(filepath, content, 'utf-8');
    
    console.log(`‚úÖ Saved to: ${filename}`);
    console.log(`üìä Size: ${(content.length / 1024).toFixed(2)} KB`);
    
    // –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    const title = await page.title();
    console.log(`üìã Page title: ${title}`);
    
    // –ü–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ –ª–æ—Ç—ã
    const lotLinks = await page.$$eval('a[href*="/item/"]', links => links.length);
    console.log(`üîó Found ${lotLinks} item links`);
    
    if (lotLinks > 0) {
      console.log('üéâ Successfully bypassed Cloudflare and found auction data!');
    } else {
      console.log('‚ö†Ô∏è  No auction links found - may need different approach');
    }
    
  } catch (error) {
    console.error('‚ùå Error:', error.message);
  } finally {
    await browser.close();
    console.log('üèÅ Browser closed');
  }
}

// –ó–∞–ø—É—Å–∫
const categoryId = process.argv[2] || '252';
fetchListingAdvanced(categoryId);
