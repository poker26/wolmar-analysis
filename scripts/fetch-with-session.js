const puppeteer = require('puppeteer');
const fs = require('fs-extra');
const path = require('path');

async function fetchWithSession(categoryId = '252', finished = true) {
  console.log('üöÄ Launching browser with session persistence...');
  
  const browser = await puppeteer.launch({
    headless: false, // –ù–ï headless –¥–ª—è –æ–±—Ö–æ–¥–∞ Cloudflare
    args: ['--no-sandbox',
      '--disable-setuid-sandbox',
      '--disable-dev-shm-usage',
      '--disable-accelerated-2d-canvas',
      '--no-first-run',
      '--disable-gpu',
      '--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
      '--user-data-dir=/tmp/chrome-temp-womoa',
      '--disable-metrics',
      '--disable-metrics-reporting',
      '--disable-background-mode',
      '--disable-background-timer-throttling',
      '--disable-renderer-backgrounding',
      '--disable-backgrounding-occluded-windows',
      '--disable-logging',
      '--disable-gpu-logging',
      '--disable-features=TranslateUI,BlinkGenPropertyTrees,VizDisplayCompositor']
  });
  
  const page = await browser.newPage();
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ viewport
  await page.setViewport({ width: 1920, height: 1080 });
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
  await page.setExtraHTTPHeaders({
    'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8',
    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
    'Cache-Control': 'no-cache',
    'Pragma': 'no-cache'
  });
  
  const url = `https://meshok.net/good/${categoryId}${finished ? '?opt=2' : ''}`;
  
  console.log(`üìÑ Fetching: ${url}`);
  console.log('‚ö†Ô∏è  Browser will open in GUI mode - you may need to manually pass Cloudflare challenge');
  console.log('‚è≥ Waiting 30 seconds for manual intervention...');
  
  try {
    await page.goto(url, {
      waitUntil: 'domcontentloaded',
      timeout: 60000
    });
    
    // –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è Cloudflare
    await new Promise(resolve => setTimeout(resolve, 30000));
    
    const content = await page.content();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const filename = `session_good${categoryId}_opt${finished ? '2' : '1'}_${timestamp}.html`;
    const filepath = path.join(__dirname, '../data', filename);
    
    await fs.ensureDir(path.join(__dirname, '../data'));
    await fs.writeFile(filepath, content, 'utf-8');
    
    console.log(`‚úÖ Saved to: ${filename}`);
    console.log(`üìä Size: ${(content.length / 1024).toFixed(2)} KB`);
    
    // –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    const title = await page.title();
    console.log(`üìã Page title: ${title}`);
    
    // –ü–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ –ª–æ—Ç—ã
    const lotLinks = await page.$$eval('a[href*="/item/"]', links => links.length);
    console.log(`üîó Found ${lotLinks} item links`);
    
    if (lotLinks > 0) {
      console.log('üéâ Successfully obtained auction data!');
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Å—ã–ª–æ–∫
      const firstLinks = await page.$$eval('a[href*="/item/"]', links => 
        links.slice(0, 5).map(link => link.href)
      );
      console.log('üìã First 5 item links:');
      firstLinks.forEach((link, index) => {
        console.log(`   ${index + 1}. ${link}`);
      });
    } else {
      console.log('‚ö†Ô∏è  No auction links found');
    }
    
  } catch (error) {
    console.error('‚ùå Error:', error.message);
  } finally {
    console.log('‚è≥ Browser will stay open for 10 more seconds...');
    await new Promise(resolve => setTimeout(resolve, 10000));
    await browser.close();
    console.log('üèÅ Browser closed');
  }
}

// –ó–∞–ø—É—Å–∫
const categoryId = process.argv[2] || '252';
const finished = process.argv[3] !== 'false';
fetchWithSession(categoryId, finished);
