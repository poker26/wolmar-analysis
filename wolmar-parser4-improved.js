const { Client } = require('pg');
const puppeteer = require('puppeteer-core');
const fs = require('fs');

class WolmarAuctionParser {
    constructor(dbConfig, auctionNumber) {
        this.dbConfig = dbConfig;
        this.auctionNumber = auctionNumber;
        this.dbClient = new Client(dbConfig);
        this.browser = null;
        this.page = null;
        this.processed = 0;
        this.skipped = 0;
        this.errors = 0;
    }

    async init() {
        await this.dbClient.connect();
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');
        
        this.browser = await puppeteer.launch({
            headless: true,
            executablePath: 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe',
            args: [
                '--no-sandbox', 
                '--disable-setuid-sandbox', 
                '--disable-dev-shm-usage',
                '--user-data-dir=/tmp/chrome-temp-' + Math.random().toString(36).substring(7),
                '--disable-metrics',
                '--disable-metrics-reporting',
                '--disable-background-mode',
                '--disable-background-timer-throttling',
                '--disable-renderer-backgrounding',
                '--disable-backgrounding-occluded-windows',
                '--disable-logging',
                '--disable-gpu-logging',
                '--disable-features=TranslateUI,BlinkGenPropertyTrees,VizDisplayCompositor'
            ]
        });
        
        this.page = await this.browser.newPage();
        await this.page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36');
        this.page.setDefaultTimeout(30000);
        this.page.setDefaultNavigationTimeout(30000);
        
        console.log('‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        await this.createTable();
    }

    async createTable() {
        try {
            const createTableQuery = `
                CREATE TABLE IF NOT EXISTS auction_lots (
                    id SERIAL PRIMARY KEY,
                    auction_number VARCHAR(10) NOT NULL,
                    lot_number VARCHAR(20) NOT NULL,
                    coin_description TEXT,
                    avers_image_url TEXT,
                    revers_image_url TEXT,
                    winner_login VARCHAR(100),
                    winning_bid INTEGER,
                    auction_end_date DATE,
                    bids_count INTEGER,
                    lot_status VARCHAR(50),
                    year VARCHAR(10),
                    letters VARCHAR(100),
                    metal VARCHAR(100),
                    condition VARCHAR(100),
                    weight DECIMAL(10,3),
                    parsed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    source_url TEXT,
                    UNIQUE(auction_number, lot_number)
                );
            `;
            await this.dbClient.query(createTableQuery);
            
            // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ª–æ—Ç–∞—Ö —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
            const createConditionsTableQuery = `
                CREATE TABLE IF NOT EXISTS auction_lots_conditions (
                    id SERIAL PRIMARY KEY,
                    auction_number VARCHAR(10) NOT NULL,
                    lot_url TEXT NOT NULL,
                    condition_text TEXT,
                    extracted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    UNIQUE(auction_number, lot_url)
                );
            `;
            await this.dbClient.query(createConditionsTableQuery);
            
            console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã/—Å–æ–∑–¥–∞–Ω—ã');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü:', error.message);
            throw error;
        }
    }

    async delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    async recreatePage() {
        try {
            if (this.page && !this.page.isClosed()) {
                await this.page.close();
            }
            this.page = await this.browser.newPage();
            await this.page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36');
            console.log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞');
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', error.message);
            return false;
        }
    }

    async ensurePageActive() {
        if (!this.page || this.page.isClosed()) {
            console.log('üîÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é...');
            return await this.recreatePage();
        }
        return true;
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –≥—Ä–∞–¥–∞—Ü–∏–µ–π
    extractConditionWithGrade(conditionText) {
        if (!conditionText) return null;
        return conditionText.replace(/\s+/g, '');
    }

    // –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ –ª–æ—Ç—ã —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
    async getAllLotUrlsWithConditions(auctionUrl, testMode = false) {
        console.log('üîç –°–æ–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤—Å–µ –ª–æ—Ç—ã —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏...');
        const allLotsData = new Map();
        
        try {
            await this.ensurePageActive();
            await this.page.goto(auctionUrl, { waitUntil: 'domcontentloaded', timeout: 30000 });
            await this.delay(2000);

            const paginationInfo = await this.page.evaluate(() => {
                const totalLotsElement = document.querySelector('.disabled[style*="float: right"]');
                const totalLots = totalLotsElement ? totalLotsElement.textContent.match(/(\d+)\s*–ª–æ—Ç/)?.[1] : null;
                
                const paginationLinks = document.querySelectorAll('.paginator li a');
                let maxPage = 1;
                paginationLinks.forEach(link => {
                    const pageNum = parseInt(link.textContent);
                    if (pageNum && pageNum > maxPage) {
                        maxPage = pageNum;
                    }
                });

                return {
                    totalLots: totalLots ? parseInt(totalLots) : null,
                    maxPage: maxPage
                };
            });

            console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ª–æ—Ç–æ–≤: ${paginationInfo.totalLots}`);
            console.log(`üìÑ –°—Ç—Ä–∞–Ω–∏—Ü –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: ${paginationInfo.maxPage}`);

            const pagesToProcess = testMode ? 1 : paginationInfo.maxPage;
            console.log(`üìã –†–µ–∂–∏–º: ${testMode ? '–¢–ï–°–¢ (—Ç–æ–ª—å–∫–æ 1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)' : '–ü–û–õ–ù–´–ô'} - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${pagesToProcess} —Å—Ç—Ä–∞–Ω–∏—Ü`);

            for (let page = 1; page <= pagesToProcess; page++) {
                console.log(`üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É ${page}/${pagesToProcess}...`);
                
                const pageUrl = page === 1 ? auctionUrl : `${auctionUrl}?page=${page}`;
                
                try {
                    await this.page.goto(pageUrl, { waitUntil: 'domcontentloaded', timeout: 30000 });
                    await this.delay(1000);

                    const pageLotsData = await this.page.evaluate(() => {
                        const lots = [];
                        const lotLinks = document.querySelectorAll('a.title.lot[href*="/auction/"]');
                        
                        lotLinks.forEach(link => {
                            if (link.href && link.href.includes('/auction/')) {
                                const lotData = { url: link.href };
                                
                                const parentRow = link.closest('tr');
                                if (parentRow) {
                                    const cells = parentRow.querySelectorAll('td');
                                    cells.forEach(cell => {
                                        const cellText = cell.textContent.trim();
                                        if (cellText.match(/^(MS|AU|XF|VF|UNC|PL)[\s\d\-\+\/]*$/i)) {
                                            lotData.condition = cellText;
                                        }
                                    });
                                }
                                
                                if (!lotData.condition && parentRow) {
                                    const rowText = parentRow.textContent;
                                    const conditionMatch = rowText.match(/(MS|AU|XF|VF|UNC|PL)[\s\d\-\+\/]*/i);
                                    if (conditionMatch) {
                                        lotData.condition = conditionMatch[0].trim();
                                    }
                                }
                                
                                if (lotData.condition) {
                                    lots.push(lotData);
                                }
                            }
                        });

                        return lots;
                    });

                    pageLotsData.forEach(lotData => {
                        allLotsData.set(lotData.url, lotData);
                    });
                    
                    console.log(`   ‚úì –ù–∞–π–¥–µ–Ω–æ –ª–æ—Ç–æ–≤ —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: ${pageLotsData.length} (–≤—Å–µ–≥–æ: ${allLotsData.size})`);

                    await this.delay(500);

                } catch (error) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${page}:`, error.message);
                    if (error.message.includes('detached') || error.message.includes('Frame')) {
                        console.log(`üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ detached frame –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${page}, –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...`);
                        await this.recreatePage();
                        await this.delay(3000);
                    }
                    continue;
                }
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ª–æ—Ç–∞—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            if (allLotsData.size > 0) {
                console.log(`üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ ${allLotsData.size} –ª–æ—Ç–∞—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...`);
                await this.saveLotUrlsWithConditionsToDatabase(Array.from(allLotsData.values()));
            }

            return Array.from(allLotsData.keys());

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ —Å—Å—ã–ª–æ–∫ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π:', error.message);
            return [];
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ª–æ—Ç–∞—Ö —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    async saveLotUrlsWithConditionsToDatabase(lotsData) {
        try {
            for (const lotData of lotsData) {
                try {
                    const insertQuery = `
                        INSERT INTO auction_lots_conditions (auction_number, lot_url, condition_text)
                        VALUES ($1, $2, $3)
                        ON CONFLICT (auction_number, lot_url) 
                        DO UPDATE SET 
                            condition_text = EXCLUDED.condition_text,
                            extracted_at = CURRENT_TIMESTAMP;
                    `;
                    
                    await this.dbClient.query(insertQuery, [
                        this.auctionNumber,
                        lotData.url,
                        lotData.condition
                    ]);
                    
                } catch (error) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ª–æ—Ç–∞ ${lotData.url}:`, error.message);
                }
            }
            
            console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${lotsData.length} –∑–∞–ø–∏—Å–µ–π –æ —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö –ª–æ—Ç–æ–≤`);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö:', error.message);
        }
    }

    // –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ª–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
    async parseLotPageWithSavedCondition(url, auctionEndDate = null) {
        try {
            await this.ensurePageActive();
            await this.page.goto(url, { waitUntil: 'domcontentloaded', timeout: 30000 });
            await this.delay(2000);

            const lotData = await this.page.evaluate(() => {
                const data = {};

                // –ù–æ–º–µ—Ä –∞—É–∫—Ü–∏–æ–Ω–∞
                const breadcrumbAuction = document.querySelector('ol[typeof="BreadcrumbList"] li:nth-child(2) span[property="name"]');
                if (breadcrumbAuction) {
                    const match = breadcrumbAuction.textContent.match(/‚Ññ\s*(\d+)/);
                    if (match) {
                        data.auctionNumber = match[1];
                    }
                }

                if (!data.auctionNumber) {
                    const h1 = document.querySelector('h1');
                    if (h1) {
                        const match = h1.textContent.match(/‚Ññ\s*(\d+)/);
                        if (match) {
                            data.auctionNumber = match[1];
                        }
                    }
                }

                if (!data.auctionNumber) {
                    const urlMatch = window.location.href.match(/\/auction\/(\d+)\//);
                    if (urlMatch) {
                        data.auctionNumber = urlMatch[1];
                    }
                }

                // –ù–æ–º–µ—Ä –ª–æ—Ç–∞
                const lotTitle = document.querySelector('h5');
                if (lotTitle) {
                    const match = lotTitle.textContent.match(/–õ–æ—Ç\s*‚Ññ?\s*(\d+)/);
                    if (match) {
                        data.lotNumber = match[1];
                    }
                }

                if (!data.lotNumber) {
                    const lotElements = document.querySelectorAll('h1, h2, h3, h4, h5, h6');
                    for (const element of lotElements) {
                        const match = element.textContent.match(/–õ–æ—Ç\s*‚Ññ?\s*(\d+)/);
                        if (match) {
                            data.lotNumber = match[1];
                            break;
                        }
                    }
                }

                if (!data.lotNumber) {
                    const urlMatch = window.location.href.match(/\/auction\/\d+\/(\d+)/);
                    if (urlMatch) {
                        data.lotNumber = urlMatch[1];
                    }
                }

                // –û–ø–∏—Å–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã
                const descriptionElement = document.querySelector('.lot-description, .description, .lot-info');
                if (descriptionElement) {
                    data.coinDescription = descriptionElement.textContent.trim();
                }

                if (!data.coinDescription) {
                    const pageText = document.body.textContent;
                    const descriptionMatch = pageText.match(/–û–ø–∏—Å–∞–Ω–∏–µ[:\s]*([^\n\r]+)/i);
                    if (descriptionMatch) {
                        data.coinDescription = descriptionMatch[1].trim();
                    }
                }

                // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å –≥—Ä–∞–¥–∞—Ü–∏–µ–π
                const valuesText = document.body.textContent;
                
                const conditionMatch = valuesText.match(/–°–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç—å:\s*([\w\-\+\/\s]+)/);
                if (conditionMatch) {
                    data.condition = conditionMatch[1].replace(/\s+/g, '');
                }

                if (!data.condition) {
                    const conditionCells = document.querySelectorAll('td, .condition, .grade');
                    for (const cell of conditionCells) {
                        const cellText = cell.textContent.trim();
                        if (cellText.match(/^(MS|AU|XF|VF|UNC|PL)[\s\d\-\+\/]*$/i)) {
                            data.condition = cellText.replace(/\s+/g, '');
                            break;
                        }
                    }
                }

                // –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
                const yearMatch = valuesText.match(/–ì–æ–¥[:\s]*(\d{4})/);
                if (yearMatch) {
                    data.year = yearMatch[1];
                }

                const metalMatch = valuesText.match(/–ú–µ—Ç–∞–ª–ª[:\s]*([^\n\r]+)/i);
                if (metalMatch) {
                    data.metal = metalMatch[1].trim();
                }

                const weightMatch = valuesText.match(/–í–µ—Å[:\s]*([\d,\.]+)\s*–≥/i);
                if (weightMatch) {
                    data.weight = parseFloat(weightMatch[1].replace(',', '.'));
                }

                const lettersMatch = valuesText.match(/–ë—É–∫–≤—ã[:\s]*([^\n\r]+)/i);
                if (lettersMatch) {
                    data.letters = lettersMatch[1].trim();
                }

                const winnerMatch = valuesText.match(/–ü–æ–±–µ–¥–∏—Ç–µ–ª—å[:\s]*([^\n\r]+)/i);
                if (winnerMatch) {
                    data.winnerLogin = winnerMatch[1].trim();
                }

                const bidMatch = valuesText.match(/–¶–µ–Ω–∞[:\s]*([\d\s]+)\s*—Ä—É–±/i);
                if (bidMatch) {
                    data.winningBid = parseInt(bidMatch[1].replace(/\s/g, ''));
                }

                const bidsMatch = valuesText.match(/–°—Ç–∞–≤–æ–∫[:\s]*(\d+)/i);
                if (bidsMatch) {
                    data.bidsCount = parseInt(bidsMatch[1]);
                }

                const statusMatch = valuesText.match(/–°—Ç–∞—Ç—É—Å[:\s]*([^\n\r]+)/i);
                if (statusMatch) {
                    data.lotStatus = statusMatch[1].trim();
                }

                data.sourceUrl = window.location.href;
                return data;
            });

            if (auctionEndDate) {
                lotData.auctionEndDate = auctionEndDate;
            }

            return lotData;

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –ª–æ—Ç–∞:', error.message);
            return null;
        }
    }

    // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Å–µ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞ (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    async parseEntireAuction(auctionUrl, options = {}) {
        const {
            maxLots = null,           
            skipExisting = true,      
            delayBetweenLots = 800,  
            batchSize = 50,          
            testMode = false,
            startIndex = 0,
            resumeFromProgress = false,
            savedLotUrls = null
        } = options;

        console.log('–ù–∞—á–∏–Ω–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞...');
        console.log(`–ù–∞—Å—Ç—Ä–æ–π–∫–∏: maxLots=${maxLots}, skipExisting=${skipExisting}, delay=${delayBetweenLots}ms, testMode=${testMode}, startIndex=${startIndex}`);

        try {
            const auctionEndDate = await this.getAuctionEndDate(auctionUrl);
            
            let lotUrls = savedLotUrls;
            
            if (!lotUrls || lotUrls.length === 0) {
                console.log('üîç –°–æ–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –ª–æ—Ç—ã —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏...');
                lotUrls = await this.getAllLotUrlsWithConditions(auctionUrl, testMode);
            } else {
                console.log(`üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑ ${lotUrls.length} —Å—Å—ã–ª–æ–∫`);
            }
            
            if (lotUrls.length === 0) {
                console.log('–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫ –Ω–∞ –ª–æ—Ç—ã');
                return;
            }

            const totalLots = maxLots ? Math.min(maxLots, lotUrls.length) : lotUrls.length;
            console.log(`–ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ª–æ—Ç–æ–≤: ${totalLots} (–Ω–∞—á–∏–Ω–∞—è —Å –∏–Ω–¥–µ–∫—Å–∞ ${startIndex})`);

            for (let i = startIndex; i < totalLots; i++) {
                const url = lotUrls[i];
                const progress = `${i + 1}/${totalLots}`;
                
                try {
                    console.log(`\n[${progress}] –ü–∞—Ä—Å–∏–Ω–≥: ${url}`);
                    
                    const lotData = await this.parseLotPageWithSavedCondition(url, auctionEndDate);
                    
                    if (skipExisting && lotData.auctionNumber && lotData.lotNumber) {
                        const exists = await this.lotExists(lotData.auctionNumber, lotData.lotNumber);
                        if (exists) {
                            console.log(`–õ–æ—Ç ${lotData.lotNumber} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                            this.skipped++;
                            continue;
                        }
                    }

                    const savedId = await this.saveLotToDatabase(lotData);
                    if (savedId) {
                        this.processed++;
                        console.log(`[${progress}] –õ–æ—Ç ${lotData.lotNumber}: ${lotData.coinDescription?.substring(0, 50)}...`);
                        console.log(`   ${lotData.winningBid} —Ä—É–±. | ${lotData.winnerLogin} | ${lotData.auctionEndDate || '–¥–∞—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}`);
                    } else {
                        console.log(`[${progress}] –õ–æ—Ç ${lotData.lotNumber} –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î`);
                    }

                    if ((i + 1) % 10 === 0) {
                        await this.saveProgress(auctionUrl, i + 1, totalLots, url, lotUrls);
                    }

                    await this.delay(delayBetweenLots);

                    if ((i + 1) % batchSize === 0) {
                        console.log(`\n–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
                        console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${this.processed}`);
                        console.log(`   –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${this.skipped}`);
                        console.log(`   –û—à–∏–±–æ–∫: ${this.errors}`);
                    }

                } catch (error) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–æ—Ç–∞ ${url}:`, error.message);
                    this.errors++;
                    
                    if (error.message.includes('detached') || error.message.includes('Frame')) {
                        console.log('üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ detached frame, –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...');
                        await this.recreatePage();
                        await this.delay(3000);
                    }
                }
            }

            console.log('\nüéâ –ü–ê–†–°–ò–ù–ì –ê–£–ö–¶–ò–û–ù–ê –ó–ê–í–ï–†–®–ï–ù!');
            console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${this.processed}`);
            console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${this.skipped}`);
            console.log(`‚ùå –û—à–∏–±–æ–∫: ${this.errors}`);

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∞—É–∫—Ü–∏–æ–Ω–∞:', error.message);
        }
    }

    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
    async getAuctionEndDate(auctionUrl) {
        // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—Ç—ã –∑–∞–∫—Ä—ã—Ç–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞
        return null;
    }

    async lotExists(auctionNumber, lotNumber) {
        // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ª–æ—Ç–∞
        return false;
    }

    async saveLotToDatabase(lotData) {
        // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        return null;
    }

    async saveProgress(auctionUrl, currentIndex, totalLots, currentUrl, lotUrls) {
        // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    }

    async close() {
        try {
            if (this.page && !this.page.isClosed()) {
                await this.page.close();
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', error.message);
        }
        
        try {
            if (this.browser) {
                await this.browser.close();
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞:', error.message);
        }
        
        try {
            if (this.dbClient) {
                await this.dbClient.end();
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î:', error.message);
        }
    }
}

module.exports = WolmarAuctionParser;
