/**
 * –°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞–≤–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω–µ
 * –°–æ–±–∏—Ä–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –≤—Å–µ—Ö —Å—Ç–∞–≤–æ–∫ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π
 */

const { Pool } = require('pg');
const puppeteer = require('puppeteer');

class BiddingHistoryTracker {
    constructor(dbConfig) {
        this.db = new Pool(dbConfig);
        this.browser = null;
        this.page = null;
    }

    async init() {
        console.log('üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞–≤–æ–∫...');
        await this.checkDatabaseConnection();
        await this.createBiddingTables();
        await this.initBrowser();
    }

    async checkDatabaseConnection() {
        try {
            const result = await this.db.query('SELECT NOW()');
            console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:', result.rows[0].now);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', error.message);
            throw error;
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞–≤–æ–∫
     */
    async createBiddingTables() {
        console.log('üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞–≤–æ–∫...');
        
        // –¢–∞–±–ª–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞–≤–æ–∫
        const createBidsTable = `
            CREATE TABLE IF NOT EXISTS auction_bids (
                id SERIAL PRIMARY KEY,
                lot_number VARCHAR(50) NOT NULL,
                auction_number VARCHAR(50) NOT NULL,
                bidder_login VARCHAR(100) NOT NULL,
                bid_amount DECIMAL(12, 2) NOT NULL,
                bid_time TIMESTAMP NOT NULL,
                bid_type VARCHAR(20) DEFAULT 'manual', -- manual, auto, sniper
                ip_address INET,
                user_agent TEXT,
                is_winning_bid BOOLEAN DEFAULT FALSE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                UNIQUE(lot_number, auction_number, bidder_login, bid_time)
            );
        `;

        // –¢–∞–±–ª–∏—Ü–∞ —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const createSessionsTable = `
            CREATE TABLE IF NOT EXISTS user_sessions (
                id SERIAL PRIMARY KEY,
                bidder_login VARCHAR(100) NOT NULL,
                session_id VARCHAR(100) NOT NULL,
                ip_address INET NOT NULL,
                user_agent TEXT,
                first_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                total_bids INTEGER DEFAULT 0,
                is_active BOOLEAN DEFAULT TRUE
            );
        `;

        // –¢–∞–±–ª–∏—Ü–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        const createSuspiciousActivityTable = `
            CREATE TABLE IF NOT EXISTS suspicious_activity (
                id SERIAL PRIMARY KEY,
                activity_type VARCHAR(50) NOT NULL, -- multiple_accounts, price_manipulation, etc.
                user_login VARCHAR(100),
                lot_number VARCHAR(50),
                auction_number VARCHAR(50),
                description TEXT,
                confidence_score DECIMAL(5, 2), -- 0-100
                evidence JSONB,
                detected_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                is_resolved BOOLEAN DEFAULT FALSE
            );
        `;

        try {
            await this.db.query(createBidsTable);
            await this.db.query(createSessionsTable);
            await this.db.query(createSuspiciousActivityTable);
            
            // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            const indexes = [
                'CREATE INDEX IF NOT EXISTS idx_auction_bids_lot_auction ON auction_bids(lot_number, auction_number)',
                'CREATE INDEX IF NOT EXISTS idx_auction_bids_bidder ON auction_bids(bidder_login)',
                'CREATE INDEX IF NOT EXISTS idx_auction_bids_time ON auction_bids(bid_time)',
                'CREATE INDEX IF NOT EXISTS idx_user_sessions_login ON user_sessions(bidder_login)',
                'CREATE INDEX IF NOT EXISTS idx_user_sessions_ip ON user_sessions(ip_address)',
                'CREATE INDEX IF NOT EXISTS idx_suspicious_activity_type ON suspicious_activity(activity_type)'
            ];

            for (const indexQuery of indexes) {
                await this.db.query(indexQuery);
            }

            console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞–≤–æ–∫ —Å–æ–∑–¥–∞–Ω—ã');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü:', error.message);
            throw error;
        }
    }

    async initBrowser() {
        console.log('üåê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞...');
        this.browser = await puppeteer.launch({
            headless: true,
            args: [
                '--no-sandbox',
                '--disable-setuid-sandbox',
                '--disable-dev-shm-usage',
                '--disable-accelerated-2d-canvas',
                '--no-first-run',
                '--no-zygote',
                '--disable-gpu'
            ]
        });
        this.page = await this.browser.newPage();
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –∑–∞—â–∏—Ç—ã
        await this.page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36');
        await this.page.setViewport({ width: 1920, height: 1080 });
        
        console.log('‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞–≤–æ–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ª–æ—Ç–∞
     */
    async parseLotBiddingHistory(lotUrl, auctionNumber, lotNumber) {
        console.log(`üîç –ü–∞—Ä—Å–∏–Ω–≥ –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞–≤–æ–∫ –¥–ª—è –ª–æ—Ç–∞ ${lotNumber}...`);
        
        try {
            await this.page.goto(lotUrl, { waitUntil: 'networkidle2', timeout: 30000 });
            
            // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            await this.page.waitForTimeout(2000);
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞–≤–æ–∫
            const biddingHistory = await this.page.evaluate(() => {
                const bids = [];
                
                // –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—É –∏–ª–∏ —Å–ø–∏—Å–æ–∫ —Å—Ç–∞–≤–æ–∫
                const bidElements = document.querySelectorAll('.bid-history tr, .bids-list .bid-item, .history-item');
                
                bidElements.forEach((element, index) => {
                    try {
                        const bidderElement = element.querySelector('.bidder, .user, .login');
                        const amountElement = element.querySelector('.amount, .price, .bid-amount');
                        const timeElement = element.querySelector('.time, .date, .timestamp');
                        
                        if (bidderElement && amountElement) {
                            const bidder = bidderElement.textContent.trim();
                            const amount = amountElement.textContent.replace(/[^\d.,]/g, '').replace(',', '.');
                            const time = timeElement ? timeElement.textContent.trim() : new Date().toISOString();
                            
                            if (bidder && amount && !isNaN(parseFloat(amount))) {
                                bids.push({
                                    bidder: bidder,
                                    amount: parseFloat(amount),
                                    time: time,
                                    index: index
                                });
                            }
                        }
                    } catch (error) {
                        console.warn('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç–∞–≤–∫–∏:', error);
                    }
                });
                
                return bids;
            });

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞–≤–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            if (biddingHistory.length > 0) {
                await this.saveBiddingHistory(biddingHistory, auctionNumber, lotNumber);
                console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${biddingHistory.length} —Å—Ç–∞–≤–æ–∫ –¥–ª—è –ª–æ—Ç–∞ ${lotNumber}`);
            } else {
                console.log(`‚ö†Ô∏è –ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –ª–æ—Ç–∞ ${lotNumber}`);
            }

            return biddingHistory;

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞–≤–æ–∫ –¥–ª—è –ª–æ—Ç–∞ ${lotNumber}:`, error.message);
            return [];
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞–≤–æ–∫ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
     */
    async saveBiddingHistory(bids, auctionNumber, lotNumber) {
        const insertQuery = `
            INSERT INTO auction_bids (
                lot_number, auction_number, bidder_login, bid_amount, bid_time, bid_type
            ) VALUES ($1, $2, $3, $4, $5, $6)
            ON CONFLICT (lot_number, auction_number, bidder_login, bid_time) 
            DO NOTHING
        `;

        for (const bid of bids) {
            try {
                await this.db.query(insertQuery, [
                    lotNumber,
                    auctionNumber,
                    bid.bidder,
                    bid.amount,
                    new Date(bid.time),
                    'manual' // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é, –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –¥–µ—Ç–µ–∫—Ü–∏—é
                ]);
            } catch (error) {
                console.warn(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏:`, error.message);
            }
        }
    }

    /**
     * –ê–Ω–∞–ª–∏–∑ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞–≤–æ–∫
     */
    async analyzeSuspiciousPatterns(auctionNumber) {
        console.log(`üîç –ê–Ω–∞–ª–∏–∑ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞ ${auctionNumber}...`);
        
        const patterns = [];

        // 1. –ê–Ω–∞–ª–∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (–æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ IP)
        const multipleAccountsQuery = `
            WITH ip_analysis AS (
                SELECT 
                    ip_address,
                    COUNT(DISTINCT bidder_login) as unique_users,
                    COUNT(*) as total_bids
                FROM auction_bids ab
                JOIN user_sessions us ON ab.bidder_login = us.bidder_login
                WHERE ab.auction_number = $1
                GROUP BY ip_address
                HAVING COUNT(DISTINCT bidder_login) > 1
            )
            SELECT 
                ip_address,
                unique_users,
                total_bids,
                STRING_AGG(DISTINCT bidder_login, ', ') as users
            FROM ip_analysis
            WHERE unique_users >= 2
            ORDER BY unique_users DESC, total_bids DESC
        `;

        const multipleAccounts = await this.db.query(multipleAccountsQuery, [auctionNumber]);
        
        for (const account of multipleAccounts.rows) {
            patterns.push({
                type: 'multiple_accounts',
                description: `–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã —Å IP ${account.ip_address}`,
                users: account.users,
                confidence: Math.min(account.unique_users * 25, 100),
                evidence: {
                    ip_address: account.ip_address,
                    user_count: account.unique_users,
                    total_bids: account.total_bids
                }
            });
        }

        // 2. –ê–Ω–∞–ª–∏–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫
        const synchronousBidsQuery = `
            WITH bid_times AS (
                SELECT 
                    lot_number,
                    bidder_login,
                    bid_time,
                    LAG(bid_time) OVER (PARTITION BY lot_number ORDER BY bid_time) as prev_bid_time
                FROM auction_bids
                WHERE auction_number = $1
            )
            SELECT 
                lot_number,
                bidder_login,
                bid_time,
                prev_bid_time,
                EXTRACT(EPOCH FROM (bid_time - prev_bid_time)) as time_diff_seconds
            FROM bid_times
            WHERE prev_bid_time IS NOT NULL
            AND EXTRACT(EPOCH FROM (bid_time - prev_bid_time)) < 5 -- –ú–µ–Ω–µ–µ 5 —Å–µ–∫—É–Ω–¥
            ORDER BY time_diff_seconds ASC
        `;

        const synchronousBids = await this.db.query(synchronousBidsQuery, [auctionNumber]);
        
        if (synchronousBids.rows.length > 0) {
            patterns.push({
                type: 'synchronous_bidding',
                description: `–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ (${synchronousBids.rows.length} —Å–ª—É—á–∞–µ–≤)`,
                confidence: Math.min(synchronousBids.rows.length * 10, 100),
                evidence: {
                    synchronous_count: synchronousBids.rows.length,
                    examples: synchronousBids.rows.slice(0, 5)
                }
            });
        }

        // 3. –ê–Ω–∞–ª–∏–∑ —Ç–∞–∫—Ç–∏–∫–∏ "–ø—Ä–∏–º–∞–Ω–∫–∏"
        const baitingTacticsQuery = `
            WITH user_lot_stats AS (
                SELECT 
                    bidder_login,
                    lot_number,
                    COUNT(*) as bid_count,
                    MIN(bid_amount) as min_bid,
                    MAX(bid_amount) as max_bid,
                    AVG(bid_amount) as avg_bid
                FROM auction_bids
                WHERE auction_number = $1
                GROUP BY bidder_login, lot_number
                HAVING COUNT(*) >= 3
            )
            SELECT 
                bidder_login,
                lot_number,
                bid_count,
                min_bid,
                max_bid,
                avg_bid,
                (max_bid - min_bid) / min_bid * 100 as price_increase_pct
            FROM user_lot_stats
            WHERE (max_bid - min_bid) / min_bid * 100 > 200 -- –¶–µ–Ω–∞ –≤—ã—Ä–æ—Å–ª–∞ –±–æ–ª–µ–µ —á–µ–º –≤ 3 —Ä–∞–∑–∞
            ORDER BY price_increase_pct DESC
        `;

        const baitingTactics = await this.db.query(baitingTacticsQuery, [auctionNumber]);
        
        for (const tactic of baitingTactics.rows) {
            patterns.push({
                type: 'baiting_tactics',
                description: `–¢–∞–∫—Ç–∏–∫–∞ "–ø—Ä–∏–º–∞–Ω–∫–∏" - —Ü–µ–Ω–∞ –≤—ã—Ä–æ—Å–ª–∞ –Ω–∞ ${tactic.price_increase_pct.toFixed(1)}%`,
                user: tactic.bidder_login,
                lot: tactic.lot_number,
                confidence: Math.min(tactic.price_increase_pct / 5, 100),
                evidence: {
                    bid_count: tactic.bid_count,
                    min_bid: tactic.min_bid,
                    max_bid: tactic.max_bid,
                    price_increase_pct: tactic.price_increase_pct
                }
            });
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        await this.saveSuspiciousPatterns(patterns, auctionNumber);

        return patterns;
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
     */
    async saveSuspiciousPatterns(patterns, auctionNumber) {
        const insertQuery = `
            INSERT INTO suspicious_activity (
                activity_type, user_login, lot_number, auction_number, 
                description, confidence_score, evidence
            ) VALUES ($1, $2, $3, $4, $5, $6, $7)
        `;

        for (const pattern of patterns) {
            try {
                await this.db.query(insertQuery, [
                    pattern.type,
                    pattern.user || null,
                    pattern.lot || null,
                    auctionNumber,
                    pattern.description,
                    pattern.confidence,
                    JSON.stringify(pattern.evidence)
                ]);
            } catch (error) {
                console.warn(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞:`, error.message);
            }
        }
    }

    /**
     * –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∞—É–∫—Ü–∏–æ–Ω–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Å—Ç–∞–≤–æ–∫
     */
    async analyzeAuctionWithBiddingHistory(auctionNumber) {
        console.log(`üöÄ –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∞—É–∫—Ü–∏–æ–Ω–∞ ${auctionNumber} —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Å—Ç–∞–≤–æ–∫...`);
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ª–æ—Ç–æ–≤ –∞—É–∫—Ü–∏–æ–Ω–∞
            const lotsQuery = `
                SELECT lot_number, source_url 
                FROM auction_lots 
                WHERE auction_number = $1 
                AND source_url IS NOT NULL
            `;
            
            const lots = await this.db.query(lotsQuery, [auctionNumber]);
            console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${lots.rows.length} –ª–æ—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞`);

            // –ü–∞—Ä—Å–∏–º –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞–≤–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ª–æ—Ç–∞
            let totalBids = 0;
            for (const lot of lots.rows) {
                const bids = await this.parseLotBiddingHistory(
                    lot.source_url, 
                    auctionNumber, 
                    lot.lot_number
                );
                totalBids += bids.length;
                
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                await new Promise(resolve => setTimeout(resolve, 1000));
            }

            console.log(`‚úÖ –í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ ${totalBids} —Å—Ç–∞–≤–æ–∫`);

            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            const suspiciousPatterns = await this.analyzeSuspiciousPatterns(auctionNumber);
            
            console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${suspiciousPatterns.length} –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤`);

            return {
                auctionNumber,
                totalLots: lots.rows.length,
                totalBids,
                suspiciousPatterns
            };

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∞—É–∫—Ü–∏–æ–Ω–∞ ${auctionNumber}:`, error.message);
            throw error;
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
     */
    async generateSuspiciousActivityReport(auctionNumber) {
        const reportQuery = `
            SELECT 
                activity_type,
                COUNT(*) as pattern_count,
                AVG(confidence_score) as avg_confidence,
                MAX(confidence_score) as max_confidence
            FROM suspicious_activity
            WHERE auction_number = $1
            GROUP BY activity_type
            ORDER BY avg_confidence DESC
        `;

        const report = await this.db.query(reportQuery, [auctionNumber]);
        
        console.log(`\nüìä –û–¢–ß–ï–¢ –ü–û –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û–ô –ê–ö–¢–ò–í–ù–û–°–¢–ò - –ê–£–ö–¶–ò–û–ù ${auctionNumber}`);
        console.log('='.repeat(60));
        
        for (const row of report.rows) {
            console.log(`\nüîç ${row.activity_type.toUpperCase()}:`);
            console.log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–µ–≤: ${row.pattern_count}`);
            console.log(`   –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${row.avg_confidence.toFixed(1)}%`);
            console.log(`   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${row.max_confidence.toFixed(1)}%`);
        }

        return report.rows;
    }

    async close() {
        if (this.browser) {
            await this.browser.close();
        }
        await this.db.end();
        console.log('üîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∏ –±—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç—ã');
    }
}

module.exports = BiddingHistoryTracker;

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if (require.main === module) {
    const dbConfig = {
        user: 'postgres.xkwgspqwebfeteoblayu',
        host: 'aws-0-eu-north-1.pooler.supabase.com',
        database: 'postgres',
        password: 'Gopapopa326+',
        port: 6543,
        ssl: { rejectUnauthorized: false }
    };

    async function runBiddingAnalysis() {
        const tracker = new BiddingHistoryTracker(dbConfig);
        
        try {
            await tracker.init();
            
            // –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞
            const auctionNumber = '2133'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–π –Ω–æ–º–µ—Ä
            const results = await tracker.analyzeAuctionWithBiddingHistory(auctionNumber);
            
            console.log('\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:');
            console.log(`–ê—É–∫—Ü–∏–æ–Ω: ${results.auctionNumber}`);
            console.log(`–õ–æ—Ç–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${results.totalLots}`);
            console.log(`–°—Ç–∞–≤–æ–∫ —Å–æ–±—Ä–∞–Ω–æ: ${results.totalBids}`);
            console.log(`–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: ${results.suspiciousPatterns.length}`);
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            await tracker.generateSuspiciousActivityReport(auctionNumber);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error.message);
        } finally {
            await tracker.close();
        }
    }

    runBiddingAnalysis();
}
