const { Pool } = require('pg');
const config = require('./config');

const pool = new Pool(config.dbConfig);

async function checkAuction943Duplicates() {
    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞ 943...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞ 943
        const query = `
            SELECT 
                auction_number,
                parsing_number,
                COUNT(*) as records_count,
                MIN(auction_end_date) as earliest_date,
                MAX(auction_end_date) as latest_date
            FROM auction_lots 
            WHERE auction_number = '943'
            GROUP BY auction_number, parsing_number
            ORDER BY parsing_number;
        `;
        
        const result = await pool.query(query);
        
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${result.rows.length} –≥—Ä—É–ø–ø –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞ 943:`);
        result.rows.forEach((row, index) => {
            console.log(`  ${index + 1}. –ê—É–∫—Ü–∏–æ–Ω ${row.auction_number}, parsing_number: ${row.parsing_number}`);
            console.log(`     –ó–∞–ø–∏—Å–µ–π: ${row.records_count}`);
            console.log(`     –ü–µ—Ä–∏–æ–¥: ${row.earliest_date} - ${row.latest_date}`);
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ parsing_number –µ—Å—Ç—å –¥–ª—è –¥—Ä—É–≥–∏—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤
        console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º parsing_number –¥–ª—è –≤—Å–µ—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤:');
        const allQuery = `
            SELECT 
                auction_number,
                parsing_number,
                COUNT(*) as records_count
            FROM auction_lots 
            WHERE auction_number IS NOT NULL
            GROUP BY auction_number, parsing_number
            HAVING COUNT(*) > 0
            ORDER BY auction_number, parsing_number;
        `;
        
        const allResult = await pool.query(allQuery);
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ auction_number
        const auctionGroups = {};
        allResult.rows.forEach(row => {
            if (!auctionGroups[row.auction_number]) {
                auctionGroups[row.auction_number] = [];
            }
            auctionGroups[row.auction_number].push({
                parsing_number: row.parsing_number,
                records_count: row.records_count
            });
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞—É–∫—Ü–∏–æ–Ω—ã —Å —Ä–∞–∑–Ω—ã–º–∏ parsing_number
        console.log('\nüìã –ê—É–∫—Ü–∏–æ–Ω—ã —Å —Ä–∞–∑–Ω—ã–º–∏ parsing_number:');
        Object.keys(auctionGroups).forEach(auctionNumber => {
            const groups = auctionGroups[auctionNumber];
            if (groups.length > 1) {
                console.log(`\nüîÑ –ê—É–∫—Ü–∏–æ–Ω ${auctionNumber}:`);
                groups.forEach(group => {
                    console.log(`  - parsing_number: ${group.parsing_number} (${group.records_count} –∑–∞–ø–∏—Å–µ–π)`);
                });
            }
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞—É–∫—Ü–∏–æ–Ω—ã —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ parsing_number
        console.log('\n‚úÖ –ê—É–∫—Ü–∏–æ–Ω—ã —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ parsing_number:');
        Object.keys(auctionGroups).forEach(auctionNumber => {
            const groups = auctionGroups[auctionNumber];
            if (groups.length === 1) {
                console.log(`  –ê—É–∫—Ü–∏–æ–Ω ${auctionNumber}: parsing_number = ${groups[0].parsing_number} (${groups[0].records_count} –∑–∞–ø–∏—Å–µ–π)`);
            }
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:', error);
    } finally {
        await pool.end();
    }
}

checkAuction943Duplicates();
