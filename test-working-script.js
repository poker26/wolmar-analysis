/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—á–µ–π –≤–µ—Ä—Å–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 * –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω–µ 961 (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä 2117) - –ø—Ä–æ–≤–µ—Ä—è–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
 */

const { Client } = require('pg');
const puppeteer = require('puppeteer-core');
const config = require('./config');

class TestWorkingUpdater {
    constructor() {
        this.dbConfig = config.dbConfig;
        this.dbClient = new Client(this.dbConfig);
        this.browser = null;
        this.page = null;
        
        this.stats = {
            processed: 0,
            updated: 0,
            skipped: 0,
            errors: 0,
            pagesProcessed: 0
        };
    }

    async init() {
        try {
            await this.dbClient.connect();
            console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
            
            await this.initBrowser();
            console.log('üåê –ë—Ä–∞—É–∑–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error.message);
            throw error;
        }
    }

    async initBrowser() {
        try {
            this.browser = await puppeteer.launch({
                executablePath: 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe',
                headless: true,
                args: ['--no-sandbox', '--disable-setuid-sandbox',
            '--user-data-dir=/tmp/chrome-temp-9g8ln',
            '--disable-metrics',
            '--disable-metrics-reporting',
            '--disable-background-mode',
            '--disable-background-timer-throttling',
            '--disable-renderer-backgrounding',
            '--disable-backgrounding-occluded-windows',
            '--disable-logging',
            '--disable-gpu-logging',
            '--disable-features=TranslateUI,BlinkGenPropertyTrees,VizDisplayCompositor']
            });
            this.page = await this.browser.newPage();
            await this.page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞:', error.message);
            throw error;
        }
    }

    extractConditionWithGrade(conditionText) {
        if (!conditionText) return null;
        return conditionText.replace(/\s+/g, '');
    }

    async testPaginationDetection() {
        console.log('\nüß™ –¢–ï–°–¢–ò–†–£–ï–ú –£–õ–£–ß–®–ï–ù–ù–û–ï –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–ê–ì–ò–ù–ê–¶–ò–ò:');
        
        const auctionUrl = 'https://www.wolmar.ru/auction/2117';
        console.log(`üìÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞: ${auctionUrl}`);
        
        await this.page.goto(auctionUrl, { waitUntil: 'networkidle2', timeout: 30000 });
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // –£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
        const totalPages = await this.page.evaluate(() => {
            // –°–ø–æ—Å–æ–± 1: –ò—â–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
            const pagination = document.querySelector('.pagination');
            if (pagination) {
                console.log('–ù–∞–π–¥–µ–Ω–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏—è:', pagination.textContent);
                const pageLinks = pagination.querySelectorAll('a');
                let maxPage = 1;
                
                pageLinks.forEach(link => {
                    const text = link.textContent.trim();
                    const pageNum = parseInt(text);
                    if (!isNaN(pageNum) && pageNum > maxPage) {
                        maxPage = pageNum;
                    }
                });
                
                if (maxPage > 1) return maxPage;
            }
            
            // –°–ø–æ—Å–æ–± 2: –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ —Ç–µ–∫—Å—Ç–µ
            const pageLinks = document.querySelectorAll('a[href*="page="]');
            let maxPage = 1;
            
            pageLinks.forEach(link => {
                const href = link.href;
                const pageMatch = href.match(/page=(\d+)/);
                if (pageMatch) {
                    const pageNum = parseInt(pageMatch[1]);
                    if (pageNum > maxPage) {
                        maxPage = pageNum;
                    }
                }
            });
            
            // –°–ø–æ—Å–æ–± 3: –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É 2
            if (maxPage === 1) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É 2
                const page2Link = document.querySelector('a[href*="page=2"]');
                if (page2Link) {
                    maxPage = 2; // –ú–∏–Ω–∏–º—É–º 2 —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                }
            }
            
            return maxPage;
        });
        
        console.log(`üìÑ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ ${totalPages} —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞`);
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        let allLotsData = [];
        let targetLotFound = false;
        
        for (let pageNum = 1; pageNum <= totalPages; pageNum++) {
            console.log(`\nüìñ –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É ${pageNum}/${totalPages}...`);
            
            if (pageNum > 1) {
                const pageUrl = `${auctionUrl}?page=${pageNum}`;
                await this.page.goto(pageUrl, { waitUntil: 'networkidle2', timeout: 30000 });
                await new Promise(resolve => setTimeout(resolve, 2000));
            }
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ª–æ—Ç–∞—Ö —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
            const pageLotsData = await this.page.evaluate(() => {
                const lots = [];
                
                // –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—ã —Å –ª–æ—Ç–∞–º–∏
                const tables = document.querySelectorAll('table');
                
                tables.forEach(table => {
                    const rows = table.querySelectorAll('tr');
                    
                    rows.forEach(row => {
                        const cells = row.querySelectorAll('td, th');
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å –ª–æ—Ç–æ–º (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 10 —è—á–µ–µ–∫ –∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ –ª–æ—Ç)
                        if (cells.length >= 10) {
                            const lotLink = row.querySelector('a[href*="/auction/"]');
                            
                            if (lotLink) {
                                const lotUrl = lotLink.href;
                                const lotNumberMatch = lotUrl.match(/\/auction\/\d+\/(\d+)/);
                                const lotNumber = lotNumberMatch ? lotNumberMatch[1] : null;
                                
                                // –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ 6-–π —è—á–µ–π–∫–µ (–∏–Ω–¥–µ–∫—Å 5)
                                const conditionCell = cells[5];
                                const condition = conditionCell ? conditionCell.textContent.trim() : null;
                                
                                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                                const nameCell = cells[1];
                                const yearCell = cells[2];
                                const lettersCell = cells[3];
                                const metalCell = cells[4];
                                
                                if (lotNumber && condition && condition.match(/^(MS|PF|AU|UNC|XF|VF|VG|F|G|PR|PL|Proof|Gem)/i)) {
                                    lots.push({
                                        lotNumber: lotNumber,
                                        lotUrl: lotUrl,
                                        condition: condition,
                                        name: nameCell ? nameCell.textContent.trim() : '',
                                        year: yearCell ? yearCell.textContent.trim() : '',
                                        letters: lettersCell ? lettersCell.textContent.trim() : '',
                                        metal: metalCell ? metalCell.textContent.trim() : ''
                                    });
                                }
                            }
                        }
                    });
                });
                
                return lots;
            });
            
            allLotsData = allLotsData.concat(pageLotsData);
            this.stats.pagesProcessed++;
            
            console.log(`  üìä –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageNum}: –Ω–∞–π–¥–µ–Ω–æ ${pageLotsData.length} –ª–æ—Ç–æ–≤`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ü–µ–ª–µ–≤–æ–π –ª–æ—Ç –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            const targetLot = pageLotsData.find(lot => lot.lotNumber === '7478027');
            if (targetLot) {
                console.log(`  üéØ –ù–ê–ô–î–ï–ù –¶–ï–õ–ï–í–û–ô –õ–û–¢ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${pageNum}:`);
                console.log(`    –ù–æ–º–µ—Ä: ${targetLot.lotNumber}`);
                console.log(`    –°–æ—Å—Ç–æ—è–Ω–∏–µ: "${targetLot.condition}"`);
                console.log(`    URL: ${targetLot.lotUrl}`);
                targetLotFound = true;
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –ª–æ—Ç–∞ —Å –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            if (pageLotsData.length > 0) {
                console.log(`  üìã –ü–µ—Ä–≤—ã–µ 3 –ª–æ—Ç–∞ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${pageNum}:`);
                pageLotsData.slice(0, 3).forEach((lot, index) => {
                    console.log(`    ${index + 1}. –õ–æ—Ç ${lot.lotNumber}: "${lot.condition}"`);
                });
            }
            
            // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
            if (pageNum < totalPages) {
                await new Promise(resolve => setTimeout(resolve, 1000));
            }
        }
        
        console.log(`\nüìä –ò–¢–û–ì–û –Ω–∞–π–¥–µ–Ω–æ ${allLotsData.length} –ª–æ—Ç–æ–≤ —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –Ω–∞ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö`);
        
        if (!targetLotFound) {
            console.log(`‚ùå –õ–æ—Ç 7478027 –ù–ï –ù–ê–ô–î–ï–ù –Ω–∞ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö`);
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º
        const conditionStats = {};
        allLotsData.forEach(lot => {
            const condition = lot.condition;
            conditionStats[condition] = (conditionStats[condition] || 0) + 1;
        });
        
        console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º:`);
        Object.entries(conditionStats)
            .sort((a, b) => b[1] - a[1])
            .slice(0, 10)
            .forEach(([condition, count]) => {
                console.log(`  "${condition}": ${count} –ª–æ—Ç–æ–≤`);
            });
        
        return allLotsData;
    }

    async run() {
        try {
            await this.init();
            
            console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–ë–û–ß–ï–ô –í–ï–†–°–ò–ò –°–ö–†–ò–ü–¢–ê');
            console.log('üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞ 2117');
            
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            const lotsData = await this.testPaginationDetection();
            
            console.log('\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!');
            console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: ${this.stats.pagesProcessed}`);
            console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ª–æ—Ç–æ–≤: ${lotsData.length}`);
            console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${this.stats.updated}`);
            console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${this.stats.skipped}`);
            console.log(`‚ùå –û—à–∏–±–æ–∫: ${this.stats.errors}`);
            
        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
        } finally {
            await this.cleanup();
        }
    }

    async cleanup() {
        try {
            if (this.browser) {
                await this.browser.close();
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞:', error.message);
        }
        
        try {
            if (this.dbClient) {
                await this.dbClient.end();
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ë–î:', error.message);
        }
        
        console.log('üßπ –†–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã');
    }
}

async function main() {
    const tester = new TestWorkingUpdater();
    await tester.run();
}

main();
