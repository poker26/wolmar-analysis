const { Pool } = require('pg');
const config = require('./config.js');
const CollectionPriceService = require('./collection-price-service.js');

async function debugLot60() {
    const pool = new Pool(config.dbConfig);
    
    try {
        console.log('üîç –û—Ç–ª–∞–¥–∫–∞ –ª–æ—Ç–∞ 60...');
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ª–æ—Ç–∞ 60
        const lotResult = await pool.query(`
            SELECT id, lot_number, auction_number, coin_description, metal, condition, year, weight, letters, winning_bid
            FROM auction_lots 
            WHERE lot_number = '60' AND auction_number = '970'
        `);
        
        if (lotResult.rows.length === 0) {
            console.log('‚ùå –õ–æ—Ç 60 –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
            return;
        }
        
        const lot = lotResult.rows[0];
        console.log('üìã –î–∞–Ω–Ω—ã–µ –ª–æ—Ç–∞ 60:', {
            id: lot.id,
            lot_number: lot.lot_number,
            auction_number: lot.auction_number,
            metal: lot.metal,
            condition: lot.condition,
            year: lot.year,
            weight: lot.weight,
            winning_bid: lot.winning_bid,
            description: lot.coin_description?.substring(0, 100) + '...'
        });
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å
        console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å...');
        const collectionPriceService = new CollectionPriceService(pool);
        await collectionPriceService.init();
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ—Å—á–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
        console.log('üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ—Å—á–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–Ω–æ–π —Ü–µ–Ω—ã...');
        const result = await collectionPriceService.recalculateLotPredictions([lot.id]);
        
        console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ—Å—á–µ—Ç–∞:');
        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${result.updated} –ª–æ—Ç–æ–≤`);
        console.log(`‚ùå –û—à–∏–±–æ–∫: ${result.errors}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑–µ
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
        const predictionResult = await pool.query(`
            SELECT 
                lpp.predicted_price,
                lpp.confidence_score,
                lpp.prediction_method,
                lpp.created_at
            FROM lot_price_predictions lpp
            WHERE lpp.lot_id = $1
        `, [lot.id]);
        
        if (predictionResult.rows.length > 0) {
            const pred = predictionResult.rows[0];
            const price = pred.predicted_price ? parseFloat(pred.predicted_price).toLocaleString() + '‚ÇΩ' : 'null';
            const confidence = pred.confidence_score ? (pred.confidence_score * 100).toFixed(0) + '%' : '0%';
            const method = pred.prediction_method || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
            const date = pred.created_at ? new Date(pred.created_at).toLocaleString('ru-RU') : '–Ω–µ —É–∫–∞–∑–∞–Ω–∞';
            
            console.log(`üìà –ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –ª–æ—Ç–∞ 60: ${price} (${method}, ${confidence}) - ${date}`);
        } else {
            console.log('‚ùå –ü—Ä–æ–≥–Ω–æ–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    } finally {
        await pool.end();
    }
}

debugLot60();
