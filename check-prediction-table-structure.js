const { Pool } = require('pg');
const config = require('./config');

const pool = new Pool(config.dbConfig);

async function checkPredictionTableStructure() {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã lot_price_predictions
        const tableInfo = await pool.query(`
            SELECT column_name, data_type, is_nullable
            FROM information_schema.columns 
            WHERE table_name = 'lot_price_predictions'
            ORDER BY ordinal_position
        `);
        
        console.log('üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã lot_price_predictions:');
        tableInfo.rows.forEach(row => {
            console.log(`  - ${row.column_name}: ${row.data_type} (nullable: ${row.is_nullable})`);
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ
        const countResult = await pool.query(`
            SELECT COUNT(*) as total_count,
                   COUNT(CASE WHEN created_at IS NOT NULL THEN 1 END) as with_created_at
            FROM lot_price_predictions
        `);
        
        console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞–±–ª–∏—Ü—ã lot_price_predictions:');
        console.log(`  - –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${countResult.rows[0].total_count}`);
        console.log(`  - –° –¥–∞—Ç–æ–π —Å–æ–∑–¥–∞–Ω–∏—è: ${countResult.rows[0].with_created_at}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π —Å –¥–∞—Ç–∞–º–∏
        const sampleResult = await pool.query(`
            SELECT lot_id, predicted_price, created_at
            FROM lot_price_predictions
            WHERE created_at IS NOT NULL
            ORDER BY created_at DESC
            LIMIT 5
        `);
        
        console.log('\nüìÖ –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π —Å –¥–∞—Ç–∞–º–∏:');
        sampleResult.rows.forEach((row, index) => {
            console.log(`  ${index + 1}. –õ–æ—Ç ${row.lot_id}: ${row.predicted_price}‚ÇΩ (—Å–æ–∑–¥–∞–Ω: ${row.created_at})`);
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    } finally {
        await pool.end();
    }
}

checkPredictionTableStructure();
