/**
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ª–æ—Ç–æ–≤
 * —á–µ—Ä–µ–∑ —Å–≤—è–∑—å –ø–æ URL —Å –æ–±—â–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –∞—É–∫—Ü–∏–æ–Ω–æ–≤
 * 
 * –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:
 * - –í 30+ —Ä–∞–∑ –±—ã—Å—Ç—Ä–µ–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞
 * - –°–≤—è–∑—å –ø–æ URL —Å—Ç–∞–±–∏–ª—å–Ω–∞ –∏ –Ω–∞–¥–µ–∂–Ω–∞
 * - –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –≥—Ä–∞–¥–∞—Ü–∏—è–º–∏ –∑–∞ –æ–¥–∏–Ω –ø—Ä–æ—Ö–æ–¥
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
 * 
 * –í–µ—Ä—Å–∏—è: 1.0
 * –î–∞—Ç–∞: 18.09.2025
 */

const { Client } = require('pg');
const puppeteer = require('puppeteer-core');
const fs = require('fs');
const config = require('./config');

class OptimizedMassUpdater {
    constructor() {
        this.dbConfig = config.dbConfig;
        this.dbClient = new Client(this.dbConfig);
        this.browser = null;
        this.page = null;
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        this.stats = {
            processed: 0,
            updated: 0,
            skipped: 0,
            errors: 0,
            auctionsProcessed: 0,
            startTime: null
        };
        
        this.progressFile = 'optimized_mass_update_progress.json';
        this.loadProgress();
    }

    async init() {
        try {
            await this.dbClient.connect();
            console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
            
            await this.initBrowser();
            console.log('üåê –ë—Ä–∞—É–∑–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            
            this.stats.startTime = new Date();
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error.message);
            throw error;
        }
    }

    async initBrowser() {
        try {
            this.browser = await puppeteer.launch({
                executablePath: 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe',
                headless: true,
                args: ['--no-sandbox', '--disable-setuid-sandbox',
                            '--user-data-dir=/tmp/chrome-temp-bxyh3',
                            '--disable-metrics',
                            '--disable-metrics-reporting',
                            '--disable-background-mode',
                            '--disable-background-timer-throttling',
                            '--disable-renderer-backgrounding',
                            '--disable-backgrounding-occluded-windows',
                            '--disable-logging',
                            '--disable-gpu-logging',
                            '--disable-features=TranslateUI,BlinkGenPropertyTrees,VizDisplayCompositor']
            });
            this.page = await this.browser.newPage();
            await this.page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞:', error.message);
            throw error;
        }
    }

    loadProgress() {
        try {
            if (fs.existsSync(this.progressFile)) {
                const data = JSON.parse(fs.readFileSync(this.progressFile, 'utf8'));
                this.stats = { ...this.stats, ...data.stats };
                console.log(`üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å: ${this.stats.processed} –ª–æ—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ`);
            }
        } catch (error) {
            console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å, –Ω–∞—á–∏–Ω–∞–µ–º —Å –Ω–∞—á–∞–ª–∞');
        }
    }

    saveProgress() {
        try {
            const progressData = {
                stats: this.stats,
                timestamp: new Date().toISOString()
            };
            fs.writeFileSync(this.progressFile, JSON.stringify(progressData, null, 2));
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error.message);
        }
    }

    printStats() {
        const elapsed = Math.floor((new Date() - this.stats.startTime) / 1000);
        const rate = this.stats.processed > 0 ? (this.stats.processed / elapsed * 60).toFixed(1) : 0;
        
        console.log(`\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: ${this.stats.processed} –ª–æ—Ç–æ–≤ | –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${this.stats.updated} | –û—à–∏–±–æ–∫: ${this.stats.errors} | –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${this.stats.skipped} | –°–∫–æ—Ä–æ—Å—Ç—å: ${rate} –ª–æ—Ç–æ–≤/–º–∏–Ω`);
        console.log(`üèÜ –ê—É–∫—Ü–∏–æ–Ω–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${this.stats.auctionsProcessed}`);
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –≥—Ä–∞–¥–∞—Ü–∏–µ–π
    extractConditionWithGrade(conditionText) {
        if (!conditionText) return null;
        // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã –¥–ª—è —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏
        return conditionText.replace(/\s+/g, '');
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞—É–∫—Ü–∏–æ–Ω–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    async getAuctionsToProcess() {
        console.log('üìä –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞—É–∫—Ü–∏–æ–Ω–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏...');
        
        const query = `
            SELECT DISTINCT 
                SUBSTRING(source_url FROM '/auction/([^/]+)/') as internal_auction_number,
                auction_number
            FROM auction_lots 
            WHERE source_url IS NOT NULL
            ORDER BY auction_number DESC
            LIMIT 50;
        `;
        
        const result = await this.dbClient.query(query);
        console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${result.rows.length} –∞—É–∫—Ü–∏–æ–Ω–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏`);
        
        return result.rows;
    }

    // –ü–∞—Ä—Å–∏–º –æ–±—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞—É–∫—Ü–∏–æ–Ω–∞
    async parseAuctionPage(internalAuctionNumber) {
        const auctionUrl = `https://www.wolmar.ru/auction/${internalAuctionNumber}`;
        console.log(`\nüîç –ü–∞—Ä—Å–∏–º –∞—É–∫—Ü–∏–æ–Ω ${internalAuctionNumber}: ${auctionUrl}`);
        
        try {
            await this.page.goto(auctionUrl, { waitUntil: 'networkidle2', timeout: 30000 });
            await new Promise(resolve => setTimeout(resolve, 2000));
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ª–æ—Ç–∞—Ö —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
            const lotsData = await this.page.evaluate(() => {
                const lots = [];
                
                // –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—ã —Å –ª–æ—Ç–∞–º–∏
                const tables = document.querySelectorAll('table');
                
                tables.forEach(table => {
                    const rows = table.querySelectorAll('tr');
                    
                    rows.forEach(row => {
                        const cells = row.querySelectorAll('td, th');
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å –ª–æ—Ç–æ–º (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 10 —è—á–µ–µ–∫ –∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ –ª–æ—Ç)
                        if (cells.length >= 10) {
                            const lotLink = row.querySelector('a[href*="/auction/"]');
                            
                            if (lotLink) {
                                const lotUrl = lotLink.href;
                                const lotNumberMatch = lotUrl.match(/\/auction\/\d+\/(\d+)/);
                                const lotNumber = lotNumberMatch ? lotNumberMatch[1] : null;
                                
                                // –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ 6-–π —è—á–µ–π–∫–µ (–∏–Ω–¥–µ–∫—Å 5)
                                const conditionCell = cells[5];
                                const condition = conditionCell ? conditionCell.textContent.trim() : null;
                                
                                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                                const nameCell = cells[1];
                                const yearCell = cells[2];
                                const lettersCell = cells[3];
                                const metalCell = cells[4];
                                
                                if (lotNumber && condition && condition.match(/^(MS|PF|AU|UNC|XF|VF|VG|F|G|PR|PL|Proof|Gem)/i)) {
                                    lots.push({
                                        lotNumber: lotNumber,
                                        lotUrl: lotUrl,
                                        condition: condition,
                                        name: nameCell ? nameCell.textContent.trim() : '',
                                        year: yearCell ? yearCell.textContent.trim() : '',
                                        letters: lettersCell ? lettersCell.textContent.trim() : '',
                                        metal: metalCell ? metalCell.textContent.trim() : ''
                                    });
                                }
                            }
                        }
                    });
                });
                
                return lots;
            });
            
            console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${lotsData.length} –ª–æ—Ç–æ–≤ —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏`);
            return lotsData;
            
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞—É–∫—Ü–∏–æ–Ω–∞ ${internalAuctionNumber}:`, error.message);
            return [];
        }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ—Ç—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–∞
    async updateLotsFromAuctionData(lotsData) {
        let auctionUpdated = 0;
        let auctionSkipped = 0;
        
        for (const lot of lotsData) {
            try {
                const newCondition = this.extractConditionWithGrade(lot.condition);
                
                // –ò—â–µ–º –ª–æ—Ç –≤ –±–∞–∑–µ –ø–æ URL
                const findQuery = `
                    SELECT id, lot_number, condition 
                    FROM auction_lots 
                    WHERE source_url = $1;
                `;
                const findResult = await this.dbClient.query(findQuery, [lot.lotUrl]);
                
                if (findResult.rows.length > 0) {
                    const lotRecord = findResult.rows[0];
                    const oldCondition = lotRecord.condition;
                    
                    if (oldCondition !== newCondition) {
                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                        const updateQuery = `
                            UPDATE auction_lots 
                            SET condition = $1 
                            WHERE id = $2;
                        `;
                        await this.dbClient.query(updateQuery, [newCondition, lotRecord.id]);
                        console.log(`‚úÖ –õ–æ—Ç ${lotRecord.lot_number}: "${oldCondition}" -> "${newCondition}"`);
                        auctionUpdated++;
                        this.stats.updated++;
                    } else {
                        console.log(`‚è≠Ô∏è –õ–æ—Ç ${lotRecord.lot_number}: –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ("${oldCondition}")`);
                        auctionSkipped++;
                        this.stats.skipped++;
                    }
                } else {
                    console.log(`‚ö†Ô∏è –õ–æ—Ç ${lot.lotNumber}: –ù–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
                    auctionSkipped++;
                    this.stats.skipped++;
                }
                
                this.stats.processed++;
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 50 –ª–æ—Ç–æ–≤
                if (this.stats.processed % 50 === 0) {
                    this.saveProgress();
                    this.printStats();
                }
                
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ—Ç–∞ ${lot.lotNumber}:`, error.message);
                this.stats.errors++;
            }
        }
        
        console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞—É–∫—Ü–∏–æ–Ω–∞: –û–±–Ω–æ–≤–ª–µ–Ω–æ ${auctionUpdated}, –ü—Ä–æ–ø—É—â–µ–Ω–æ ${auctionSkipped}`);
        return { updated: auctionUpdated, skipped: auctionSkipped };
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–¥–∏–Ω –∞—É–∫—Ü–∏–æ–Ω
    async processAuction(internalAuctionNumber, auctionNumber) {
        console.log(`\nüèÜ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–∫—Ü–∏–æ–Ω ${auctionNumber} (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä: ${internalAuctionNumber})`);
        
        // –ü–∞—Ä—Å–∏–º –æ–±—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞—É–∫—Ü–∏–æ–Ω–∞
        const lotsData = await this.parseAuctionPage(internalAuctionNumber);
        
        if (lotsData.length === 0) {
            console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –æ–±—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
            return;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ—Ç—ã
        const result = await this.updateLotsFromAuctionData(lotsData);
        
        this.stats.auctionsProcessed++;
        this.saveProgress();
        
        return result;
    }

    // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞
    async run() {
        try {
            await this.init();
            
            console.log('üöÄ –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π');
            console.log('üìã –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –ü–∞—Ä—Å–∏–Ω–≥ –æ–±—â–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –∞—É–∫—Ü–∏–æ–Ω–æ–≤ + —Å–≤—è–∑—å –ø–æ URL');
            
            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞—É–∫—Ü–∏–æ–Ω–æ–≤
            const auctions = await this.getAuctionsToProcess();
            
            if (auctions.length === 0) {
                console.log('‚ùå –ê—É–∫—Ü–∏–æ–Ω—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                return;
            }
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∞—É–∫—Ü–∏–æ–Ω
            for (const auction of auctions) {
                try {
                    await this.processAuction(auction.internal_auction_number, auction.auction_number);
                    
                    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∞—É–∫—Ü–∏–æ–Ω–∞–º–∏
                    await new Promise(resolve => setTimeout(resolve, 1000));
                    
                } catch (error) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–∫—Ü–∏–æ–Ω–∞ ${auction.auction_number}:`, error.message);
                    this.stats.errors++;
                }
            }
            
            // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            console.log('\nüéâ –û–ë–ù–û–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!');
            this.printStats();
            
            const totalTime = Math.floor((new Date() - this.stats.startTime) / 1000);
            console.log(`‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: ${Math.floor(totalTime / 60)}–º ${totalTime % 60}—Å`);
            
        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
        } finally {
            await this.cleanup();
        }
    }

    async cleanup() {
        if (this.browser) {
            await this.browser.close();
        }
        if (this.dbClient) {
            await this.dbClient.end();
        }
        console.log('üßπ –†–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã');
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
process.on('SIGINT', () => {
    console.log('\n‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è. –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å...');
    process.exit(0);
});

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
async function main() {
    const updater = new OptimizedMassUpdater();
    await updater.run();
}

main();
