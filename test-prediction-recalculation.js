const { spawn } = require('child_process');

console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ—Å—á–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–æ–≤...');

// –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ simplified-price-predictor.js —Å —Ñ–ª–∞–≥–æ–º --watchlist
const testProcess = spawn('node', ['simplified-price-predictor.js', '--watchlist', '112527'], {
    cwd: __dirname,
    stdio: ['ignore', 'pipe', 'pipe']
});

let output = '';
let errorOutput = '';

testProcess.stdout.on('data', (data) => {
    output += data.toString();
    console.log('üì§ STDOUT:', data.toString().trim());
});

testProcess.stderr.on('data', (data) => {
    errorOutput += data.toString();
    console.log('‚ùå STDERR:', data.toString().trim());
});

testProcess.on('close', (code) => {
    console.log(`\nüèÅ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º: ${code}`);
    
    if (code === 0) {
        console.log('‚úÖ –ü–µ—Ä–µ—Å—á–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!');
    } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤');
        console.log('üìä –ü–æ–ª–Ω—ã–π –≤—ã–≤–æ–¥:', output);
        console.log('üìä –ü–æ–ª–Ω—ã–µ –æ—à–∏–±–∫–∏:', errorOutput);
    }
});

testProcess.on('error', (error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞:', error.message);
});
