// –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞–º–∏
let refreshInterval;
let currentLogType = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', function() {
    initializeAdminPanel();
    setupEventListeners();
    startAutoRefresh();
});

function initializeAdminPanel() {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏...');
    refreshStatus();
    loadSchedule();
    loadCatalogProgress(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–∞—Ä—Å–µ—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
}

function setupEventListeners() {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –ø–∞—Ä—Å–µ—Ä–∞
    document.getElementById('parser-mode').addEventListener('change', function() {
        const resumeInput = document.getElementById('resume-lot-input');
        if (this.value === 'resume') {
            resumeInput.classList.remove('hidden');
        } else {
            resumeInput.classList.add('hidden');
        }
    });
}

function startAutoRefresh() {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    refreshInterval = setInterval(refreshStatus, 5000);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
async function refreshStatus() {
    try {
        console.log('üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...');
        const response = await fetch('/api/admin/status');
        const data = await response.json();
        
        updateStatusDisplay(data);
        
        // –¢–∞–∫–∂–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–∞—Ä—Å–µ—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
        loadCatalogProgress();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–µ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        console.log('üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—Ä—Å–µ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...');
        refreshCategoryParserStatus();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
        updateStatusDisplay({
            mainParser: { status: 'error', message: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è' },
            updateParser: { status: 'error', message: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è' },
            schedule: { status: 'error', message: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è' }
        });
    }
}

function updateStatusDisplay(data) {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞
    const mainStatus = document.getElementById('main-parser-status');
    if (data.mainParser) {
        mainStatus.innerHTML = `<span class="status-${data.mainParser.status}">${data.mainParser.message}</span>`;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    const updateStatus = document.getElementById('update-parser-status');
    if (data.updateParser) {
        updateStatus.innerHTML = `<span class="status-${data.updateParser.status}">${data.updateParser.message}</span>`;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
    const predictionsStatus = document.getElementById('predictions-status');
    if (data.predictionsGenerator) {
        predictionsStatus.innerHTML = `<span class="status-${data.predictionsGenerator.status}">${data.predictionsGenerator.message}</span>`;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–µ—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞
    const catalogParserStatus = document.getElementById('catalog-parser-status');
    if (data.catalogParser) {
        catalogParserStatus.innerHTML = `<span class="status-${data.catalogParser.status}">${data.catalogParser.message}</span>`;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    const scheduleStatus = document.getElementById('schedule-status');
    if (data.schedule) {
        scheduleStatus.innerHTML = `<span class="status-${data.schedule.status}">${data.schedule.message}</span>`;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    updateButtons(data);
}

function updateButtons(data) {
    const startMainBtn = document.getElementById('start-main-btn');
    const stopMainBtn = document.getElementById('stop-main-btn');
    const startUpdateBtn = document.getElementById('start-update-btn');
    const stopUpdateBtn = document.getElementById('stop-update-btn');
    const startPredictionsBtn = document.getElementById('start-predictions-btn');
    const stopPredictionsBtn = document.getElementById('stop-predictions-btn');
    const startCatalogBtn = document.getElementById('start-catalog-btn');
    const stopCatalogBtn = document.getElementById('stop-catalog-btn');

    // –û—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä—Å–µ—Ä
    if (data.mainParser && data.mainParser.status === 'running') {
        startMainBtn.disabled = true;
        stopMainBtn.disabled = false;
    } else {
        startMainBtn.disabled = false;
        stopMainBtn.disabled = true;
    }

    // –ü–∞—Ä—Å–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    if (data.updateParser && data.updateParser.status === 'running') {
        startUpdateBtn.disabled = true;
        stopUpdateBtn.disabled = false;
    } else {
        startUpdateBtn.disabled = false;
        stopUpdateBtn.disabled = true;
    }

    // –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
    if (data.predictionsGenerator && data.predictionsGenerator.status === 'running') {
        startPredictionsBtn.disabled = true;
        stopPredictionsBtn.disabled = false;
    } else {
        startPredictionsBtn.disabled = false;
        stopPredictionsBtn.disabled = true;
    }

    // –ü–∞—Ä—Å–µ—Ä –∫–∞—Ç–∞–ª–æ–≥–∞
    if (data.catalogParser && data.catalogParser.status === 'running') {
        startCatalogBtn.disabled = true;
        stopCatalogBtn.disabled = false;
    } else {
        startCatalogBtn.disabled = false;
        stopCatalogBtn.disabled = true;
    }
}

// –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞
async function startMainParser() {
    const auctionNumber = document.getElementById('auction-number').value;
    const mode = document.getElementById('parser-mode').value;
    const resumeLot = document.getElementById('resume-lot').value;

    if (!auctionNumber) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞—É–∫—Ü–∏–æ–Ω–∞');
        return;
    }

    if (mode === 'resume' && !resumeLot) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ª–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è');
        return;
    }

    try {
        const response = await fetch('/api/admin/start-main-parser', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                auctionNumber: parseInt(auctionNumber),
                mode: mode,
                resumeLot: resumeLot ? parseInt(resumeLot) : null
            })
        });

        const result = await response.json();
        
        if (result.success) {
            alert('–û—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä—Å–µ—Ä –∑–∞–ø—É—â–µ–Ω');
            refreshStatus();
        } else {
            alert('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: ' + result.error);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞:', error);
        alert('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞');
    }
}

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞
async function stopMainParser() {
    try {
        const response = await fetch('/api/admin/stop-main-parser', {
            method: 'POST'
        });

        const result = await response.json();
        
        if (result.success) {
            alert('–û—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä—Å–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
            refreshStatus();
        } else {
            alert('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: ' + result.error);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞:', error);
        alert('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞');
    }
}

// –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
async function startUpdateParser() {
    const auctionNumber = document.getElementById('update-auction-number').value;
    const startIndex = document.getElementById('update-start-index').value;

    if (!auctionNumber) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞—É–∫—Ü–∏–æ–Ω–∞');
        return;
    }

    try {
        const response = await fetch('/api/admin/start-update-parser', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                auctionNumber: parseInt(auctionNumber),
                startIndex: startIndex ? parseInt(startIndex) : null
            })
        });

        const result = await response.json();
        
        if (result.success) {
            alert('–ü–∞—Ä—Å–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω');
            refreshStatus();
        } else {
            alert('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: ' + result.error);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:', error);
        alert('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π');
    }
}

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
async function stopUpdateParser() {
    try {
        const response = await fetch('/api/admin/stop-update-parser', {
            method: 'POST'
        });

        const result = await response.json();
        
        if (result.success) {
            alert('–ü–∞—Ä—Å–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
            refreshStatus();
        } else {
            alert('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: ' + result.error);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:', error);
        alert('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π');
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
async function saveSchedule() {
    const time = document.getElementById('schedule-time').value;
    const auctionNumber = document.getElementById('schedule-auction').value;

    if (!time || !auctionNumber) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
        return;
    }

    try {
        const response = await fetch('/api/admin/schedule', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                time: time,
                auctionNumber: parseInt(auctionNumber)
            })
        });

        const result = await response.json();
        
        if (result.success) {
            alert('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ');
            loadSchedule();
        } else {
            alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ' + result.error);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', error);
        alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è');
    }
}

// –£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
async function deleteSchedule() {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?')) {
        return;
    }

    try {
        const response = await fetch('/api/admin/schedule', {
            method: 'DELETE'
        });

        const result = await response.json();
        
        if (result.success) {
            alert('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ');
            loadSchedule();
        } else {
            alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ' + result.error);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', error);
        alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è');
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
async function loadSchedule() {
    try {
        const response = await fetch('/api/admin/schedule');
        const data = await response.json();
        
        if (data.schedule) {
            document.getElementById('schedule-time').value = data.schedule.time;
            document.getElementById('schedule-auction').value = data.schedule.auctionNumber;
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', error);
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞
async function showMainLogs() {
    currentLogType = 'main';
    await loadLogs('main');
}

// –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –ø–∞—Ä—Å–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
async function showUpdateLogs() {
    currentLogType = 'update';
    await loadLogs('update');
}

// –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
async function showPredictionsLogs() {
    currentLogType = 'predictions';
    await loadLogs('predictions');
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ–≤
async function loadLogs(type) {
    try {
        const response = await fetch(`/api/admin/logs/${type}`);
        const data = await response.json();
        
        const logContainer = document.getElementById('log-container');
        if (data.logs && data.logs.length > 0) {
            logContainer.innerHTML = data.logs.map(log => 
                `<div class="mb-1">${log}</div>`
            ).join('');
            logContainer.scrollTop = logContainer.scrollHeight;
        } else {
            logContainer.innerHTML = '<div class="text-gray-400">–õ–æ–≥–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</div>';
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤:', error);
        document.getElementById('log-container').innerHTML = 
            '<div class="text-red-400">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤</div>';
    }
}

// –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤
async function clearLogs() {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ª–æ–≥–∏ (–æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä—Å–µ—Ä, –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –ø—Ä–æ–≥–Ω–æ–∑—ã, –∫–∞—Ç–∞–ª–æ–≥, –ø–∞—Ä—Å–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π)?')) {
        return;
    }

    try {
        const response = await fetch('/api/admin/logs/clear', {
            method: 'POST'
        });

        const result = await response.json();
        
        if (result.success) {
            alert(result.message || '–í—Å–µ –ª–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã');
            if (currentLogType) {
                await loadLogs(currentLogType);
            }
        } else {
            alert('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: ' + result.error);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤:', error);
        alert('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤');
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–∞—Ä—Å–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
async function loadUpdateProgress(auctionNumber) {
    try {
        const response = await fetch(`/api/admin/update-progress/${auctionNumber}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ HTML
        const contentType = response.headers.get('content-type');
        if (!contentType || !contentType.includes('application/json')) {
            console.warn('API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ JSON, –≤–æ–∑–º–æ–∂–Ω–æ —Å–µ—Ä–≤–µ—Ä –Ω–µ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω');
            return;
        }
        
        const data = await response.json();
        
        const progressInfo = document.getElementById('update-progress-info');
        const progressText = document.getElementById('update-progress-text');
        const progressBar = document.getElementById('progress-bar');
        
        if (data.progress) {
            const progress = data.progress;
            const percentage = Math.round((progress.currentIndex / progress.totalLots) * 100);
            const lastUpdate = new Date(progress.lastUpdate).toLocaleString();
            
            progressText.textContent = `–ü—Ä–æ–≥—Ä–µ—Å—Å: ${progress.currentIndex}/${progress.totalLots} (${percentage}%) | –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${lastUpdate}`;
            progressBar.style.width = `${percentage}%`;
            progressInfo.classList.remove('hidden');
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å
            const startIndexInput = document.getElementById('update-start-index');
            if (startIndexInput && !startIndexInput.value) {
                startIndexInput.value = progress.currentIndex;
                startIndexInput.placeholder = `–ê–≤—Ç–æ–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –ª–æ—Ç–∞ ${progress.currentIndex}`;
            }
        } else {
            progressInfo.classList.add('hidden');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
async function refreshUpdateProgress() {
    const auctionNumber = document.getElementById('update-auction-number').value;
    if (auctionNumber) {
        await loadUpdateProgress(auctionNumber);
    }
}

// –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
async function clearUpdateProgress() {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å? –≠—Ç–æ —É–¥–∞–ª–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞.')) {
        return;
    }
    
    const auctionNumber = document.getElementById('update-auction-number').value;
    if (!auctionNumber) {
        alert('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞—É–∫—Ü–∏–æ–Ω–∞');
        return;
    }
    
    try {
        const response = await fetch(`/api/admin/clear-update-progress/${auctionNumber}`, {
            method: 'POST'
        });
        
        const result = await response.json();
        
        if (result.success) {
            alert('–ü—Ä–æ–≥—Ä–µ—Å—Å –æ—á–∏—â–µ–Ω');
            document.getElementById('update-progress-info').classList.add('hidden');
            document.getElementById('update-start-index').value = '';
            document.getElementById('update-start-index').placeholder = '–ù–∞–ø—Ä–∏–º–µ—Ä: 1000 (–æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º –¥–ª—è –∞–≤—Ç–æ–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)';
        } else {
            alert('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: ' + result.error);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
        alert('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞');
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –∞—É–∫—Ü–∏–æ–Ω–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
    const updateAuctionInput = document.getElementById('update-auction-number');
    if (updateAuctionInput) {
        updateAuctionInput.addEventListener('input', function() {
            const auctionNumber = this.value;
            if (auctionNumber) {
                loadUpdateProgress(auctionNumber);
            } else {
                document.getElementById('update-progress-info').classList.add('hidden');
            }
        });
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –∞—É–∫—Ü–∏–æ–Ω–∞ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
    const predictionsAuctionInput = document.getElementById('predictions-auction-number');
    if (predictionsAuctionInput) {
        predictionsAuctionInput.addEventListener('input', function() {
            const auctionNumber = this.value;
            if (auctionNumber) {
                loadPredictionsProgress(auctionNumber);
            } else {
                document.getElementById('predictions-progress-info').classList.add('hidden');
            }
        });
    }
});

// ==================== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò –ü–†–û–ì–ù–û–ó–û–í ====================

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
async function loadPredictionsProgress(auctionNumber) {
    try {
        const response = await fetch(`/api/admin/predictions-progress/${auctionNumber}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ HTML
        const contentType = response.headers.get('content-type');
        if (!contentType || !contentType.includes('application/json')) {
            console.warn('API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ JSON, –≤–æ–∑–º–æ–∂–Ω–æ —Å–µ—Ä–≤–µ—Ä –Ω–µ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω');
            return;
        }
        
        const data = await response.json();
        
        const progressInfo = document.getElementById('predictions-progress-info');
        const progressText = document.getElementById('predictions-progress-text');
        const progressBar = document.getElementById('predictions-progress-bar');
        
        if (data.progress) {
            const progress = data.progress;
            const percentage = Math.round((progress.currentIndex / progress.totalLots) * 100);
            const lastUpdate = new Date(progress.lastUpdate).toLocaleString();
            
            progressText.textContent = `–ü—Ä–æ–≥—Ä–µ—Å—Å: ${progress.currentIndex}/${progress.totalLots} (${percentage}%) | –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${progress.processedCount} | –û—à–∏–±–æ–∫: ${progress.errorCount} | –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${lastUpdate}`;
            progressBar.style.width = `${percentage}%`;
            progressInfo.classList.remove('hidden');
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å
            const startIndexInput = document.getElementById('predictions-start-index');
            if (startIndexInput && !startIndexInput.value) {
                startIndexInput.value = progress.currentIndex;
                startIndexInput.placeholder = `–ê–≤—Ç–æ–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –ª–æ—Ç–∞ ${progress.currentIndex}`;
            }
        } else {
            progressInfo.classList.add('hidden');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤:', error);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
async function refreshPredictionsProgress() {
    const auctionNumber = document.getElementById('predictions-auction-number').value;
    if (auctionNumber) {
        await loadPredictionsProgress(auctionNumber);
    }
}

// –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
async function clearPredictionsProgress() {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤? –≠—Ç–æ —É–¥–∞–ª–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏.')) {
        return;
    }
    
    const auctionNumber = document.getElementById('predictions-auction-number').value;
    if (!auctionNumber) {
        alert('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞—É–∫—Ü–∏–æ–Ω–∞');
        return;
    }
    
    try {
        const response = await fetch(`/api/admin/clear-predictions-progress/${auctionNumber}`, {
            method: 'POST'
        });
        
        const result = await response.json();
        
        if (result.success) {
            alert('–ü—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –æ—á–∏—â–µ–Ω');
            document.getElementById('predictions-progress-info').classList.add('hidden');
            document.getElementById('predictions-start-index').value = '';
            document.getElementById('predictions-start-index').placeholder = '–ù–∞–ø—Ä–∏–º–µ—Ä: 1000 (–æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º –¥–ª—è –∞–≤—Ç–æ–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)';
        } else {
            alert('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: ' + result.error);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤:', error);
        alert('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤');
    }
}

// –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
async function startPredictionsGenerator() {
    const auctionNumber = document.getElementById('predictions-auction-number').value;
    const startFromIndex = document.getElementById('predictions-start-index').value;

    if (!auctionNumber) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞—É–∫—Ü–∏–æ–Ω–∞');
        return;
    }

    try {
        const response = await fetch('/api/admin/start-predictions', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                auctionNumber: parseInt(auctionNumber),
                startFromIndex: startFromIndex ? parseInt(startFromIndex) : null
            })
        });

        const result = await response.json();
        
        if (result.success) {
            alert('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞');
            refreshStatus();
        } else {
            alert('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: ' + result.error);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤:', error);
        alert('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤');
    }
}

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
async function stopPredictionsGenerator() {
    try {
        const response = await fetch('/api/admin/stop-predictions', {
            method: 'POST'
        });

        const result = await response.json();
        
        if (result.success) {
            alert('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
            refreshStatus();
        } else {
            alert('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: ' + result.error);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤:', error);
        alert('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤');
    }
}

// ==================== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ü–ê–†–°–ï–†–ê –ö–ê–¢–ê–õ–û–ì–ê ====================

// –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞
async function startCatalogParser() {
    try {
        const response = await fetch('/api/admin/start-catalog-parser', {
            method: 'POST'
        });

        const result = await response.json();
        
        if (result.success) {
            alert('–ü–∞—Ä—Å–µ—Ä –∫–∞—Ç–∞–ª–æ–≥–∞ –∑–∞–ø—É—â–µ–Ω');
            refreshStatus();
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            setTimeout(() => {
                loadCatalogProgress();
            }, 1000);
        } else {
            alert('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: ' + result.error);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞:', error);
        alert('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞');
    }
}

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞
async function stopCatalogParser() {
    try {
        const response = await fetch('/api/admin/stop-catalog-parser', {
            method: 'POST'
        });

        const result = await response.json();
        
        if (result.success) {
            alert('–ü–∞—Ä—Å–µ—Ä –∫–∞—Ç–∞–ª–æ–≥–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
            refreshStatus();
        } else {
            alert('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: ' + result.error);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞:', error);
        alert('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞');
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–∞—Ä—Å–µ—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞
async function loadCatalogProgress() {
    try {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–µ—Ä–∞
        const statusResponse = await fetch('/api/admin/catalog-parser-status');
        const statusData = await statusResponse.json();
        
        const progressInfo = document.getElementById('catalog-progress-info');
        const progressText = document.getElementById('catalog-progress-text');
        const progressBar = document.getElementById('catalog-progress-bar');
        
        // –ï—Å–ª–∏ –ø–∞—Ä—Å–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Å–∫—Ä—ã–≤–∞–µ–º –±–ª–æ–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        if (statusData.status === 'stopped') {
            progressInfo.classList.add('hidden');
            return;
        }
        
        // –ï—Å–ª–∏ –ø–∞—Ä—Å–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        const response = await fetch('/api/admin/catalog-parser-progress');
        const data = await response.json();
        
        if (data.success && data.progress) {
            const progress = data.progress;
            const lastUpdate = new Date(progress.lastUpdate).toLocaleString();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            const timeSinceUpdate = new Date() - new Date(progress.lastUpdate);
            const isActive = timeSinceUpdate < 30000; // –ê–∫—Ç–∏–≤–µ–Ω, –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª—è–ª—Å—è –º–µ–Ω–µ–µ 30 —Å–µ–∫—É–Ω–¥ –Ω–∞–∑–∞–¥
            const statusIcon = isActive ? 'üü¢' : 'üü°';
            const statusText = isActive ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ü–∞—É–∑–∞';
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ—Ç–æ–≤
            const totalLots = progress.totalLots || 0;
            const processedCount = progress.totalProcessed || 0;
            const percentage = totalLots > 0 ? Math.round((processedCount / totalLots) * 100) : 0;
            
            const progressTextContent = `${statusIcon} ${statusText} | –ü—Ä–æ–≥—Ä–µ—Å—Å: ${processedCount}/${totalLots} (${percentage}%) | –û—à–∏–±–æ–∫: ${progress.totalErrors} | ID: ${progress.lastProcessedId} | ${lastUpdate}`;
            progressText.textContent = progressTextContent;
            
            // –†–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª–æ—Ç–æ–≤
            progressBar.style.width = `${percentage}%`;
            progressInfo.classList.remove('hidden');
        } else if (data.success) {
            console.log('‚ö†Ô∏è API —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ');
            // –ï—Å–ª–∏ API —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–æ–∫ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            progressText.textContent = '–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–∞—Ä—Å–µ—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
            progressBar.style.width = '0%';
            progressInfo.classList.remove('hidden');
        } else {
            console.log('‚ùå API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Å–∫—Ä—ã–≤–∞–µ–º –±–ª–æ–∫');
            progressInfo.classList.add('hidden');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–∞—Ä—Å–µ—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞:', error);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–∞—Ä—Å–µ—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞
async function refreshCatalogProgress() {
    await loadCatalogProgress();
}

// –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–∞—Ä—Å–µ—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞
async function clearCatalogProgress() {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–∞—Ä—Å–µ—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞? –≠—Ç–æ —É–¥–∞–ª–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏.')) {
        return;
    }
    
    try {
        const response = await fetch('/api/admin/clear-catalog-progress', {
            method: 'POST'
        });
        
        const result = await response.json();
        
        if (result.success) {
            alert('–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–∞—Ä—Å–µ—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω');
            document.getElementById('catalog-progress-info').classList.add('hidden');
        } else {
            alert('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: ' + result.error);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–∞—Ä—Å–µ—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞:', error);
        alert('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–∞—Ä—Å–µ—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞');
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –ø–∞—Ä—Å–µ—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞
async function showCatalogLogs() {
    currentLogType = 'catalog';
    await loadCatalogLogs();
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ–≤ –ø–∞—Ä—Å–µ—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞
async function loadCatalogLogs() {
    try {
        const response = await fetch('/api/admin/catalog-parser-logs');
        const data = await response.json();
        
        const logContainer = document.getElementById('log-container');
        if (data.logs && data.logs.length > 0) {
            let logContent = '';
            data.logs.forEach(log => {
                if (log.type === 'json') {
                    logContent += `<div class="mb-2"><strong>${log.file}:</strong></div>`;
                    logContent += `<div class="ml-4 mb-2 text-sm text-gray-300">${JSON.stringify(log.data, null, 2)}</div>`;
                } else if (log.type === 'text') {
                    logContent += `<div class="mb-2"><strong>${log.file}:</strong></div>`;
                    logContent += log.lines.map(line => `<div class="ml-4 mb-1">${line}</div>`).join('');
                } else if (log.type === 'error') {
                    logContent += `<div class="mb-2 text-red-400"><strong>${log.file}:</strong> ${log.error}</div>`;
                }
            });
            logContainer.innerHTML = logContent;
            logContainer.scrollTop = logContainer.scrollHeight;
        } else {
            logContainer.innerHTML = '<div class="text-gray-400">–õ–æ–≥–∏ –ø–∞—Ä—Å–µ—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</div>';
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤ –ø–∞—Ä—Å–µ—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞:', error);
        document.getElementById('log-container').innerHTML = 
            '<div class="text-red-400">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤ –ø–∞—Ä—Å–µ—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞</div>';
    }
}

// Category Parser Functions

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Category Parser
function initializeCategoryParser() {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
    document.getElementById('category-parser-mode').addEventListener('change', function() {
        const mode = this.value;
        const auctionInput = document.getElementById('auction-number-input');
        const resumeLotInput = document.getElementById('resume-lot-input');
        
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        auctionInput.classList.add('hidden');
        resumeLotInput.classList.add('hidden');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        if (mode === 'auction') {
            auctionInput.classList.remove('hidden');
        } else if (mode === 'resume') {
            auctionInput.classList.remove('hidden');
            resumeLotInput.classList.remove('hidden');
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        const startBtn = document.getElementById('start-category-parser-btn');
        const buttonText = mode === 'resume' ? '–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å' : '–ó–∞–ø—É—Å—Ç–∏—Ç—å';
        startBtn.innerHTML = `<i class="fas fa-play mr-2"></i>${buttonText}`;
    });
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    refreshCategoryParserStatus();
}


// –ó–∞–ø—É—Å–∫ Category Parser
async function startCategoryParser() {
    const mode = document.getElementById('category-parser-mode').value;
    const auctionNumber = document.getElementById('category-parser-auction-number').value;
    const startFromLot = parseInt(document.getElementById('resume-start-lot').value) || 1;
    const testMode = document.getElementById('category-parser-test-mode').checked;
    const delayBetweenLots = parseInt(document.getElementById('category-parser-delay').value) || 800;
    const updateCategories = document.getElementById('category-parser-update-categories').checked;
    const updateBids = document.getElementById('category-parser-update-bids').checked;
    
    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    console.log('üöÄ –ó–∞–ø—É—Å–∫ Category Parser —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:');
    console.log(`   –†–µ–∂–∏–º: ${mode}`);
    console.log(`   –ê—É–∫—Ü–∏–æ–Ω: ${auctionNumber}`);
    console.log(`   –°—Ç–∞—Ä—Ç–æ–≤—ã–π –ª–æ—Ç: ${startFromLot}`);
    console.log(`   –û–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${updateCategories}`);
    console.log(`   –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞–≤–∫–∏: ${updateBids}`);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!auctionNumber) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∞—É–∫—Ü–∏–æ–Ω–∞');
        return;
    }
    
    const startBtn = document.getElementById('start-category-parser-btn');
    const stopBtn = document.getElementById('stop-category-parser-btn');
    
    try {
        startBtn.disabled = true;
        startBtn.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>–ó–∞–ø—É—Å–∫...';
        
        const response = await fetch('/api/admin/category-parser/start', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                mode,
                auctionNumber,
                startFromLot,
                testMode,
                delayBetweenLots,
                updateCategories,
                updateBids
            })
        });
        
        const result = await response.json();
        
        if (result.success) {
            const modeText = mode === 'resume' ? '–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω' : '–∑–∞–ø—É—â–µ–Ω';
            alert(`–ü–∞—Ä—Å–µ—Ä ${modeText} —É—Å–ø–µ—à–Ω–æ!`);
            refreshCategoryParserStatus();
        } else {
            alert(`–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞: ${result.error}`);
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Category Parser:', error);
        alert('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞');
    } finally {
        startBtn.disabled = false;
        const mode = document.getElementById('category-parser-mode').value;
        const buttonText = mode === 'resume' ? '–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å' : '–ó–∞–ø—É—Å—Ç–∏—Ç—å';
        startBtn.innerHTML = `<i class="fas fa-play mr-2"></i>${buttonText}`;
    }
}

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Category Parser
async function stopCategoryParser() {
    const stopBtn = document.getElementById('stop-category-parser-btn');
    
    try {
        stopBtn.disabled = true;
        stopBtn.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>–û—Å—Ç–∞–Ω–æ–≤–∫–∞...';
        
        const response = await fetch('/api/admin/category-parser/stop', {
            method: 'POST'
        });
        
        const result = await response.json();
        
        if (result.success) {
            alert('–ü–∞—Ä—Å–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
            refreshCategoryParserStatus();
        } else {
            alert(`–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞: ${result.error}`);
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Category Parser:', error);
        alert('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞');
    } finally {
        stopBtn.disabled = false;
        stopBtn.innerHTML = '<i class="fas fa-stop mr-2"></i>–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å';
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ Category Parser
async function refreshCategoryParserStatus() {
    try {
        console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å Category Parser...');
        // –î–æ–±–∞–≤–ª—è–µ–º timestamp –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        const response = await fetch(`/api/admin/category-parser/status?t=${Date.now()}`);
        console.log('üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.status, response.statusText);
        const data = await response.json();
        console.log('üìä –î–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å–∞:', data);
        
        const statusText = document.getElementById('category-parser-status-text');
        const categoryProgress = document.getElementById('category-progress');
        const categoryProgressList = document.getElementById('category-progress-list');
        
        if (data.running && data.status) {
            console.log('‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å: –ø–∞—Ä—Å–µ—Ä –∑–∞–ø—É—â–µ–Ω');
            
            // –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ API: data.progress —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
            const progress = data.progress || {};
            const processed = progress.processed || 0;
            const errors = progress.errors || 0;
            const skipped = progress.skipped || 0;
            const mode = progress.mode || 'N/A';
            
            console.log(`üìä –ù–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: processed=${processed}, errors=${errors}, skipped=${skipped}`);
            
            statusText.innerHTML = `
                <div class="text-green-600 font-semibold">–ü–∞—Ä—Å–µ—Ä –∑–∞–ø—É—â–µ–Ω</div>
                <div class="text-sm mt-1">
                    –°—Ç–∞—Ç—É—Å PM2: ${data.status}<br>
                    –†–µ–∂–∏–º: ${mode}<br>
                    –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processed}<br>
                    –û—à–∏–±–æ–∫: ${errors}<br>
                    –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skipped}
                </div>
            `;
            console.log('üìù –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –≤ DOM');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            if (progress.categories && progress.categories.length > 0) {
                categoryProgress.classList.remove('hidden');
                let progressHtml = '';
                progress.categories.forEach(category => {
                    const percentage = category.count > 0 ? Math.round((category.with_source / category.count) * 100) : 0;
                    progressHtml += `
                        <div class="flex items-center justify-between p-2 bg-white rounded border">
                            <div class="flex-1">
                                <div class="font-medium">${category.category}</div>
                                <div class="text-sm text-gray-600">${category.with_source}/${category.count} –ª–æ—Ç–æ–≤</div>
                            </div>
                            <div class="ml-4">
                                <div class="w-16 bg-gray-200 rounded-full h-2">
                                    <div class="bg-blue-600 h-2 rounded-full" style="width: ${percentage}%"></div>
                                </div>
                                <div class="text-xs text-gray-500 mt-1">${percentage}%</div>
                            </div>
                        </div>
                    `;
                });
                categoryProgressList.innerHTML = progressHtml;
            } else {
                categoryProgress.classList.add('hidden');
            }
        } else {
            console.log('‚ö†Ô∏è –ü–∞—Ä—Å–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –Ω–µ—Ç —Å—Ç–∞—Ç—É—Å–∞');
            statusText.innerHTML = '<div class="text-gray-600">–ü–∞—Ä—Å–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω</div>';
            categoryProgress.classList.add('hidden');
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ Category Parser:', error);
        console.error('Response status:', error.status);
        console.error('Response text:', error.message);
        document.getElementById('category-parser-status-text').innerHTML = 
            '<div class="text-red-600">–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞</div>';
    }
}


// –ü–æ–∫–∞–∑ –ª–æ–≥–æ–≤ Category Parser
async function showCategoryParserLogs() {
    currentLogType = 'category-parser';
    const logContainer = document.getElementById('log-container');
    logContainer.innerHTML = '<div class="text-gray-400">–ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ–≤ –ø–∞—Ä—Å–µ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...</div>';
    
    try {
        const response = await fetch('/api/admin/logs/category-parser');
        const data = await response.json();
        
        console.log('üîç API –æ—Ç–≤–µ—Ç –¥–ª—è –ª–æ–≥–æ–≤ –ø–∞—Ä—Å–µ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', data);
        console.log('üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–æ–≤:', data.logs ? data.logs.length : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ');
        
        if (data.logs && data.logs.length > 0) {
            let logContent = '';
            data.logs.forEach((log, index) => {
                // –ï—Å–ª–∏ log - —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ (–ø—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç –ª–æ–≥–æ–≤)
                if (typeof log === 'string') {
                    logContent += `<div class="mb-1 text-sm text-gray-300">${log}</div>`;
                } 
                // –ï—Å–ª–∏ log - —ç—Ç–æ –æ–±—ä–µ–∫—Ç (—Å–ª–æ–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)
                else if (log.type === 'json') {
                    logContent += `<div class="mb-2"><strong>${log.file}:</strong></div>`;
                    logContent += `<div class="ml-4 mb-2 text-sm text-gray-300">${JSON.stringify(log.data, null, 2)}</div>`;
                } else if (log.type === 'text') {
                    logContent += `<div class="mb-2"><strong>${log.file}:</strong></div>`;
                    logContent += log.lines.map(line => `<div class="ml-4 mb-1">${line}</div>`).join('');
                } else if (log.type === 'error') {
                    logContent += `<div class="mb-2 text-red-400"><strong>${log.file}:</strong> ${log.error}</div>`;
                }
            });
            logContainer.innerHTML = logContent;
            logContainer.scrollTop = logContainer.scrollHeight;
        } else {
            logContainer.innerHTML = '<div class="text-gray-400">–õ–æ–≥–∏ –ø–∞—Ä—Å–µ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</div>';
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤ –ø–∞—Ä—Å–µ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
        document.getElementById('log-container').innerHTML = 
            '<div class="text-red-400">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤ –ø–∞—Ä—Å–µ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π</div>';
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Category Parser –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    initializeCategoryParser();
});

// ===== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –§–ê–ô–õ–û–ú –ü–†–û–ì–†–ï–°–°–ê =====

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
async function loadProgressFile() {
    const auctionNumber = document.getElementById('progress-auction-number').value;
    
    if (!auctionNumber) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞—É–∫—Ü–∏–æ–Ω–∞');
        return;
    }
    
    try {
        console.log('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞:', auctionNumber);
        
        const response = await fetch(`/api/category-parser/progress/${auctionNumber}`);
        const data = await response.json();
        
        if (data.exists) {
            displayProgressInfo(data.progress);
            populateEditFields(data.progress);
        } else {
            displayProgressInfo(null, data.message);
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
        alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: ' + error.message);
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
function displayProgressInfo(progress, message = null) {
    const progressInfo = document.getElementById('progress-info');
    const progressDetails = document.getElementById('progress-details');
    
    if (progress) {
        const timestamp = new Date(progress.timestamp).toLocaleString('ru-RU');
        
        progressDetails.innerHTML = `
            <div class="space-y-2">
                <div><strong>–ê—É–∫—Ü–∏–æ–Ω:</strong> ${progress.targetAuctionNumber || '–ù–µ —É–∫–∞–∑–∞–Ω'}</div>
                <div><strong>–†–µ–∂–∏–º:</strong> ${progress.mode || '–ù–µ —É–∫–∞–∑–∞–Ω'}</div>
                <div><strong>–ü–æ—Å–ª–µ–¥–Ω–∏–π –ª–æ—Ç:</strong> ${progress.lastProcessedLot || '–ù–µ —É–∫–∞–∑–∞–Ω'}</div>
                <div><strong>–ü–æ—Å–ª–µ–¥–Ω—è—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è:</strong> ${progress.lastProcessedCategory || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</div>
                <div><strong>–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ª–æ—Ç–æ–≤:</strong> ${progress.processed || 0}</div>
                <div><strong>–û—à–∏–±–æ–∫:</strong> ${progress.errors || 0}</div>
                <div><strong>–ü—Ä–æ–ø—É—â–µ–Ω–æ:</strong> ${progress.skipped || 0}</div>
                <div><strong>–í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:</strong> ${timestamp}</div>
                ${progress.categoryProgress ? `
                    <div class="mt-3">
                        <strong>–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:</strong>
                        <div class="mt-1 max-h-32 overflow-y-auto">
                            ${Object.entries(progress.categoryProgress).map(([category, stats]) => 
                                `<div class="text-xs">‚Ä¢ ${category}: ${stats.processed}/${stats.total}</div>`
                            ).join('')}
                        </div>
                    </div>
                ` : ''}
            </div>
        `;
    } else {
        progressDetails.innerHTML = `
            <div class="text-gray-500">
                ${message || '–§–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω'}
            </div>
        `;
    }
    
    progressInfo.classList.remove('hidden');
}

// –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–µ–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function populateEditFields(progress) {
    if (progress) {
        document.getElementById('edit-last-lot').value = progress.lastProcessedLot || '';
        document.getElementById('edit-last-category').value = progress.lastProcessedCategory || '';
    } else {
        document.getElementById('edit-last-lot').value = '';
        document.getElementById('edit-last-category').value = '';
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
async function updateProgressFile() {
    const auctionNumber = document.getElementById('progress-auction-number').value;
    const lastProcessedLot = document.getElementById('edit-last-lot').value;
    const lastProcessedCategory = document.getElementById('edit-last-category').value;
    
    if (!auctionNumber) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞—É–∫—Ü–∏–æ–Ω–∞');
        return;
    }
    
    if (!lastProcessedLot || !lastProcessedCategory) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–æ–º–µ—Ä –ª–æ—Ç–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
        return;
    }
    
    try {
        console.log('üíæ –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞:', auctionNumber);
        
        const response = await fetch(`/api/category-parser/progress/${auctionNumber}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                lastProcessedLot: parseInt(lastProcessedLot),
                lastProcessedCategory: lastProcessedCategory
            })
        });
        
        const data = await response.json();
        
        if (data.success) {
            alert('–§–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
            loadProgressFile();
        } else {
            alert('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: ' + data.error);
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
        alert('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: ' + error.message);
    }
}

// –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
async function clearProgressFile() {
    const auctionNumber = document.getElementById('progress-auction-number').value;
    
    if (!auctionNumber) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞—É–∫—Ü–∏–æ–Ω–∞');
        return;
    }
    
    if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞ ${auctionNumber}?\n\n–≠—Ç–æ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ —Ç–æ–º—É, —á—Ç–æ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–∞—á–Ω–µ—Ç—Å—è —Å –Ω–∞—á–∞–ª–∞.`)) {
        return;
    }
    
    try {
        console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞:', auctionNumber);
        
        const response = await fetch(`/api/category-parser/progress/${auctionNumber}`, {
            method: 'DELETE'
        });
        
        const data = await response.json();
        
        if (data.success) {
            alert('–§–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
            // –û—á–∏—â–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            document.getElementById('progress-info').classList.add('hidden');
            document.getElementById('edit-last-lot').value = '';
            document.getElementById('edit-last-category').value = '';
        } else {
            alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: ' + data.error);
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
        alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: ' + error.message);
    }
}


