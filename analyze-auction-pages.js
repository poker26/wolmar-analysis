const puppeteer = require('puppeteer-core');

class AuctionPageAnalyzer {
    constructor() {
        this.browser = null;
        this.page = null;
    }

    async init() {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞...');
        this.browser = await puppeteer.launch({
            headless: true,
            executablePath: 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe',
            args: ['--no-sandbox', '--disable-setuid-sandbox',
                            '--user-data-dir=/tmp/chrome-temp-bxyh3',
                            '--disable-metrics',
                            '--disable-metrics-reporting',
                            '--disable-background-mode',
                            '--disable-background-timer-throttling',
                            '--disable-renderer-backgrounding',
                            '--disable-backgrounding-occluded-windows',
                            '--disable-logging',
                            '--disable-gpu-logging',
                            '--disable-features=TranslateUI,BlinkGenPropertyTrees,VizDisplayCompositor']
        });
        this.page = await this.browser.newPage();
        
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ user-agent
        await this.page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36');
        
        console.log('‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    async analyzeAuctionPage(auctionNumber) {
        try {
            console.log(`\nüîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞—É–∫—Ü–∏–æ–Ω ${auctionNumber}...`);
            
            const url = `https://www.wolmar.ru/auction/${auctionNumber}`;
            console.log(`üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É: ${url}`);
            
            await this.page.goto(url, { waitUntil: 'networkidle2', timeout: 30000 });
            
            // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            await new Promise(resolve => setTimeout(resolve, 2000));
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            const pageAnalysis = await this.page.evaluate(() => {
                const results = {
                    totalLots: 0,
                    lotsWithConditions: 0,
                    lotsWithGrades: 0,
                    lotsWithSpaces: 0,
                    sampleConditions: [],
                    pageStructure: {}
                };
                
                // –ò—â–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –ª–æ—Ç–∞–º–∏
                const lotElements = document.querySelectorAll('.lot-item, .auction-lot, [class*="lot"], [class*="auction"]');
                console.log(`–ù–∞–π–¥–µ–Ω–æ ${lotElements.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ª–æ—Ç–æ–≤`);
                
                // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –ª–æ—Ç–∞
                lotElements.forEach((element, index) => {
                    const text = element.textContent || '';
                    
                    // –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                    const conditionMatch = text.match(/–°–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç—å:\s*([^\n\r]+)/i);
                    if (conditionMatch) {
                        const condition = conditionMatch[1].trim();
                        results.lotsWithConditions++;
                        results.sampleConditions.push(condition);
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≥—Ä–∞–¥–∞—Ü–∏–π
                        if (/\d{2,3}/.test(condition)) {
                            results.lotsWithGrades++;
                        }
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–±–µ–ª–æ–≤
                        if (/\s/.test(condition)) {
                            results.lotsWithSpaces++;
                        }
                    }
                });
                
                results.totalLots = lotElements.length;
                
                // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                results.pageStructure = {
                    hasLotTable: !!document.querySelector('table'),
                    hasLotList: !!document.querySelector('.lot-list, [class*="lot-list"]'),
                    hasLotGrid: !!document.querySelector('.lot-grid, [class*="lot-grid"]'),
                    hasLotCards: !!document.querySelector('.lot-card, [class*="lot-card"]'),
                    totalElements: document.querySelectorAll('*').length
                };
                
                return results;
            });
            
            console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –∞—É–∫—Ü–∏–æ–Ω–∞ ${auctionNumber}:`);
            console.log(`   –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ª–æ—Ç–æ–≤: ${pageAnalysis.totalLots}`);
            console.log(`   –õ–æ—Ç–æ–≤ —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏: ${pageAnalysis.lotsWithConditions}`);
            console.log(`   –õ–æ—Ç–æ–≤ —Å –≥—Ä–∞–¥–∞—Ü–∏—è–º–∏: ${pageAnalysis.lotsWithGrades}`);
            console.log(`   –õ–æ—Ç–æ–≤ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏: ${pageAnalysis.lotsWithSpaces}`);
            
            if (pageAnalysis.sampleConditions.length > 0) {
                console.log(`\nüìã –ü—Ä–∏–º–µ—Ä—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π:`);
                pageAnalysis.sampleConditions.slice(0, 10).forEach((condition, index) => {
                    console.log(`   ${index + 1}. "${condition}"`);
                });
            }
            
            console.log(`\nüèóÔ∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:`);
            console.log(`   –ï—Å—Ç—å —Ç–∞–±–ª–∏—Ü–∞ –ª–æ—Ç–æ–≤: ${pageAnalysis.pageStructure.hasLotTable}`);
            console.log(`   –ï—Å—Ç—å —Å–ø–∏—Å–æ–∫ –ª–æ—Ç–æ–≤: ${pageAnalysis.pageStructure.hasLotList}`);
            console.log(`   –ï—Å—Ç—å —Å–µ—Ç–∫–∞ –ª–æ—Ç–æ–≤: ${pageAnalysis.pageStructure.hasLotGrid}`);
            console.log(`   –ï—Å—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ –ª–æ—Ç–æ–≤: ${pageAnalysis.pageStructure.hasLotCards}`);
            
            return pageAnalysis;
            
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∞—É–∫—Ü–∏–æ–Ω–∞ ${auctionNumber}:`, error.message);
            return null;
        }
    }

    async close() {
        if (this.browser) {
            await this.browser.close();
            console.log('‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç');
        }
    }
}

async function analyzeAuctionPages() {
    const analyzer = new AuctionPageAnalyzer();
    
    try {
        await analyzer.init();
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞—É–∫—Ü–∏–æ–Ω–æ–≤
        const auctionsToAnalyze = ['965', '967', '964', '963'];
        const results = {};
        
        for (const auctionNumber of auctionsToAnalyze) {
            const result = await analyzer.analyzeAuctionPage(auctionNumber);
            if (result) {
                results[auctionNumber] = result;
            }
            
            // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            await new Promise(resolve => setTimeout(resolve, 2000));
        }
        
        // –ò—Ç–æ–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
        console.log('\nüìä –ò–¢–û–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó:');
        console.log('='.repeat(50));
        
        Object.entries(results).forEach(([auction, data]) => {
            console.log(`\n–ê—É–∫—Ü–∏–æ–Ω ${auction}:`);
            console.log(`  –õ–æ—Ç–æ–≤ —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏: ${data.lotsWithConditions}`);
            console.log(`  –õ–æ—Ç–æ–≤ —Å –≥—Ä–∞–¥–∞—Ü–∏—è–º–∏: ${data.lotsWithGrades}`);
            console.log(`  –õ–æ—Ç–æ–≤ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏: ${data.lotsWithSpaces}`);
            
            if (data.lotsWithGrades > 0) {
                console.log(`  ‚úÖ –ï—Å—Ç—å –≥—Ä–∞–¥–∞—Ü–∏–∏ - –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å —á–µ—Ä–µ–∑ –æ–±—â–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã`);
            } else {
                console.log(`  ‚ùå –ù–µ—Ç –≥—Ä–∞–¥–∞—Ü–∏–π - –Ω—É–∂–µ–Ω –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥`);
            }
        });
        
        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        console.log('\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
        const auctionsWithGrades = Object.entries(results).filter(([_, data]) => data.lotsWithGrades > 0);
        
        if (auctionsWithGrades.length > 0) {
            console.log('‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –æ–±—â–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–æ–≤:');
            auctionsWithGrades.forEach(([auction, _]) => {
                console.log(`   - –ê—É–∫—Ü–∏–æ–Ω ${auction}`);
            });
        } else {
            console.log('‚ùå –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞–∂–¥–æ–≥–æ –ª–æ—Ç–∞');
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ:', error);
    } finally {
        await analyzer.close();
    }
}

analyzeAuctionPages();
