const { Pool } = require('pg');
const config = require('./config');

// –ö–æ–ø–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–æ–º–∏–Ω–∞–ª–∞ –∏–∑ catalog-parser.js –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function parseDenomination(description) {
    const denominationMatch = description.match(/^(\d+(?:\.\d+)?)\s+([–∞-—è—ë\w\s]+?)(?:\s+\d{4}–≥?\.|\s+[A-Z][a-z]|\s*$)/i);
    if (denominationMatch) {
        const number = denominationMatch[1];
        const currency = denominationMatch[2].trim();
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞–ª—é—Ç—É –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        let fullDenomination = number;
        if (currency.match(/(—Ä—É–±–ª–µ–π?|—Ä—É–±\.?)/i)) {
            fullDenomination = `${number} —Ä—É–±–ª—å`;
        } else if (currency.match(/(–∫–æ–ø–µ–µ–∫?|–∫–æ–ø\.?)/i)) {
            fullDenomination = `${number} –∫–æ–ø–µ–π–∫–∞`;
        } else if (currency.match(/(–¥–æ–ª–ª–∞—Ä–æ–≤?|\$|–¥–æ–ª\.?)/i)) {
            fullDenomination = `${number} –¥–æ–ª–ª–∞—Ä`;
        } else if (currency.match(/(–µ–≤—Ä–æ|‚Ç¨|eur)/i)) {
            fullDenomination = `${number} –µ–≤—Ä–æ`;
        } else if (currency.match(/(—Ñ—É–Ω—Ç–æ–≤?|pound)/i)) {
            fullDenomination = `${number} —Ñ—É–Ω—Ç`;
        } else if (currency.match(/(—Ñ—Ä–∞–Ω–∫–æ–≤?|franc)/i)) {
            fullDenomination = `${number} —Ñ—Ä–∞–Ω–∫`;
        } else if (currency.match(/(–º–∞—Ä–æ–∫?|mark)/i)) {
            fullDenomination = `${number} –º–∞—Ä–∫–∞`;
        } else if (currency.match(/(–∫—Ä–æ–Ω?|krone)/i)) {
            fullDenomination = `${number} –∫—Ä–æ–Ω–∞`;
        } else if (currency.match(/(—Ü–µ–Ω—Ç–æ–≤?|cent)/i)) {
            fullDenomination = `${number} —Ü–µ–Ω—Ç`;
        } else if (currency.length > 0) {
            // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ —á–∏—Å–ª–∞, –Ω–æ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–∞—è –≤–∞–ª—é—Ç–∞
            fullDenomination = `${number} ${currency}`;
        }
        
        return fullDenomination;
    } else {
        return "1";
    }
}

async function testDenominationParsing() {
    const pool = new Pool(config.dbConfig);
    
    try {
        console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–æ–º–∏–Ω–∞–ª–∞...');
        
        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –æ–ø–∏—Å–∞–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const query = `
            SELECT DISTINCT original_description
            FROM coin_catalog 
            WHERE original_description IS NOT NULL
            AND original_description != ''
            ORDER BY original_description
            LIMIT 50
        `;
        
        const result = await pool.query(query);
        
        console.log(`üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ ${result.rows.length} –ø—Ä–∏–º–µ—Ä–∞—Ö –æ–ø–∏—Å–∞–Ω–∏–π:\n`);
        
        result.rows.forEach((row, index) => {
            const description = row.original_description;
            const parsedDenomination = parseDenomination(description);
            console.log(`${index + 1}. "${description}"`);
            console.log(`   ‚Üí –ù–æ–º–∏–Ω–∞–ª: "${parsedDenomination}"\n`);
        });
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö
        console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö:\n');
        
        const testCases = [
            "1 —Ä—É–±–ª—å 1900–≥. Ag",
            "5 –∫–æ–ø–µ–µ–∫ 1850–≥. Cu", 
            "1 –¥–æ–ª–ª–∞—Ä 1921–≥. Ag",
            "10 –µ–≤—Ä–æ 2002–≥. Au",
            "1 —Ñ—É–Ω—Ç 1890–≥. Ag",
            "2 —Ñ—Ä–∞–Ω–∫–∞ 1870–≥. Ag",
            "1 –º–∞—Ä–∫–∞ 1910–≥. Ag",
            "1 –∫—Ä–æ–Ω–∞ 1920–≥. Ag",
            "50 —Ü–µ–Ω—Ç–æ–≤ 1950–≥. Cu",
            "1 1900–≥. Ag", // –ë–µ–∑ –≤–∞–ª—é—Ç—ã
            "25 —Ä—É–±–ª–µ–π 1900–≥. Ag",
            "3 –∫–æ–ø–µ–π–∫–∏ 1850–≥. Cu"
        ];
        
        testCases.forEach((testCase, index) => {
            const parsedDenomination = parseDenomination(testCase);
            console.log(`${index + 1}. "${testCase}"`);
            console.log(`   ‚Üí –ù–æ–º–∏–Ω–∞–ª: "${parsedDenomination}"\n`);
        });
        
        // –ü—Ä–æ–≤–µ—Ä–∏–º, –∫–∞–∫ —ç—Ç–æ –ø–æ–≤–ª–∏—è–µ—Ç –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
        console.log('üìä –ê–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã...\n');
        
        const duplicateQuery = `
            SELECT 
                denomination,
                COUNT(*) as count
            FROM coin_catalog 
            WHERE denomination IS NOT NULL
            GROUP BY denomination
            HAVING COUNT(*) > 1
            ORDER BY count DESC
            LIMIT 10
        `;
        
        const duplicateResult = await pool.query(duplicateQuery);
        
        console.log('–¢–µ–∫—É—â–∏–µ –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –Ω–æ–º–∏–Ω–∞–ª—É:');
        duplicateResult.rows.forEach((row, index) => {
            console.log(`${index + 1}. "${row.denomination}": ${row.count} –∑–∞–ø–∏—Å–µ–π`);
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    } finally {
        await pool.end();
    }
}

testDenominationParsing();
