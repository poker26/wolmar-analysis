const { Pool } = require('pg');
const isProduction = process.env.NODE_ENV === 'production' || process.env.PORT;
const config = require(isProduction ? './config.production' : './config');

async function checkDuplicateExamples() {
    const pool = new Pool(config.dbConfig);
    const client = await pool.connect();

    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–º–µ—Ä—ã "–¥—É–±–ª–∏–∫–∞—Ç–æ–≤" –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –ª–æ–≥–∏–∫–∏...\n');

        // –ü—Ä–æ–≤–µ—Ä–∏–º —Å–∞–º—É—é –±–æ–ª—å—à—É—é –≥—Ä—É–ø–ø—É –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        console.log('1Ô∏è‚É£ –°–∞–º–∞—è –±–æ–ª—å—à–∞—è –≥—Ä—É–ø–ø–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:');
        const biggestGroupQuery = `
            SELECT 
                denomination, coin_name, year, mint, coin_weight, metal,
                COUNT(*) as count,
                STRING_AGG(id::text, ', ' ORDER BY id) as ids
            FROM coin_catalog 
            GROUP BY denomination, coin_name, year, mint, coin_weight, metal
            HAVING COUNT(*) > 1
            ORDER BY count DESC
            LIMIT 1
        `;
        
        const biggestGroup = await client.query(biggestGroupQuery);
        if (biggestGroup.rows.length > 0) {
            const group = biggestGroup.rows[0];
            console.log(`   –ì—Ä—É–ø–ø–∞: "${group.denomination}" ${group.coin_name} ${group.year}–≥ ${group.mint} ${group.coin_weight}g ${group.metal}`);
            console.log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${group.count} –∑–∞–ø–∏—Å–µ–π`);
            console.log(`   ID –∑–∞–ø–∏—Å–µ–π: ${group.ids.substring(0, 200)}...`);
        }

        // –ü–æ—Å–º–æ—Ç—Ä–∏–º –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
        console.log('\n2Ô∏è‚É£ –î–µ—Ç–∞–ª–∏ –ø–µ—Ä–≤—ã—Ö 5 –∑–∞–ø–∏—Å–µ–π –∏–∑ —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã:');
        const detailsQuery = `
            SELECT id, denomination, coin_name, year, mint, coin_weight, metal, 
                   original_description, category
            FROM coin_catalog 
            WHERE denomination = $1 AND coin_name = $2 AND year = $3 AND mint = $4 AND coin_weight = $5 AND metal = $6
            ORDER BY id
            LIMIT 5
        `;
        
        if (biggestGroup.rows.length > 0) {
            const group = biggestGroup.rows[0];
            const details = await client.query(detailsQuery, [
                group.denomination, group.coin_name, group.year, group.mint, group.coin_weight, group.metal
            ]);
            
            details.rows.forEach((row, index) => {
                console.log(`\n   –ó–∞–ø–∏—Å—å ${index + 1} (ID: ${row.id}):`);
                console.log(`     –ù–æ–º–∏–Ω–∞–ª: "${row.denomination}"`);
                console.log(`     –ù–∞–∑–≤–∞–Ω–∏–µ: "${row.coin_name}"`);
                console.log(`     –ì–æ–¥: ${row.year}`);
                console.log(`     –ú–æ–Ω–µ—Ç–Ω—ã–π –¥–≤–æ—Ä: "${row.mint}"`);
                console.log(`     –í–µ—Å: ${row.coin_weight}g`);
                console.log(`     –ú–µ—Ç–∞–ª–ª: ${row.metal}`);
                console.log(`     –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${row.category}`);
                console.log(`     –û–ø–∏—Å–∞–Ω–∏–µ: "${row.original_description?.substring(0, 100)}..."`);
            });
        }

        // –ü—Ä–æ–≤–µ—Ä–∏–º –¥—Ä—É–≥—É—é –≥—Ä—É–ø–ø—É - —Å —Å–µ—Ä–µ–±—Ä–æ–º
        console.log('\n3Ô∏è‚É£ –ì—Ä—É–ø–ø–∞ —Å —Å–µ—Ä–µ–±—Ä–æ–º (Ag):');
        const silverGroupQuery = `
            SELECT 
                denomination, coin_name, year, mint, coin_weight, metal,
                COUNT(*) as count
            FROM coin_catalog 
            WHERE metal = 'Ag'
            GROUP BY denomination, coin_name, year, mint, coin_weight, metal
            HAVING COUNT(*) > 1
            ORDER BY count DESC
            LIMIT 1
        `;
        
        const silverGroup = await client.query(silverGroupQuery);
        if (silverGroup.rows.length > 0) {
            const group = silverGroup.rows[0];
            console.log(`   –ì—Ä—É–ø–ø–∞: "${group.denomination}" ${group.coin_name} ${group.year}–≥ ${group.mint} ${group.coin_weight}g ${group.metal}`);
            console.log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${group.count} –∑–∞–ø–∏—Å–µ–π`);
            
            // –ü–æ—Å–º–æ—Ç—Ä–∏–º –Ω–∞ –¥–µ—Ç–∞–ª–∏
            const silverDetails = await client.query(detailsQuery, [
                group.denomination, group.coin_name, group.year, group.mint, group.coin_weight, group.metal
            ]);
            
            console.log('\n   –î–µ—Ç–∞–ª–∏ –ø–µ—Ä–≤—ã—Ö 3 –∑–∞–ø–∏—Å–µ–π:');
            silverDetails.rows.slice(0, 3).forEach((row, index) => {
                console.log(`\n   –ó–∞–ø–∏—Å—å ${index + 1} (ID: ${row.id}):`);
                console.log(`     –û–ø–∏—Å–∞–Ω–∏–µ: "${row.original_description?.substring(0, 150)}..."`);
            });
        }

        // –ü—Ä–æ–≤–µ—Ä–∏–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–ª—è–º
        console.log('\n4Ô∏è‚É£ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—è–º:');
        const statsQuery = `
            SELECT 
                COUNT(*) as total,
                COUNT(CASE WHEN denomination IS NULL THEN 1 END) as null_denomination,
                COUNT(CASE WHEN coin_name IS NULL THEN 1 END) as null_coin_name,
                COUNT(CASE WHEN year IS NULL THEN 1 END) as null_year,
                COUNT(CASE WHEN mint IS NULL THEN 1 END) as null_mint,
                COUNT(CASE WHEN coin_weight IS NULL THEN 1 END) as null_weight,
                COUNT(CASE WHEN metal IS NULL THEN 1 END) as null_metal
            FROM coin_catalog
        `;
        
        const stats = await client.query(statsQuery);
        const stat = stats.rows[0];
        console.log(`   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${stat.total}`);
        console.log(`   NULL –Ω–æ–º–∏–Ω–∞–ª: ${stat.null_denomination}`);
        console.log(`   NULL –Ω–∞–∑–≤–∞–Ω–∏–µ: ${stat.null_coin_name}`);
        console.log(`   NULL –≥–æ–¥: ${stat.null_year}`);
        console.log(`   NULL –º–æ–Ω–µ—Ç–Ω—ã–π –¥–≤–æ—Ä: ${stat.null_mint}`);
        console.log(`   NULL –≤–µ—Å: ${stat.null_weight}`);
        console.log(`   NULL –º–µ—Ç–∞–ª–ª: ${stat.null_metal}`);

        // –ü—Ä–æ–≤–µ—Ä–∏–º, —Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤–æ –≤—Å–µ—Ö –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª—è—Ö
        console.log('\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–µ–π —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏:');
        const sameValuesQuery = `
            SELECT 
                denomination, coin_name, year, mint, coin_weight, metal,
                COUNT(*) as count
            FROM coin_catalog 
            WHERE denomination IS NOT NULL 
            AND coin_name IS NOT NULL 
            AND year IS NOT NULL 
            AND mint IS NOT NULL 
            AND coin_weight IS NOT NULL 
            AND metal IS NOT NULL
            GROUP BY denomination, coin_name, year, mint, coin_weight, metal
            HAVING COUNT(*) > 1
            ORDER BY count DESC
            LIMIT 5
        `;
        
        const sameValues = await client.query(sameValuesQuery);
        console.log('   –ó–∞–ø–∏—Å–∏ —Å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏:');
        sameValues.rows.forEach((row, index) => {
            console.log(`   ${index + 1}. "${row.denomination}" ${row.coin_name} ${row.year}–≥ ${row.mint} ${row.coin_weight}g ${row.metal} - ${row.count} –∑–∞–ø–∏—Å–µ–π`);
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:', error);
    } finally {
        client.release();
        await pool.end();
    }
}

checkDuplicateExamples();
