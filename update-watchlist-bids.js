const { Pool } = require('pg');
const { launchPuppeteer, createPage, cleanupChromeTempFiles } = require('./puppeteer-utils');
const config = require('./config');

class WatchlistBidUpdater {
    constructor() {
        this.pool = new Pool(config.dbConfig);
        this.browser = null;
        this.page = null;
    }

    async init() {
        console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞–≤–æ–∫...');
        this.browser = await launchPuppeteer();
        this.page = await createPage(this.browser);
        
        await this.page.setViewport({ width: 1280, height: 720 });
        console.log('‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    async close() {
        if (this.browser) {
            await this.browser.close();
            console.log('üîí –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç');
        }
        cleanupChromeTempFiles();
    }

    formatTimestamp(timestampText) {
        try {
            // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY HH:MM:SS
            const match = timestampText.match(/(\d{2})\.(\d{2})\.(\d{4})\s+(\d{2}):(\d{2}):(\d{2})/);
            if (match) {
                const [, day, month, year, hour, minute, second] = match;
                return `${year}-${month}-${day} ${hour}:${minute}:${second}`;
            }
            
            // –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
            console.log(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: ${timestampText}`);
            return timestampText;
        } catch (error) {
            console.log(`‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã: ${error.message}`);
            return timestampText;
        }
    }

    async parseBidHistory(page, lotUrl) {
        try {
            console.log(`üîç –ü–∞—Ä—Å–∏–º –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞–≤–æ–∫ –¥–ª—è –ª–æ—Ç–∞: ${lotUrl}`);
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º auction_id –∏ lot_id –∏–∑ URL
            const urlParts = lotUrl.match(/\/auction\/(\d+)\/(\d+)/);
            if (!urlParts) {
                console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å auction_id –∏ lot_id –∏–∑ URL');
                return [];
            }
            
            const [, auctionId, lotId] = urlParts;
            const ajaxUrl = `https://www.wolmar.ru/ajax/bids.php?auction_id=${auctionId}&lot_id=${lotId}`;
            
            console.log(`üì° AJAX URL: ${ajaxUrl}`);
            
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ AJAX endpoint
            await page.goto(ajaxUrl, {
                waitUntil: 'networkidle2',
                timeout: 30000
            });
            
            // –ü–∞—Ä—Å–∏–º HTML —Ç–∞–±–ª–∏—Ü—É —Å–æ —Å—Ç–∞–≤–∫–∞–º–∏
            const bidData = await page.evaluate(() => {
                const table = document.querySelector('table.colored');
                if (!table) {
                    return [];
                }
                
                const rows = table.querySelectorAll('tr');
                const bids = [];
                
                for (let i = 1; i < rows.length; i++) { // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                    const cells = rows[i].querySelectorAll('td');
                    if (cells.length >= 4) {
                        const amountText = cells[0]?.textContent?.trim();
                        const starText = cells[1]?.textContent?.trim();
                        const bidderText = cells[2]?.textContent?.trim();
                        const timestampText = cells[3]?.textContent?.trim();
                        
                        if (amountText && bidderText && timestampText) {
                            bids.push({
                                amount: amountText,
                                star: starText,
                                bidder: bidderText,
                                timestamp: timestampText
                            });
                        }
                    }
                }
                
                return bids;
            });
            
            console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${bidData.length} —Å—Ç–∞–≤–æ–∫`);
            
            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
            const formattedBids = bidData.map(bid => ({
                amount: parseInt(bid.amount.replace(/\s/g, '')), // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∏—Å–ª–æ
                bidder: bid.bidder,
                timestamp: this.formatTimestamp(bid.timestamp),
                isAutoBid: bid.star === '*'
            }));
            
            console.log(`‚úÖ –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–æ ${formattedBids.length} —Å—Ç–∞–≤–æ–∫`);
            return formattedBids;
            
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞–≤–æ–∫ –¥–ª—è ${lotUrl}:`, error.message);
            return [];
        }
    }

    async saveBidsToDatabase(bidHistory, lotId, auctionNumber, lotNumber) {
        if (!bidHistory || bidHistory.length === 0) {
            return;
        }
        
        try {
            console.log(`üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º ${bidHistory.length} —Å—Ç–∞–≤–æ–∫ –≤ –ë–î...`);
            
            for (const bid of bidHistory) {
                const insertQuery = `
                    INSERT INTO lot_bids (
                        lot_id, auction_number, lot_number, bid_amount, bidder_login, bid_timestamp, is_auto_bid
                    ) VALUES ($1, $2, $3, $4, $5, $6, $7)
                    ON CONFLICT (auction_number, lot_number, bid_amount, bidder_login, bid_timestamp) DO NOTHING
                `;
                
                const values = [
                    lotId,
                    auctionNumber,
                    lotNumber,
                    bid.amount,
                    bid.bidder,
                    bid.timestamp,
                    bid.isAutoBid
                ];
                
                await this.pool.query(insertQuery, values);
            }
            
            console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${bidHistory.length} —Å—Ç–∞–≤–æ–∫`);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞–≤–æ–∫ –≤ –ë–î:', error.message);
        }
    }

    async updateWatchlistBids(userId = null) {
        try {
            console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞–≤–æ–∫ –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ...');
            console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: ${userId || '–≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'}`);
            
            // –ü–æ–ª—É—á–∞–µ–º –ª–æ—Ç—ã –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
            let query = `
                SELECT 
                    w.id as watchlist_id,
                    w.user_id,
                    al.id as lot_id,
                    al.lot_number,
                    al.auction_number,
                    al.source_url
                FROM watchlist w
                JOIN auction_lots al ON w.lot_id = al.id
                WHERE al.source_url IS NOT NULL
            `;
            
            const params = [];
            if (userId) {
                query += ` AND w.user_id = $1`;
                params.push(userId);
            }
            
            query += ` ORDER BY w.added_at DESC`;
            
            const result = await this.pool.query(query, params);
            const watchlistLots = result.rows;
            
            console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${watchlistLots.length} –ª–æ—Ç–æ–≤ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è`);
            
            if (watchlistLots.length === 0) {
                console.log('‚ÑπÔ∏è –ù–µ—Ç –ª–æ—Ç–æ–≤ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
                return { updated: 0, errors: [] };
            }
            
            const results = {
                updated: 0,
                errors: []
            };
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞–≤–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ª–æ—Ç–∞
            for (const lot of watchlistLots) {
                try {
                    console.log(`\nüéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–æ—Ç ${lot.lot_number} (ID: ${lot.lot_id})`);
                    
                    // –ü–∞—Ä—Å–∏–º –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞–≤–æ–∫
                    const bidHistory = await this.parseBidHistory(this.page, lot.source_url);
                    
                    if (bidHistory.length > 0) {
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                        await this.saveBidsToDatabase(
                            bidHistory,
                            lot.lot_id,
                            lot.auction_number,
                            lot.lot_number
                        );
                        
                        results.updated += bidHistory.length;
                        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${bidHistory.length} —Å—Ç–∞–≤–æ–∫ –¥–ª—è –ª–æ—Ç–∞ ${lot.lot_number}`);
                    } else {
                        console.log(`‚ÑπÔ∏è –ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞–≤–æ–∫ –¥–ª—è –ª–æ—Ç–∞ ${lot.lot_number} –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞`);
                    }
                    
                    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                    await new Promise(resolve => setTimeout(resolve, 1000));
                    
                } catch (error) {
                    const errorMsg = `–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ—Ç–∞ ${lot.lot_number}: ${error.message}`;
                    console.error(`‚ùå ${errorMsg}`);
                    results.errors.push(errorMsg);
                }
            }
            
            console.log(`\nüéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!`);
            console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:`);
            console.log(`   - –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç–∞–≤–æ–∫: ${results.updated}`);
            console.log(`   - –û—à–∏–±–æ–∫: ${results.errors.length}`);
            
            if (results.errors.length > 0) {
                console.log(`‚ùå –û—à–∏–±–∫–∏:`);
                results.errors.forEach(error => console.log(`   - ${error}`));
            }
            
            return results;
            
        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', error.message);
            throw error;
        }
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    const updater = new WatchlistBidUpdater();
    
    try {
        await updater.init();
        
        // –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        const args = process.argv.slice(2);
        const userId = args[0] ? parseInt(args[0]) : null;
        
        if (userId) {
            console.log(`üë§ –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        } else {
            console.log('üë• –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
        }
        
        const results = await updater.updateWatchlistBids(userId);
        
        console.log('\n‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
        console.log(`üìä –ò—Ç–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç–∞–≤–æ–∫: ${results.updated}`);
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
        process.exit(1);
    } finally {
        await updater.close();
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
if (require.main === module) {
    main().catch(console.error);
}

module.exports = WatchlistBidUpdater;
