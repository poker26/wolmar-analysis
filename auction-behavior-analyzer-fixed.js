/**
 * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø–æ–≤–µ–¥–µ–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª–µ–π –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã
 */

const { Pool } = require('pg');

class AuctionBehaviorAnalyzer {
    constructor(dbConfig) {
        this.db = new Pool(dbConfig);
    }

    async init() {
        console.log('üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞...');
        await this.checkDatabaseConnection();
    }

    async checkDatabaseConnection() {
        try {
            const result = await this.db.query('SELECT NOW()');
            console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:', result.rows[0].now);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', error.message);
            throw error;
        }
    }

    /**
     * 1. –ê–Ω–∞–ª–∏–∑ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–¥–∞–≤—Ü–æ–≤
     */
    async analyzeSuspiciousSellers() {
        console.log('\nüìä –ê–Ω–∞–ª–∏–∑ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–¥–∞–≤—Ü–æ–≤...');
        
        const query = `
            WITH seller_stats AS (
                SELECT 
                    winner_login,
                    COUNT(*) as total_wins,
                    AVG(winning_bid) as avg_price,
                    COUNT(DISTINCT auction_number) as auctions_participated,
                    COUNT(DISTINCT metal) as categories_bought,
                    -- –ü—Ä–æ—Ü–µ–Ω—Ç –ª–æ—Ç–æ–≤, –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –ø–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω–µ
                    ROUND(
                        COUNT(CASE WHEN winning_bid >= 1000 THEN 1 END) * 100.0 / COUNT(*), 2
                    ) as high_price_percentage
                FROM auction_lots 
                WHERE winner_login IS NOT NULL 
                AND winning_bid > 0
                GROUP BY winner_login
                HAVING COUNT(*) >= 10  -- –ú–∏–Ω–∏–º—É–º 10 –ø–æ–∫—É–ø–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            )
            SELECT 
                winner_login,
                total_wins,
                ROUND(avg_price::numeric, 2) as avg_price,
                auctions_participated,
                categories_bought,
                high_price_percentage,
                CASE 
                    WHEN high_price_percentage > 70 AND categories_bought <= 3 THEN 'VERY_SUSPICIOUS'
                    WHEN high_price_percentage > 50 AND categories_bought <= 5 THEN 'SUSPICIOUS'
                    ELSE 'NORMAL'
                END as suspicion_level
            FROM seller_stats
            ORDER BY high_price_percentage DESC, total_wins DESC
            LIMIT 50;
        `;

        const result = await this.db.query(query);
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${result.rows.length} –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–¥–∞–≤—Ü–æ–≤`);
        return result.rows;
    }

    /**
     * 2. –ê–Ω–∞–ª–∏–∑ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π —Å —Ü–µ–Ω–∞–º–∏
     */
    async analyzePriceManipulation() {
        console.log('\nüí∞ –ê–Ω–∞–ª–∏–∑ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π —Å —Ü–µ–Ω–∞–º–∏...');
        
        const query = `
            WITH price_patterns AS (
                SELECT 
                    lot_number,
                    auction_number,
                    winning_bid,
                    winner_login,
                    -- –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç–∞–≤–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
                    parsed_at
                FROM auction_lots
                WHERE winning_bid > 1000  -- –í—ã—Å–æ–∫–∞—è —Ü–µ–Ω–∞
                AND winning_bid > 100  -- –ú–∏–Ω–∏–º—É–º 100 —Ä—É–±–ª–µ–π
            )
            SELECT 
                winner_login,
                COUNT(*) as manipulated_lots,
                ROUND(AVG(winning_bid)::numeric, 2) as avg_price,
                ROUND(MAX(winning_bid)::numeric, 2) as max_price,
                COUNT(DISTINCT auction_number) as unique_auctions,
                CASE 
                    WHEN AVG(winning_bid) > 5000 AND COUNT(DISTINCT auction_number) <= 3 THEN 'VERY_SUSPICIOUS'
                    WHEN AVG(winning_bid) > 2000 AND COUNT(DISTINCT auction_number) <= 5 THEN 'SUSPICIOUS'
                    ELSE 'NORMAL'
                END as manipulation_level
            FROM price_patterns
            GROUP BY winner_login
            HAVING COUNT(*) >= 5
            ORDER BY avg_price DESC, manipulated_lots DESC
            LIMIT 30;
        `;

        const result = await this.db.query(query);
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${result.rows.length} –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ —Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞–∫—Ä—É—Ç–∫–æ–π —Ü–µ–Ω`);
        return result.rows;
    }

    /**
     * 3. –ê–Ω–∞–ª–∏–∑ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫
     */
    async analyzeRepeatedPurchases() {
        console.log('\nüîÑ –ê–Ω–∞–ª–∏–∑ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫...');
        
        const query = `
            WITH repeated_purchases AS (
                SELECT 
                    winner_login,
                    coin_description,
                    metal,
                    COUNT(*) as purchase_count,
                    COUNT(DISTINCT auction_number) as auctions_participated,
                    AVG(winning_bid) as avg_price,
                    MIN(winning_bid) as min_price,
                    MAX(winning_bid) as max_price
                FROM auction_lots
                WHERE winner_login IS NOT NULL
                AND coin_description IS NOT NULL
                AND winning_bid > 0
                GROUP BY winner_login, coin_description, metal
                HAVING COUNT(*) >= 3  -- –ú–∏–Ω–∏–º—É–º 3 –ø–æ–∫—É–ø–∫–∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–≥–æ –ª–æ—Ç–∞
            )
            SELECT 
                winner_login,
                coin_description,
                metal,
                purchase_count,
                auctions_participated,
                ROUND(avg_price::numeric, 2) as avg_price,
                ROUND(min_price::numeric, 2) as min_price,
                ROUND(max_price::numeric, 2) as max_price,
                CASE 
                    WHEN purchase_count >= 5 THEN 'VERY_SUSPICIOUS'
                    WHEN purchase_count >= 3 THEN 'SUSPICIOUS'
                    ELSE 'NORMAL'
                END as repetition_level
            FROM repeated_purchases
            ORDER BY purchase_count DESC, avg_price DESC
            LIMIT 50;
        `;

        const result = await this.db.query(query);
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${result.rows.length} —Å–ª—É—á–∞–µ–≤ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫`);
        return result.rows;
    }

    /**
     * 4. –ê–Ω–∞–ª–∏–∑ –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π
     */
    async analyzeDominantBuyers() {
        console.log('\nüèÜ –ê–Ω–∞–ª–∏–∑ –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π...');
        
        const query = `
            WITH buyer_patterns AS (
                SELECT 
                    winner_login,
                    COUNT(*) as total_purchases,
                    AVG(winning_bid) as avg_purchase_price,
                    COUNT(DISTINCT auction_number) as auctions_participated,
                    COUNT(DISTINCT metal) as categories_bought,
                    -- –í–∞—Ä–∏–∞—Ü–∏—è —Ü–µ–Ω (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ)
                    ROUND(
                        STDDEV(winning_bid) / AVG(winning_bid) * 100, 2
                    ) as price_variation_percent
                FROM auction_lots
                WHERE winner_login IS NOT NULL
                AND winning_bid > 0
                GROUP BY winner_login
                HAVING COUNT(*) >= 5  -- –ú–∏–Ω–∏–º—É–º 5 –ø–æ–∫—É–ø–æ–∫
            )
            SELECT 
                winner_login,
                total_purchases,
                ROUND(avg_purchase_price::numeric, 2) as avg_purchase_price,
                auctions_participated,
                categories_bought,
                price_variation_percent,
                CASE 
                    WHEN total_purchases >= 50 AND price_variation_percent < 20 THEN 'VERY_SUSPICIOUS'
                    WHEN total_purchases >= 20 AND price_variation_percent < 30 THEN 'SUSPICIOUS'
                    ELSE 'NORMAL'
                END as dominance_level
            FROM buyer_patterns
            ORDER BY total_purchases DESC, avg_purchase_price DESC
            LIMIT 30;
        `;

        const result = await this.db.query(query);
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${result.rows.length} –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π`);
        return result.rows;
    }

    /**
     * –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
     */
    async runComprehensiveAnalysis() {
        console.log('\nüöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è...');
        
        const results = {
            suspiciousSellers: await this.analyzeSuspiciousSellers(),
            priceManipulation: await this.analyzePriceManipulation(),
            repeatedPurchases: await this.analyzeRepeatedPurchases(),
            dominantBuyers: await this.analyzeDominantBuyers(),
            summary: {}
        };

        // –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–∫—É
        results.summary = {
            analysisDate: new Date().toISOString(),
            suspiciousSellers: results.suspiciousSellers.filter(s => s.suspicion_level !== 'NORMAL').length,
            priceManipulators: results.priceManipulation.filter(p => p.manipulation_level !== 'NORMAL').length,
            repeatedPurchases: results.repeatedPurchases.filter(r => r.repetition_level !== 'NORMAL').length,
            dominantBuyers: results.dominantBuyers.filter(d => d.dominance_level !== 'NORMAL').length
        };

        console.log('\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:');
        console.log(`   –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–¥–∞–≤—Ü–æ–≤: ${results.summary.suspiciousSellers}`);
        console.log(`   –ú–∞–Ω–∏–ø—É–ª—è—Ç–æ—Ä–æ–≤ —Ü–µ–Ω: ${results.summary.priceManipulators}`);
        console.log(`   –ü–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫: ${results.summary.repeatedPurchases}`);
        console.log(`   –î–æ–º–∏–Ω–∏—Ä—É—é—â–∏—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π: ${results.summary.dominantBuyers}`);

        return results;
    }

    async close() {
        await this.db.end();
        console.log('üîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ');
    }
}

module.exports = AuctionBehaviorAnalyzer;

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
if (require.main === module) {
    const dbConfig = {
        user: 'postgres.xkwgspqwebfeteoblayu',
        host: 'aws-0-eu-north-1.pooler.supabase.com',
        database: 'postgres',
        password: 'Gopapopa326+',
        port: 6543,
        ssl: { rejectUnauthorized: false }
    };

    async function runAnalysis() {
        const analyzer = new AuctionBehaviorAnalyzer(dbConfig);
        
        try {
            await analyzer.init();
            const results = await analyzer.runComprehensiveAnalysis();
            
            console.log('\nüéâ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error.message);
        } finally {
            await analyzer.close();
        }
    }

    runAnalysis();
}
