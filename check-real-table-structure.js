/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã auction_lots –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 */

const { Pool } = require('pg');

const dbConfig = {
    user: 'postgres.xkwgspqwebfeteoblayu',
    host: 'aws-0-eu-north-1.pooler.supabase.com',
    database: 'postgres',
    password: 'Gopapopa326+',
    port: 6543,
    ssl: { rejectUnauthorized: false }
};

async function checkRealTableStructure() {
    const db = new Pool(dbConfig);
    
    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã auction_lots...');
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        const result = await db.query(`
            SELECT column_name, data_type, is_nullable, column_default
            FROM information_schema.columns 
            WHERE table_name = 'auction_lots' 
            ORDER BY ordinal_position
        `);
        
        console.log('\nüìã –†–µ–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã auction_lots:');
        result.rows.forEach(row => {
            console.log(`  ${row.column_name}: ${row.data_type} (nullable: ${row.is_nullable})`);
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ
        const countResult = await db.query('SELECT COUNT(*) as total FROM auction_lots');
        console.log(`\nüìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ: ${countResult.rows[0].total}`);
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä –∑–∞–ø–∏—Å–∏
        if (countResult.rows[0].total > 0) {
            const sampleResult = await db.query('SELECT * FROM auction_lots LIMIT 1');
            console.log('\nüìù –ü—Ä–∏–º–µ—Ä –∑–∞–ø–∏—Å–∏:');
            Object.keys(sampleResult.rows[0]).forEach(key => {
                console.log(`  ${key}: ${sampleResult.rows[0][key]}`);
            });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –ø–æ–ª—è –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö –∞–Ω–∞–ª–∏–∑–∞
        console.log('\nüîç –ü–æ–ª—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö –∞–Ω–∞–ª–∏–∑–∞:');
        const analysisFields = [
            'winner_nick', 'seller_nick', 'final_price', 'starting_price', 
            'lot_description', 'lot_category', 'auction_id'
        ];
        
        analysisFields.forEach(field => {
            const exists = result.rows.find(row => row.column_name === field);
            if (exists) {
                console.log(`  ‚úÖ ${field}: —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
            } else {
                console.log(`  ‚ùå ${field}: –ù–ï —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
            }
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –ø–æ–ª—è –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –∞–Ω–∞–ª–∏–∑–µ
        console.log('\nüîç –ü–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ø–æ–ª—è–º –∞–Ω–∞–ª–∏–∑–∞:');
        const possibleMappings = {
            'winner_nick': ['winner_login', 'winner'],
            'seller_nick': ['seller_login', 'seller'],
            'final_price': ['winning_bid', 'final_bid'],
            'starting_price': ['starting_bid', 'min_price'],
            'lot_description': ['coin_description', 'description'],
            'lot_category': ['category', 'lot_type'],
            'auction_id': ['auction_number', 'auction_id']
        };
        
        Object.entries(possibleMappings).forEach(([analysisField, possibleFields]) => {
            const found = possibleFields.find(field => 
                result.rows.find(row => row.column_name === field)
            );
            if (found) {
                console.log(`  ${analysisField} ‚Üí ${found}`);
            } else {
                console.log(`  ${analysisField} ‚Üí –ù–ï –ù–ê–ô–î–ï–ù–û`);
            }
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    } finally {
        await db.end();
    }
}

checkRealTableStructure();
