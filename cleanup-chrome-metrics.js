#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤ –º–µ—Ç—Ä–∏–∫ Chrome
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∏—Å–∫–∞
 */

const fs = require('fs');
const path = require('path');
const { exec } = require('child_process');

function cleanupChromeMetrics() {
    console.log('üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Ñ–∞–π–ª–æ–≤ –º–µ—Ç—Ä–∏–∫ Chrome...');
    
    try {
        // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ Chrome
        const tempDirs = [
            '/tmp/chrome-temp-*',
            '/tmp/chrome-user-data-*',
            '/tmp/.com.google.Chrome.*',
            '/tmp/.org.chromium.Chromium.*',
            '/tmp/.config/google-chrome',
            '/tmp/.config/chromium'
        ];
        
        tempDirs.forEach(pattern => {
            exec(`rm -rf ${pattern}`, (error) => {
                if (error && !error.message.includes('No such file')) {
                    console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å ${pattern}: ${error.message}`);
                }
            });
        });
        
        // –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª—ã –º–µ—Ç—Ä–∏–∫ Chrome –∏–∑ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –º–µ—Å—Ç
        const metricsDirs = [
            '/root/.config/google-chrome/BrowserMetrics',
            '/root/.config/chromium/BrowserMetrics',
            '/tmp/.config/google-chrome/BrowserMetrics',
            '/tmp/.config/chromium/BrowserMetrics'
        ];
        
        let deletedFiles = 0;
        let totalSize = 0;
        
        metricsDirs.forEach(metricsDir => {
            if (fs.existsSync(metricsDir)) {
                try {
                    const files = fs.readdirSync(metricsDir);
                    files.forEach(file => {
                        if (file.startsWith('BrowserMetrics-') && file.endsWith('.pma')) {
                            try {
                                const filePath = path.join(metricsDir, file);
                                const stats = fs.statSync(filePath);
                                totalSize += stats.size;
                                fs.unlinkSync(filePath);
                                deletedFiles++;
                                console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª –º–µ—Ç—Ä–∏–∫: ${file} (${(stats.size / 1024 / 1024).toFixed(2)} MB)`);
                            } catch (error) {
                                console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å ${file}: ${error.message}`);
                            }
                        }
                    });
                } catch (error) {
                    console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é ${metricsDir}: ${error.message}`);
                }
            }
        });
        
        // –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –º–µ—Ç—Ä–∏–∫
        exec('find /tmp -name "BrowserMetrics-*.pma" -delete 2>/dev/null', (error) => {
            if (error && !error.message.includes('No such file')) {
                console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π –æ—á–∏—Å—Ç–∫–µ –º–µ—Ç—Ä–∏–∫: ${error.message}`);
            }
        });
        
        exec('find /root/.config -name "BrowserMetrics-*.pma" -delete 2>/dev/null', (error) => {
            if (error && !error.message.includes('No such file')) {
                console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π –æ—á–∏—Å—Ç–∫–µ –º–µ—Ç—Ä–∏–∫: ${error.message}`);
            }
        });
        
        console.log(`‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —É–¥–∞–ª–µ–Ω–æ ${deletedFiles} —Ñ–∞–π–ª–æ–≤, –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ ${(totalSize / 1024 / 1024).toFixed(2)} MB`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ
        exec('df -h /', (error, stdout) => {
            if (!error) {
                const lines = stdout.split('\n');
                if (lines.length > 1) {
                    const diskInfo = lines[1].split(/\s+/);
                    const used = diskInfo[2];
                    const available = diskInfo[3];
                    const usePercent = diskInfo[4];
                    console.log(`üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞: ${used} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ, ${available} —Å–≤–æ–±–æ–¥–Ω–æ (${usePercent})`);
                }
            }
        });
        
    } catch (error) {
        console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: ${error.message}`);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É
cleanupChromeMetrics();

// –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω —Å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º --watch, –∑–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É
if (process.argv.includes('--watch')) {
    console.log('üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç...');
    setInterval(cleanupChromeMetrics, 30 * 60 * 1000); // 30 –º–∏–Ω—É—Ç
}