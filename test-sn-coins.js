const { Pool } = require('pg');
const config = require('./config');

async function testSnCoins() {
    const pool = new Pool(config.dbConfig);
    
    try {
        console.log('üîç –ò—â–µ–º –≤—Å–µ –º–æ–Ω–µ—Ç—ã —Å –º–µ—Ç–∞–ª–ª–æ–º Sn...');
        
        const query = `
            SELECT 
                id, denomination, coin_name, year, metal, mint, 
                condition, mintage, country,
                original_description
            FROM coin_catalog 
            WHERE metal = 'Sn'
            ORDER BY denomination, coin_name, year
        `;
        
        const result = await pool.query(query);
        
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${result.rows.length} –æ–ª–æ–≤—è–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç`);
        console.log('\nüìã –°–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç:');
        
        result.rows.forEach((coin, index) => {
            console.log(`${index + 1}. ID: ${coin.id} | ${coin.denomination} ${coin.coin_name} | ${coin.year || '–±–µ–∑ –≥–æ–¥–∞'} | ${coin.mint || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–≤–æ—Ä'} | ${coin.condition || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
        });
        
        // –ü—Ä–æ–≤–µ—Ä–∏–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        console.log('\nüîç –ê–Ω–∞–ª–∏–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤...');
        
        const duplicateQuery = `
            SELECT 
                denomination, coin_name, year, mint,
                COUNT(*) as count,
                STRING_AGG(id::text, ', ') as ids
            FROM coin_catalog 
            WHERE metal = 'Sn'
            GROUP BY denomination, coin_name, year, mint
            HAVING COUNT(*) > 1
            ORDER BY count DESC
        `;
        
        const duplicateResult = await pool.query(duplicateQuery);
        
        if (duplicateResult.rows.length > 0) {
            console.log(`\n‚ùå –ù–∞–π–¥–µ–Ω–æ ${duplicateResult.rows.length} –≥—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:`);
            duplicateResult.rows.forEach((dup, index) => {
                console.log(`${index + 1}. ${dup.denomination} ${dup.coin_name} | ${dup.year || '–±–µ–∑ –≥–æ–¥–∞'} | ${dup.mint || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–≤–æ—Ä'} - ${dup.count} —à—Ç—É–∫ (ID: ${dup.ids})`);
            });
        } else {
            console.log('\n‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∏–º –º–æ–Ω–µ—Ç—ã –±–µ–∑ –≥–æ–¥–∞
        console.log('\nüîç –ú–æ–Ω–µ—Ç—ã –±–µ–∑ –≥–æ–¥–∞:');
        const noYearQuery = `
            SELECT 
                id, denomination, coin_name, mint, condition,
                original_description
            FROM coin_catalog 
            WHERE metal = 'Sn' AND year IS NULL
            ORDER BY denomination, coin_name
        `;
        
        const noYearResult = await pool.query(noYearQuery);
        
        if (noYearResult.rows.length > 0) {
            console.log(`\nüìã –ù–∞–π–¥–µ–Ω–æ ${noYearResult.rows.length} –º–æ–Ω–µ—Ç –±–µ–∑ –≥–æ–¥–∞:`);
            noYearResult.rows.forEach((coin, index) => {
                console.log(`${index + 1}. ID: ${coin.id} | ${coin.denomination} ${coin.coin_name} | ${coin.mint || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–≤–æ—Ä'} | ${coin.condition || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
            });
        } else {
            console.log('\n‚úÖ –í—Å–µ –º–æ–Ω–µ—Ç—ã –∏–º–µ—é—Ç –≥–æ–¥');
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    } finally {
        await pool.end();
    }
}

testSnCoins();
