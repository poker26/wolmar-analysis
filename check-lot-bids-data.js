const { Pool } = require('pg');
const config = require('./config');

async function checkLotBidsData() {
    const pool = new Pool(config.dbConfig);
    
    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ lot_bids...');
        
        // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        const totalResult = await pool.query('SELECT COUNT(*) as count FROM lot_bids');
        console.log(`üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–≤–æ–∫ –≤ –ë–î: ${totalResult.rows[0].count}`);
        
        if (totalResult.rows[0].count === '0') {
            console.log('‚ùå –¢–∞–±–ª–∏—Ü–∞ lot_bids –ø—É—Å—Ç–∞!');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ª–æ—Ç—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
            const watchlistResult = await pool.query(`
                SELECT COUNT(*) as count 
                FROM watchlist w
                JOIN auction_lots al ON w.lot_id = al.id
                WHERE al.source_url IS NOT NULL
            `);
            console.log(`üìä –õ–æ—Ç–æ–≤ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º —Å URL: ${watchlistResult.rows[0].count}`);
            
            if (watchlistResult.rows[0].count > 0) {
                console.log('üí° –ï—Å—Ç—å –ª–æ—Ç—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º, –Ω–æ –Ω–µ—Ç —Å—Ç–∞–≤–æ–∫. –ù—É–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ!');
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –ª–æ—Ç–æ–≤
                const sampleLots = await pool.query(`
                    SELECT al.id, al.lot_number, al.auction_number, al.source_url
                    FROM watchlist w
                    JOIN auction_lots al ON w.lot_id = al.id
                    WHERE al.source_url IS NOT NULL
                    LIMIT 3
                `);
                
                console.log('üìã –ü—Ä–∏–º–µ—Ä—ã –ª–æ—Ç–æ–≤ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º:');
                sampleLots.rows.forEach((lot, index) => {
                    console.log(`   ${index + 1}. –õ–æ—Ç ${lot.lot_number} (ID: ${lot.id}): ${lot.source_url}`);
                });
            }
            
            return;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç–∞–≤–∫–∏
        const recentBids = await pool.query(`
            SELECT 
                lb.lot_id, 
                lb.bid_amount, 
                lb.bidder_login, 
                lb.bid_timestamp, 
                lb.is_auto_bid,
                al.lot_number,
                al.auction_number
            FROM lot_bids lb
            JOIN auction_lots al ON lb.lot_id = al.id
            ORDER BY lb.bid_timestamp DESC
            LIMIT 10
        `);
        
        console.log('üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç–∞–≤–æ–∫:');
        recentBids.rows.forEach((bid, index) => {
            const autoBid = bid.is_auto_bid ? ' (–∞–≤—Ç–æ)' : '';
            console.log(`   ${index + 1}. –õ–æ—Ç ${bid.lot_number}: ${bid.bid_amount}‚ÇΩ –æ—Ç ${bid.bidder_login}${autoBid} (${bid.bid_timestamp})`);
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ç–∞–≤–∫–∏ –¥–ª—è –ª–æ—Ç–æ–≤ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
        const watchlistBids = await pool.query(`
            SELECT COUNT(*) as count
            FROM lot_bids lb
            JOIN watchlist w ON lb.lot_id = w.lot_id
        `);
        
        console.log(`üìä –°—Ç–∞–≤–æ–∫ –¥–ª—è –ª–æ—Ç–æ–≤ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º: ${watchlistBids.rows[0].count}`);
        
        if (watchlistBids.rows[0].count === '0') {
            console.log('‚ùå –ù–µ—Ç —Å—Ç–∞–≤–æ–∫ –¥–ª—è –ª–æ—Ç–æ–≤ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º!');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ—Ç—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º –±–µ–∑ —Å—Ç–∞–≤–æ–∫
            const lotsWithoutBids = await pool.query(`
                SELECT al.id, al.lot_number, al.auction_number
                FROM watchlist w
                JOIN auction_lots al ON w.lot_id = al.id
                LEFT JOIN lot_bids lb ON al.id = lb.lot_id
                WHERE lb.lot_id IS NULL
                LIMIT 5
            `);
            
            console.log('üìã –õ–æ—Ç—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º –±–µ–∑ —Å—Ç–∞–≤–æ–∫:');
            lotsWithoutBids.rows.forEach((lot, index) => {
                console.log(`   ${index + 1}. –õ–æ—Ç ${lot.lot_number} (ID: ${lot.id})`);
            });
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error.message);
    } finally {
        await pool.end();
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
if (require.main === module) {
    checkLotBidsData()
        .then(() => {
            console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
            process.exit(0);
        })
        .catch((error) => {
            console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
            process.exit(1);
        });
}

module.exports = checkLotBidsData;
