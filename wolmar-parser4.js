const puppeteer = require('puppeteer-core');
const { Client } = require('pg');
const fs = require('fs');
const https = require('https');

class WolmarAuctionParser {
    constructor(dbConfig, auctionNumber) {
        this.dbConfig = dbConfig; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        this.dbClient = new Client(dbConfig);
        this.browser = null;
        this.page = null;
        this.processed = 0;
        this.errors = 0;
        this.skipped = 0;
        this.auctionNumber = auctionNumber;
        this.progressFile = `parser_progress_${auctionNumber}.json`; // –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å –Ω–æ–º–µ—Ä–æ–º –∞—É–∫—Ü–∏–æ–Ω–∞
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤–µ—Å–∞ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
    extractWeight(description, metal) {
        if (!description || !metal) return null;
        
        // –ú–∞–ø–ø–∏–Ω–≥ –º–µ—Ç–∞–ª–ª–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ —Ç–µ–∫—Å—Ç–µ
        const metalNames = {
            'Au': ['–∑–æ–ª–æ—Ç–∞', '–∑–æ–ª–æ—Ç–æ'],
            'Ag': ['—Å–µ—Ä–µ–±—Ä–∞', '—Å–µ—Ä–µ–±—Ä–æ'],
            'Pt': ['–ø–ª–∞—Ç–∏–Ω—ã', '–ø–ª–∞—Ç–∏–Ω–∞'],
            'Pd': ['–ø–∞–ª–ª–∞–¥–∏—è', '–ø–∞–ª–ª–∞–¥–∏–π']
        };
        
        const metalVariants = metalNames[metal] || [];
        
        // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–µ—Å–∞
        const weightPatterns = [
            // –°—Ç–∞—Ä—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã: Au 7,78, Au 7.78, Au 7,78–≥, Au 7,78 –≥—Ä, Au 7,78–≥—Ä
            new RegExp(`${metal}\\s+(\\d+[,.]\\d+)\\s*(?:–≥|–≥—Ä|–≥—Ä–∞–º–º)?`, 'i'),
            new RegExp(`${metal}\\s+(\\d+[,.]\\d+)`, 'i'),
            
            // –ù–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã: "—á–∏—Å—Ç–æ–≥–æ –∑–æ–ª–æ—Ç–∞ - 7,74 –≥—Ä", "—á–∏—Å—Ç–æ–≥–æ —Å–µ—Ä–µ–±—Ä–∞ - 12,5 –≥—Ä"
            ...metalVariants.map(variant => 
                new RegExp(`—á–∏—Å—Ç–æ–≥–æ\\s+${variant}\\s*-\\s*(\\d+[,.]\\d+)\\s*(?:–≥|–≥—Ä|–≥—Ä–∞–º–º)?`, 'i')
            ),
            
            // –ü–∞—Ç—Ç–µ—Ä–Ω—ã: "–∑–æ–ª–æ—Ç–∞ 7,74 –≥—Ä", "—Å–µ—Ä–µ–±—Ä–∞ 12,5 –≥—Ä"
            ...metalVariants.map(variant => 
                new RegExp(`${variant}\\s+(\\d+[,.]\\d+)\\s*(?:–≥|–≥—Ä|–≥—Ä–∞–º–º)`, 'i')
            ),
            
            // –ü–∞—Ç—Ç–µ—Ä–Ω—ã: "–≤–µ—Å 7,74 –≥—Ä", "–º–∞—Å—Å–∞ 12,5 –≥—Ä"
            new RegExp(`(?:–≤–µ—Å|–º–∞—Å—Å–∞)\\s+(\\d+[,.]\\d+)\\s*(?:–≥|–≥—Ä|–≥—Ä–∞–º–º)`, 'i'),
            
            // –ü–∞—Ç—Ç–µ—Ä–Ω—ã: "7,74 –≥—Ä –∑–æ–ª–æ—Ç–∞", "12,5 –≥—Ä —Å–µ—Ä–µ–±—Ä–∞"
            ...metalVariants.map(variant => 
                new RegExp(`(\\d+[,.]\\d+)\\s*(?:–≥|–≥—Ä|–≥—Ä–∞–º–º)\\s+${variant}`, 'i')
            )
        ];
        
        for (const pattern of weightPatterns) {
            const match = description.match(pattern);
            if (match) {
                // –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
                const weightStr = match[1].replace(',', '.');
                const weight = parseFloat(weightStr);
                
                // –í–∞–ª–∏–¥–∞—Ü–∏—è: –≤–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–ª—è –º–æ–Ω–µ—Ç (0.1 - 1000 –≥—Ä–∞–º–º)
                if (weight >= 0.1 && weight <= 1000) {
                    return weight;
                }
            }
        }
        
        return null;
    }

    async init() {
        try {
            // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            await this.dbClient.connect();
            console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ PostgreSQL
            this.dbClient.on('error', async (err) => {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î:', err.message);
                if (err.message.includes('Connection terminated') || err.message.includes('connection') || err.message.includes('not queryable')) {
                    console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
                    try {
                        await this.dbClient.end();
                        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç
                        this.dbClient = new Client(this.dbConfig);
                        await this.dbClient.connect();
                        console.log('‚úÖ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ');
                    } catch (reconnectError) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', reconnectError.message);
                    }
                }
            });
            
            // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            await this.createTable();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
            this.browser = await puppeteer.launch({
                executablePath: 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe',
                headless: true, // –°–∫—Ä—ã—Ç—ã–π —Ä–µ–∂–∏–º –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
                args: [
                    '--no-sandbox', 
                    '--disable-setuid-sandbox',
                    '--disable-dev-shm-usage',
                    '--disable-gpu',
                    '--disable-images', // –ù–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
                    '--disable-javascript', // –û—Ç–∫–ª—é—á–∞–µ–º JS –≥–¥–µ –≤–æ–∑–º–æ–∂–Ω–æ
                    '--user-data-dir=/tmp/chrome-temp-' + Math.random().toString(36).substring(7),
                    '--disable-metrics',
                    '--disable-metrics-reporting',
                    '--disable-background-mode',
                    '--disable-background-timer-throttling',
                    '--disable-renderer-backgrounding',
                    '--disable-backgrounding-occluded-windows',
                    '--disable-logging',
                    '--disable-gpu-logging',
                    '--disable-features=TranslateUI,BlinkGenPropertyTrees,VizDisplayCompositor'
                ]
            });
            this.page = await this.browser.newPage();
            
            // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ user-agent
            await this.page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36');
            
            console.log('‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error.message);
            throw error;
        }
    }

    async createTable() {
        try {
            // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ª–æ—Ç–æ–≤
            const createLotsTableQuery = `
                CREATE TABLE IF NOT EXISTS auction_lots (
                    id SERIAL PRIMARY KEY,
                    lot_number VARCHAR(50),
                    auction_number VARCHAR(50),
                    coin_description TEXT,
                    avers_image_url TEXT,
                    avers_image_path TEXT,
                    revers_image_url TEXT,
                    revers_image_path TEXT,
                    winner_login VARCHAR(100),
                    winning_bid DECIMAL(12, 2),
                    auction_end_date TIMESTAMP,
                    currency VARCHAR(10) DEFAULT 'RUB',
                    parsed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    source_url TEXT,
                    bids_count INTEGER,
                    lot_status VARCHAR(20),
                    year INTEGER,
                    letters VARCHAR(10),
                    metal VARCHAR(10),
                    condition VARCHAR(20),
                    UNIQUE(lot_number, auction_number)
                );
            `;
            await this.dbClient.query(createLotsTableQuery);
            
            // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Å—Å—ã–ª–æ–∫ –Ω–∞ –ª–æ—Ç—ã
            const createUrlsTableQuery = `
                CREATE TABLE IF NOT EXISTS auction_lot_urls (
                    id SERIAL PRIMARY KEY,
                    auction_number VARCHAR(50),
                    lot_url TEXT NOT NULL,
                    lot_number VARCHAR(50),
                    page_number INTEGER,
                    url_index INTEGER,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    UNIQUE(auction_number, lot_url)
                );
            `;
            await this.dbClient.query(createUrlsTableQuery);
            
            console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã/—Å–æ–∑–¥–∞–Ω—ã');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü:', error.message);
            throw error;
        }
    }

    // –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏
    async delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    async recreatePage() {
        try {
            if (this.page && !this.page.isClosed()) {
                await this.page.close();
            }
            this.page = await this.browser.newPage();
            await this.page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36');
            console.log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞');
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', error.message);
            return false;
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    async ensurePageActive() {
        if (!this.page || this.page.isClosed()) {
            console.log('üîÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é...');
            return await this.recreatePage();
        }
        return true;
    }

    // –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
    parseDateTime(dateStr) {
        if (!dateStr) return null;
        
        const monthMap = {
            '—è–Ω–≤–∞—Ä—è': '01', '—Ñ–µ–≤—Ä–∞–ª—è': '02', '–º–∞—Ä—Ç–∞': '03', '–∞–ø—Ä–µ–ª—è': '04',
            '–º–∞—è': '05', '–∏—é–Ω—è': '06', '–∏—é–ª—è': '07', '–∞–≤–≥—É—Å—Ç–∞': '08',
            '—Å–µ–Ω—Ç—è–±—Ä—è': '09', '–æ–∫—Ç—è–±—Ä—è': '10', '–Ω–æ—è–±—Ä—è': '11', '–¥–µ–∫–∞–±—Ä—è': '12'
        };

        // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–∞—Ç
        const patterns = [
            // DD.MM.YYYY HH:MM
            {
                regex: /(\d{1,2})[.\-/](\d{1,2})[.\-/](\d{2,4})\s+(\d{1,2}):(\d{2})/,
                format: (match) => {
                    const day = match[1].padStart(2, '0');
                    const month = match[2].padStart(2, '0');
                    const year = match[3].length === 2 ? '20' + match[3] : match[3];
                    const hour = match[4].padStart(2, '0');
                    const minute = match[5].padStart(2, '0');
                    return `${year}-${month}-${day} ${hour}:${minute}:00`;
                }
            },
            // DD –º–µ—Å—è—Ü YYYY HH:MM
            {
                regex: /(\d{1,2})\s+(—è–Ω–≤–∞—Ä—è|—Ñ–µ–≤—Ä–∞–ª—è|–º–∞—Ä—Ç–∞|–∞–ø—Ä–µ–ª—è|–º–∞—è|–∏—é–Ω—è|–∏—é–ª—è|–∞–≤–≥—É—Å—Ç–∞|—Å–µ–Ω—Ç—è–±—Ä—è|–æ–∫—Ç—è–±—Ä—è|–Ω–æ—è–±—Ä—è|–¥–µ–∫–∞–±—Ä—è)\s+(\d{4})\s+(\d{1,2}):(\d{2})/i,
                format: (match) => {
                    const day = match[1].padStart(2, '0');
                    const month = monthMap[match[2].toLowerCase()];
                    const year = match[3];
                    const hour = match[4].padStart(2, '0');
                    const minute = match[5].padStart(2, '0');
                    return month ? `${year}-${month}-${day} ${hour}:${minute}:00` : null;
                }
            },
            // YYYY-MM-DD HH:MM
            {
                regex: /(\d{4})-(\d{1,2})-(\d{1,2})\s+(\d{1,2}):(\d{2})/,
                format: (match) => {
                    const year = match[1];
                    const month = match[2].padStart(2, '0');
                    const day = match[3].padStart(2, '0');
                    const hour = match[4].padStart(2, '0');
                    const minute = match[5].padStart(2, '0');
                    return `${year}-${month}-${day} ${hour}:${minute}:00`;
                }
            },
            // DD.MM HH:MM (—Ç–µ–∫—É—â–∏–π –≥–æ–¥)
            {
                regex: /(\d{1,2})[.\-/](\d{1,2})\s+(\d{1,2}):(\d{2})/,
                format: (match) => {
                    const day = match[1].padStart(2, '0');
                    const month = match[2].padStart(2, '0');
                    const year = new Date().getFullYear();
                    const hour = match[3].padStart(2, '0');
                    const minute = match[4].padStart(2, '0');
                    return `${year}-${month}-${day} ${hour}:${minute}:00`;
                }
            }
        ];

        for (let pattern of patterns) {
            const match = dateStr.match(pattern.regex);
            if (match) {
                const formatted = pattern.format(match);
                if (formatted) {
                    return formatted;
                }
            }
        }

        return null;
    }

    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    extractDateFromText(text) {
        if (!text) return null;
        
        // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–∞—Ç –≤ —Ç–µ–∫—Å—Ç–µ
        const dateMatches = [];
        const patterns = [
            /(\d{1,2}[.\-/]\d{1,2}[.\-/]\d{2,4}\s+\d{1,2}:\d{2})/g,
            /(\d{1,2}\s+(?:—è–Ω–≤–∞—Ä—è|—Ñ–µ–≤—Ä–∞–ª—è|–º–∞—Ä—Ç–∞|–∞–ø—Ä–µ–ª—è|–º–∞—è|–∏—é–Ω—è|–∏—é–ª—è|–∞–≤–≥—É—Å—Ç–∞|—Å–µ–Ω—Ç—è–±—Ä—è|–æ–∫—Ç—è–±—Ä—è|–Ω–æ—è–±—Ä—è|–¥–µ–∫–∞–±—Ä—è)\s+\d{4}\s+\d{1,2}:\d{2})/gi,
            /(\d{4}-\d{1,2}-\d{1,2}\s+\d{1,2}:\d{2})/g
        ];

        for (let pattern of patterns) {
            let match;
            while ((match = pattern.exec(text)) !== null) {
                dateMatches.push(match[1]);
            }
        }

        // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–∞–π–¥–µ–Ω–Ω—É—é –¥–∞—Ç—É (–ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è)
        if (dateMatches.length > 0) {
            const lastDate = dateMatches[dateMatches.length - 1];
            return this.parseDateTime(lastDate);
        }

        return null;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞
    async getAuctionEndDate(auctionUrl) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞
            await this.ensurePageActive();

            await this.page.goto(auctionUrl, { waitUntil: 'domcontentloaded', timeout: 30000 });
            await this.delay(2000);

            const pageText = await this.page.evaluate(() => {
                return document.body.textContent || document.body.innerText || '';
            });

            return this.extractDateFromText(pageText);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞:', error.message);
            
            // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å detached frame, –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            if (error.message.includes('detached') || error.message.includes('Frame')) {
                console.log('üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ detached frame, –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...');
                await this.recreatePage();
            }
            
            // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
            if (error.message.includes('Connection terminated') || error.message.includes('connection')) {
                console.log('üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î, –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è...');
                try {
                    await this.dbClient.end();
                    await this.dbClient.connect();
                    console.log('‚úÖ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ');
                } catch (reconnectError) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', reconnectError.message);
                }
            }
            
            return null;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ –ª–æ—Ç—ã –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞—É–∫—Ü–∏–æ–Ω–∞
    async getAllLotUrls(auctionUrl, testMode = false) {
        console.log('üîç –°–æ–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤—Å–µ –ª–æ—Ç—ã...');
        const allUrls = new Set();
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞
            await this.ensurePageActive();

            await this.page.goto(auctionUrl, { waitUntil: 'domcontentloaded', timeout: 30000 });
            await this.delay(2000);

            // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
            const paginationInfo = await this.page.evaluate(() => {
                // –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ª–æ—Ç–æ–≤ –∏ —Å—Ç—Ä–∞–Ω–∏—Ü
                const totalLotsElement = document.querySelector('.disabled[style*="float: right"]');
                const totalLots = totalLotsElement ? totalLotsElement.textContent.match(/(\d+)\s*–ª–æ—Ç/)?.[1] : null;
                
                // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
                const paginationLinks = document.querySelectorAll('.paginator li a');
                let maxPage = 1;
                paginationLinks.forEach(link => {
                    const pageNum = parseInt(link.textContent);
                    if (pageNum && pageNum > maxPage) {
                        maxPage = pageNum;
                    }
                });

                return {
                    totalLots: totalLots ? parseInt(totalLots) : null,
                    maxPage: maxPage
                };
            });

            console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ª–æ—Ç–æ–≤: ${paginationInfo.totalLots}`);
            console.log(`üìÑ –°—Ç—Ä–∞–Ω–∏—Ü –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: ${paginationInfo.maxPage}`);

            // –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            const pagesToProcess = testMode ? 1 : paginationInfo.maxPage;
            console.log(`üìã –†–µ–∂–∏–º: ${testMode ? '–¢–ï–°–¢ (—Ç–æ–ª—å–∫–æ 1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)' : '–ü–û–õ–ù–´–ô'} - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${pagesToProcess} —Å—Ç—Ä–∞–Ω–∏—Ü`);

            // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            for (let page = 1; page <= pagesToProcess; page++) {
                console.log(`üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É ${page}/${pagesToProcess}...`);
                
                const pageUrl = page === 1 ? auctionUrl : `${auctionUrl}?page=${page}`;
                
                try {
                    await this.page.goto(pageUrl, { waitUntil: 'domcontentloaded', timeout: 30000 });
                    await this.delay(1000);

                    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –ª–æ—Ç—ã —Å —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    const pageUrls = await this.page.evaluate(() => {
                        const urls = [];
                        
                        // –ò—â–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ª–æ—Ç—ã –≤ —Ç–∞–±–ª–∏—Ü–µ
                        const lotLinks = document.querySelectorAll('a.title.lot[href*="/auction/"]');
                        
                        lotLinks.forEach(link => {
                            if (link.href && link.href.includes('/auction/')) {
                                urls.push(link.href);
                            }
                        });

                        return urls;
                    });

                    pageUrls.forEach(url => allUrls.add(url));
                    console.log(`   ‚úì –ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: ${pageUrls.length} (–≤—Å–µ–≥–æ: ${allUrls.size})`);

                    // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
                    await this.delay(500);

                } catch (error) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${page}:`, error.message);
                    
                    // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å detached frame, –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    if (error.message.includes('detached') || error.message.includes('Frame')) {
                        console.log(`üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ detached frame –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${page}, –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...`);
                        await this.recreatePage();
                        // –î–µ–ª–∞–µ–º –ø–∞—É–∑—É –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º
                        await this.delay(3000);
                    }
                    
                    // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
                    if (error.message.includes('Connection terminated') || error.message.includes('connection')) {
                        console.log(`üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${page}, –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è...`);
                        try {
                            await this.dbClient.end();
                            await this.dbClient.connect();
                            console.log('‚úÖ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ');
                        } catch (reconnectError) {
                            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', reconnectError.message);
                        }
                    }
                    
                    continue;
                }
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ —Å—Å—ã–ª–æ–∫:', error.message);
            
            // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å detached frame, –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            if (error.message.includes('detached') || error.message.includes('Frame')) {
                console.log('üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ detached frame –ø—Ä–∏ —Å–±–æ—Ä–µ —Å—Å—ã–ª–æ–∫, –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...');
                await this.recreatePage();
            }
            
            // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
            if (error.message.includes('Connection terminated') || error.message.includes('connection')) {
                console.log('üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î –ø—Ä–∏ —Å–±–æ—Ä–µ —Å—Å—ã–ª–æ–∫, –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è...');
                try {
                    await this.dbClient.end();
                    await this.dbClient.connect();
                    console.log('‚úÖ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ');
                } catch (reconnectError) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', reconnectError.message);
                }
            }
        }

        const urlArray = Array.from(allUrls);
        console.log(`üìã –í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫: ${urlArray.length}`);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if (urlArray.length > 0) {
            await this.saveLotUrlsToDatabase(this.auctionNumber, urlArray);
        }
        
        return urlArray;
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ –ª–æ—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    async saveLotUrlsToDatabase(auctionNumber, urls) {
        try {
            console.log(`üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º ${urls.length} —Å—Å—ã–ª–æ–∫ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...`);
            
            // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞
            const deleteQuery = 'DELETE FROM auction_lot_urls WHERE auction_number = $1';
            await this.dbClient.query(deleteQuery, [auctionNumber]);
            
            // –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏
            const insertQuery = `
                INSERT INTO auction_lot_urls (auction_number, lot_url, url_index) 
                VALUES ($1, $2, $3)
                ON CONFLICT (auction_number, lot_url) DO NOTHING
            `;
            
            for (let i = 0; i < urls.length; i++) {
                await this.dbClient.query(insertQuery, [auctionNumber, urls[i], i]);
            }
            
            console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${urls.length} —Å—Å—ã–ª–æ–∫ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö`);
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –≤ –ë–î:', error.message);
            
            // –ï—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ, –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
            if (error.message.includes('Connection terminated') || error.message.includes('connection') || error.message.includes('not queryable')) {
                console.log('üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
                try {
                    await this.dbClient.end();
                    this.dbClient = new Client(this.dbConfig);
                    await this.dbClient.connect();
                    console.log('‚úÖ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ');
                    
                    // –ü–æ–≤—Ç–æ—Ä—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
                    return await this.saveLotUrlsToDatabase(auctionNumber, urls);
                } catch (reconnectError) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', reconnectError.message);
                    return false;
                }
            }
            
            return false;
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Å—ã–ª–æ–∫ –Ω–∞ –ª–æ—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    async loadLotUrlsFromDatabase(auctionNumber) {
        try {
            const query = `
                SELECT lot_url, url_index 
                FROM auction_lot_urls 
                WHERE auction_number = $1 
                ORDER BY url_index
            `;
            const result = await this.dbClient.query(query, [auctionNumber]);
            
            if (result.rows.length > 0) {
                const urls = result.rows.map(row => row.lot_url);
                console.log(`üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${urls.length} —Å—Å—ã–ª–æ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö`);
                return urls;
            }
            
            return null;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Å—ã–ª–æ–∫ –∏–∑ –ë–î:', error.message);
            
            // –ï—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ, –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
            if (error.message.includes('Connection terminated') || error.message.includes('connection') || error.message.includes('not queryable')) {
                console.log('üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
                try {
                    await this.dbClient.end();
                    this.dbClient = new Client(this.dbConfig);
                    await this.dbClient.connect();
                    console.log('‚úÖ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ');
                    
                    // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å
                    return await this.loadLotUrlsFromDatabase(auctionNumber);
                } catch (reconnectError) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', reconnectError.message);
                    return null;
                }
            }
            
            return null;
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ —Å—Å—ã–ª–∫–∏ –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    async urlsExistInDatabase(auctionNumber) {
        try {
            const query = 'SELECT COUNT(*) as count FROM auction_lot_urls WHERE auction_number = $1';
            const result = await this.dbClient.query(query, [auctionNumber]);
            return result.rows[0].count > 0;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Å—ã–ª–æ–∫ –≤ –ë–î:', error.message);
            return false;
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ª–æ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    async lotExists(auctionNumber, lotNumber) {
        try {
            const query = 'SELECT id FROM auction_lots WHERE auction_number = $1 AND lot_number = $2';
            const result = await this.dbClient.query(query, [auctionNumber, lotNumber]);
            return result.rows.length > 0;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ª–æ—Ç–∞:', error.message);
            
            // –ï—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ, –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
            if (error.message.includes('Connection terminated') || error.message.includes('connection') || error.message.includes('not queryable')) {
                console.log('üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
                try {
                    await this.dbClient.end();
                    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç
                    this.dbClient = new Client(this.dbConfig);
                    await this.dbClient.connect();
                    console.log('‚úÖ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ');
                    
                    // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å
                    const result = await this.dbClient.query(query, [auctionNumber, lotNumber]);
                    return result.rows.length > 0;
                } catch (reconnectError) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', reconnectError.message);
                    return false;
                }
            }
            
            return false; // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –ª–æ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        }
    }

    // –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ª–æ—Ç–∞
    async parseLotPage(url, auctionEndDate = null) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞
            await this.ensurePageActive();
            await this.page.goto(url, { waitUntil: 'domcontentloaded', timeout: 30000 });
            await this.delay(2000);

            const lotData = await this.page.evaluate(() => {
                const data = {};

                // –ù–æ–º–µ—Ä –∞—É–∫—Ü–∏–æ–Ω–∞ - –∏–∑ —Ö–ª–µ–±–Ω—ã—Ö –∫—Ä–æ—à–µ–∫
                const breadcrumbAuction = document.querySelector('ol[typeof="BreadcrumbList"] li:nth-child(2) span[property="name"]');
                if (breadcrumbAuction) {
                    const match = breadcrumbAuction.textContent.match(/‚Ññ\s*(\d+)/);
                    if (match) {
                        data.auctionNumber = match[1];
                    }
                }

                // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ breadcrumb, –∏—â–µ–º –≤ h1
                if (!data.auctionNumber) {
                    const h1 = document.querySelector('h1');
                    if (h1) {
                        const match = h1.textContent.match(/‚Ññ\s*(\d+)/);
                        if (match) {
                            data.auctionNumber = match[1];
                        }
                    }
                }

                // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ URL –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤
                if (!data.auctionNumber) {
                    const urlMatch = window.location.href.match(/\/auction\/(\d+)\//);
                    if (urlMatch) {
                        data.auctionNumber = urlMatch[1];
                    }
                }

                // –ù–æ–º–µ—Ä –ª–æ—Ç–∞ - –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ h5
                const lotTitle = document.querySelector('h5');
                if (lotTitle) {
                    const match = lotTitle.textContent.match(/–õ–æ—Ç\s*‚Ññ\s*(\d+)/i);
                    if (match) {
                        data.lotNumber = match[1];
                    }
                }

                // –ò–∑ URL –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤
                if (!data.lotNumber) {
                    const urlMatch = window.location.href.match(/\/(\d+)(?:\/|\?|$)/);
                    if (urlMatch) {
                        data.lotNumber = urlMatch[1];
                    }
                }

                // –û–ø–∏—Å–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã
                let description = '';
                if (lotTitle) {
                    const titleText = lotTitle.textContent.replace(/–õ–æ—Ç\s*‚Ññ\s*\d+\.\s*/i, '').trim();
                    description = titleText;
                }

                const descriptionDiv = document.querySelector('.description');
                if (descriptionDiv) {
                    const descText = descriptionDiv.textContent.trim();
                    if (descText && descText !== description) {
                        description += (description ? ' | ' : '') + descText;
                    }
                }
                data.coinDescription = description;

                // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                data.images = [];
                const imageLinks = document.querySelectorAll('a[href*="/auction/"][onclick*="openLotImage"]');
                imageLinks.forEach(link => {
                    const img = link.querySelector('img');
                    if (img && img.src) {
                        const fullImageUrl = img.src.replace('/preview_', '/');
                        data.images.push(fullImageUrl);
                    }
                });

                // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ—Ä–≥–∞—Ö
                const valuesDiv = document.querySelectorAll('.values')[1];
                if (valuesDiv) {
                    const valuesText = valuesDiv.textContent;

                    // –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞
                    const bidMatch = valuesText.match(/–°—Ç–∞–≤–∫–∞:\s*(\d+(?:\s?\d+)*(?:[.,]\d+)?)\s*—Ä—É–±/i);
                    if (bidMatch) {
                        data.winningBid = bidMatch[1].replace(/\s/g, '').replace(',', '.');
                    }

                    // –õ–∏–¥–µ—Ä
                    const leaderMatch = valuesText.match(/–õ–∏–¥–µ—Ä:\s*([a-zA-Z0-9_–ê-–Ø–∞-—è]+)/i);
                    if (leaderMatch) {
                        data.winnerLogin = leaderMatch[1];
                    }

                    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–≤–æ–∫
                    const bidsCountMatch = valuesText.match(/–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–≤–æ–∫:\s*(\d+)/i);
                    if (bidsCountMatch) {
                        data.bidsCount = bidsCountMatch[1];
                    }

                    // –°—Ç–∞—Ç—É—Å
                    if (valuesText.includes('–õ–æ—Ç –∑–∞–∫—Ä—ã—Ç')) {
                        data.lotStatus = 'closed';
                    } else {
                        data.lotStatus = 'active';
                    }
                }

                // –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –º–æ–Ω–µ—Ç—ã
                const firstValuesDiv = document.querySelectorAll('.values')[0];
                if (firstValuesDiv) {
                    const valuesText = firstValuesDiv.textContent;
                    
                    const yearMatch = valuesText.match(/–ì–æ–¥:\s*(\d+)/);
                    if (yearMatch) {
                        data.year = yearMatch[1];
                    }

                    const lettersMatch = valuesText.match(/–ë—É–∫–≤—ã:\s*([–ê-–Ø\*]+)/);
                    if (lettersMatch) {
                        data.letters = lettersMatch[1];
                    }

                    const metalMatch = valuesText.match(/–ú–µ—Ç–∞–ª–ª:\s*(\w+)/);
                    if (metalMatch) {
                        data.metal = metalMatch[1];
                    }

                    // –£–ª—É—á—à–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≥—Ä–∞–¥–∞—Ü–∏–π
                    const conditionMatch = valuesText.match(/–°–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç—å:\s*([\w\-\+\/\s]+)/);
                    if (conditionMatch) {
                        // –£–±–∏—Ä–∞–µ–º –í–°–ï –ø—Ä–æ–±–µ–ª—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏
                        data.condition = conditionMatch[1].replace(/\s+/g, '');
                    }
                }

                return data;
            });

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞
            if (auctionEndDate) {
                lotData.auctionEndDate = auctionEndDate;
            }

            lotData.sourceUrl = url;
            return lotData;

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ${url}:`, error.message);
            
            // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å detached frame, –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            if (error.message.includes('detached') || error.message.includes('Frame')) {
                console.log('üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ detached frame, –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...');
                await this.recreatePage();
            }
            
            // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
            if (error.message.includes('Connection terminated') || error.message.includes('connection')) {
                console.log('üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î, –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è...');
                try {
                    await this.dbClient.end();
                    await this.dbClient.connect();
                    console.log('‚úÖ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ');
                } catch (reconnectError) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', reconnectError.message);
                }
            }
            
            throw error;
        }
    }

    async saveLotToDatabase(lotData) {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Å –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã—Ö –º–µ—Ç–∞–ª–ª–æ–≤
        const weight = this.extractWeight(lotData.coin_description, lotData.metal);
        
        const insertQuery = `
            INSERT INTO auction_lots (
                lot_number, auction_number, coin_description, 
                avers_image_url, revers_image_url,
                winner_login, winning_bid, auction_end_date, source_url,
                bids_count, lot_status, year, letters, metal, condition, weight
            ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16)
            ON CONFLICT (lot_number, auction_number) 
            DO UPDATE SET
                coin_description = EXCLUDED.coin_description,
                winner_login = EXCLUDED.winner_login,
                winning_bid = EXCLUDED.winning_bid,
                auction_end_date = EXCLUDED.auction_end_date,
                bids_count = EXCLUDED.bids_count,
                lot_status = EXCLUDED.lot_status,
                year = EXCLUDED.year,
                letters = EXCLUDED.letters,
                metal = EXCLUDED.metal,
                condition = EXCLUDED.condition,
                weight = EXCLUDED.weight,
                parsed_at = CURRENT_TIMESTAMP
            RETURNING id;
        `;

        const values = [
            lotData.lotNumber || null,
            lotData.auctionNumber || null,
            lotData.coinDescription || null,
            lotData.images?.[0] || null,
            lotData.images?.[1] || null,
            lotData.winnerLogin || null,
            lotData.winningBid ? parseFloat(lotData.winningBid) : null,
            lotData.auctionEndDate || null,
            lotData.sourceUrl || null,
            lotData.bidsCount ? parseInt(lotData.bidsCount) : null,
            lotData.lotStatus || null,
            lotData.year ? parseInt(lotData.year) : null,
            lotData.letters || null,
            lotData.metal || null,
            lotData.condition || null,
            weight
        ];

        try {
            const result = await this.dbClient.query(insertQuery, values);
            return result.rows[0].id;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î:', error.message);
            
            // –ï—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ, –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
            if (error.message.includes('Connection terminated') || error.message.includes('connection') || error.message.includes('not queryable')) {
                console.log('üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
                try {
                    await this.dbClient.end();
                    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç
                    this.dbClient = new Client(this.dbConfig);
                    await this.dbClient.connect();
                    console.log('‚úÖ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ');
                    
                    // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å
                    const result = await this.dbClient.query(insertQuery, values);
                    return result.rows[0].id;
                } catch (reconnectError) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', reconnectError.message);
                    console.log('‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –ª–æ—Ç–∞');
                    return null;
                }
            }
            
            // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –ø–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ–¥–æ–ª–∂–∞–ª—Å—è
            console.log('‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –ª–æ—Ç–∞');
            return null;
        }
    }

    // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Å–µ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞
    async parseEntireAuction(auctionUrl, options = {}) {
        const {
            maxLots = null,           
            skipExisting = true,      
            delayBetweenLots = 800,  
            batchSize = 50,          
            testMode = false,
            startIndex = 0,          // –ù–∞—á–∞—Ç—å —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
            resumeFromProgress = false, // –ù–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–≤—Ç–æ—Ä–Ω–æ
            savedLotUrls = null      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ª–æ—Ç—ã
        } = options;

        console.log('–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞...');
        console.log(`–ù–∞—Å—Ç—Ä–æ–π–∫–∏: maxLots=${maxLots}, skipExisting=${skipExisting}, delay=${delayBetweenLots}ms, testMode=${testMode}, startIndex=${startIndex}`);

        try {
            // –°–ù–ê–ß–ê–õ–ê –ø–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∑–∞–∫—Ä—ã—Ç–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞
            const auctionEndDate = await this.getAuctionEndDate(auctionUrl);
            
            // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –ª–æ—Ç—ã (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –ë–î > —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ > —Å–±–æ—Ä –∑–∞–Ω–æ–≤–æ)
            let lotUrls = savedLotUrls;
            
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            if (!lotUrls || lotUrls.length === 0) {
                console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Å—ã–ª–æ–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
                const urlsExist = await this.urlsExistInDatabase(this.auctionNumber);
                
                if (urlsExist) {
                    console.log('üìã –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Å—ã–ª–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
                    lotUrls = await this.loadLotUrlsFromDatabase(this.auctionNumber);
                    if (lotUrls && lotUrls.length > 0) {
                        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${lotUrls.length} —Å—Å—ã–ª–æ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö`);
                    }
                }
            }
            
            // –ï—Å–ª–∏ –≤ –ë–î –Ω–µ—Ç –∏–ª–∏ —Å—Å—ã–ª–∫–∏ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å, —Å–æ–±–∏—Ä–∞–µ–º –∑–∞–Ω–æ–≤–æ
            if (!lotUrls || lotUrls.length === 0) {
                console.log('üîç –°—Å—ã–ª–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–±–∏—Ä–∞–µ–º –∑–∞–Ω–æ–≤–æ...');
                lotUrls = await this.getAllLotUrls(auctionUrl, testMode);
            } else {
                console.log(`üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑ ${lotUrls.length} —Å—Å—ã–ª–æ–∫`);
            }
            
            if (lotUrls.length === 0) {
                console.log('–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫ –Ω–∞ –ª–æ—Ç—ã');
                return;
            }

            const totalLots = maxLots ? Math.min(maxLots, lotUrls.length) : lotUrls.length;
            console.log(`–ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ª–æ—Ç–æ–≤: ${totalLots} (–Ω–∞—á–∏–Ω–∞—è —Å –∏–Ω–¥–µ–∫—Å–∞ ${startIndex})`);

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ—Ç–æ–≤ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –µ–¥–∏–Ω–æ–π –¥–∞—Ç—ã
            for (let i = startIndex; i < totalLots; i++) {
                const url = lotUrls[i];
                const progress = `${i + 1}/${totalLots}`;
                
                try {
                    console.log(`\n[${progress}] –ü–∞—Ä—Å–∏–Ω–≥: ${url}`);
                    
                    // –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞—Ç—É –∑–∞–∫—Ä—ã—Ç–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞ –≤ –ø–∞—Ä—Å–∏–Ω–≥ –ª–æ—Ç–∞
                    const lotData = await this.parseLotPage(url, auctionEndDate);
                    
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ª–æ—Ç–∞
                    if (skipExisting && lotData.auctionNumber && lotData.lotNumber) {
                        const exists = await this.lotExists(lotData.auctionNumber, lotData.lotNumber);
                        if (exists) {
                            console.log(`–õ–æ—Ç ${lotData.lotNumber} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                            this.skipped++;
                            continue;
                        }
                    }

                    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
                    const savedId = await this.saveLotToDatabase(lotData);
                    if (savedId) {
                        this.processed++;
                        
                        // –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ—Ç–µ
                        console.log(`[${progress}] –õ–æ—Ç ${lotData.lotNumber}: ${lotData.coinDescription?.substring(0, 50)}...`);
                        console.log(`   ${lotData.winningBid} —Ä—É–±. | ${lotData.winnerLogin} | ${lotData.auctionEndDate || '–¥–∞—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}`);
                    } else {
                        console.log(`[${progress}] –õ–æ—Ç ${lotData.lotNumber} –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î`);
                    }

                    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–∞–∂–¥—ã–µ 10 –ª–æ—Ç–æ–≤
                    if ((i + 1) % 10 === 0) {
                        await this.saveProgress(auctionUrl, i + 1, totalLots, url, lotUrls);
                    }

                    // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ª–æ—Ç–∞–º–∏
                    await this.delay(delayBetweenLots);

                    // –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                    if ((i + 1) % batchSize === 0) {
                        console.log(`\n–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
                        console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${this.processed}`);
                        console.log(`   –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${this.skipped}`);
                        console.log(`   –û—à–∏–±–æ–∫: ${this.errors}`);
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–∏ –∫–∞–∂–¥–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
                        await this.saveProgress(auctionUrl, i + 1, totalLots, url, lotUrls);
                    }

                } catch (error) {
                    this.errors++;
                    console.error(`[${progress}] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${url}:`, error.message);
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–µ–π –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
                    await this.saveProgress(auctionUrl, i, totalLots, url, lotUrls);
                    console.log(`[${progress}] üíæ –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ${i}. –ü—Ä–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–∞—á–Ω–µ—Ç—Å—è —Å —ç—Ç–æ–≥–æ –∂–µ –ª–æ—Ç–∞.`);
                    
                    // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å detached frame, –¥–µ–ª–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø–∞—É–∑—É
                    if (error.message.includes('detached') || error.message.includes('Frame')) {
                        console.log(`[${progress}] –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ detached frame, –¥–µ–ª–∞–µ–º –ø–∞—É–∑—É 5 —Å–µ–∫—É–Ω–¥...`);
                        await this.delay(5000);
                    }
                    
                    // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
                    if (error.message.includes('Connection terminated') || error.message.includes('connection')) {
                        console.log(`[${progress}] –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î, –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è...`);
                        try {
                            await this.dbClient.end();
                            await this.dbClient.connect();
                            console.log(`[${progress}] –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ`);
                        } catch (reconnectError) {
                            console.error(`[${progress}] –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:`, reconnectError.message);
                        }
                    }
                    
                    // –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º continue - –æ—Å—Ç–∞–µ–º—Å—è –Ω–∞ —Ç–æ–π –∂–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
                    // –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫, —á—Ç–æ–±—ã –æ—Å—Ç–∞—Ç—å—Å—è –Ω–∞ —Ç–æ–º –∂–µ –ª–æ—Ç–µ
                    i--;
                    console.log(`[${progress}] üîÑ –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞. –ü—Ä–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–∞—á–Ω–µ—Ç—Å—è —Å –ª–æ—Ç–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ${i + 1}.`);
                    break; // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞, —á—Ç–æ–±—ã –ø—Ä–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—á–∞—Ç—å —Å —Ç–æ–≥–æ –∂–µ –ª–æ—Ç–∞
                }
            }

            // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            console.log(`\n–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!`);
            console.log(`–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
            console.log(`   –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${this.processed}`);
            console.log(`   –ü—Ä–æ–ø—É—â–µ–Ω–æ (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö): ${this.skipped}`);
            console.log(`   –û—à–∏–±–æ–∫: ${this.errors}`);
            console.log(`   –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: ${totalLots - startIndex}`);
            console.log(`   –î–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞: ${auctionEndDate}`);

            // –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            await this.clearProgress();

        } catch (error) {
            console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞—É–∫—Ü–∏–æ–Ω–∞:', error.message);
            
            // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å detached frame, –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
            if (error.message.includes('detached') || error.message.includes('Frame')) {
                console.log('üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ detached frame, –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è...');
                try {
                    await this.recreatePage();
                    console.log('‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
                } catch (recreateError) {
                    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è:', recreateError.message);
                }
            }
            
            // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
            if (error.message.includes('Connection terminated') || error.message.includes('connection')) {
                console.log('üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î, –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è...');
                try {
                    await this.dbClient.end();
                    await this.dbClient.connect();
                    console.log('‚úÖ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ');
                } catch (reconnectError) {
                    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î:', reconnectError.message);
                }
            }
            
            throw error;
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
    async saveProgress(auctionUrl, currentIndex, totalLots, lastProcessedUrl = null, lotUrls = null) {
        try {
            const progress = {
                auctionUrl,
                currentIndex,
                totalLots,
                lastProcessedUrl,
                timestamp: new Date().toISOString(),
                processed: this.processed,
                errors: this.errors,
                skipped: this.skipped,
                lotUrls: lotUrls // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ –ª–æ—Ç—ã
            };
            
            fs.writeFileSync(this.progressFile, JSON.stringify(progress, null, 2));
            console.log(`üíæ –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${currentIndex}/${totalLots}`);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error.message);
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
    async loadProgress() {
        try {
            if (fs.existsSync(this.progressFile)) {
                const progressData = fs.readFileSync(this.progressFile, 'utf8');
                const progress = JSON.parse(progressData);
                console.log(`üìÇ –ù–∞–π–¥–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å: ${progress.currentIndex}/${progress.totalLots}`);
                console.log(`   –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π URL: ${progress.lastProcessedUrl}`);
                console.log(`   –í—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${progress.timestamp}`);
                console.log(`   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${progress.processed}, –æ—à–∏–±–æ–∫ ${progress.errors}, –ø—Ä–æ–ø—É—â–µ–Ω–æ ${progress.skipped}`);
                console.log(`   üîÑ –ü–∞—Ä—Å–∏–Ω–≥ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—Å—è —Å –ø–æ–∑–∏—Ü–∏–∏ ${progress.currentIndex + 1} (–ª–æ—Ç ${progress.currentIndex + 1} –∏–∑ ${progress.totalLots})`);
                return progress;
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error.message);
        }
        return null;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    async clearProgress() {
        try {
            if (fs.existsSync(this.progressFile)) {
                fs.unlinkSync(this.progressFile);
                console.log('üóëÔ∏è –§–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error.message);
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω–¥–µ–∫—Å–∞ –ª–æ—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É
    async findLotIndexByNumber(lotUrls, targetLotNumber) {
        console.log(`üîç –ò—â–µ–º –ª–æ—Ç —Å –Ω–æ–º–µ—Ä–æ–º ${targetLotNumber}...`);
        
        // –ò—â–µ–º –Ω–æ–º–µ—Ä –ª–æ—Ç–∞ –≤ URL (–Ω–∞–º–Ω–æ–≥–æ –±—ã—Å—Ç—Ä–µ–µ!)
        for (let i = 0; i < lotUrls.length; i++) {
            const url = lotUrls[i];
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –ª–æ—Ç–∞ –∏–∑ URL: /auction/2125/7521789 -> 7521789
            const urlMatch = url.match(/\/auction\/\d+\/(\d+)/);
            if (urlMatch && urlMatch[1] === targetLotNumber) {
                console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –ª–æ—Ç ${targetLotNumber} –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ${i + 1} (–∏–∑ URL)`);
                return i;
            }
        }
        
        console.log(`‚ùå –õ–æ—Ç —Å –Ω–æ–º–µ—Ä–æ–º ${targetLotNumber} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ —Å—Å—ã–ª–æ–∫`);
        return -1;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω–¥–µ–∫—Å–∞ –ø–æ URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    async findLotIndexByPage(lotUrls, targetPage) {
        console.log(`üîç –ò—â–µ–º –ª–æ—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${targetPage}...`);
        
        const pageUrl = targetPage === 1 ? 
            'https://www.wolmar.ru/auction/2122' : 
            `https://www.wolmar.ru/auction/2122?page=${targetPage}`;
        
        try {
            await this.ensurePageActive();
            await this.page.goto(pageUrl, { waitUntil: 'domcontentloaded', timeout: 30000 });
            await this.delay(2000);

            // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –ª–æ—Ç—ã —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            const pageUrls = await this.page.evaluate(() => {
                const urls = [];
                const lotLinks = document.querySelectorAll('a.title.lot[href*="/auction/"]');
                lotLinks.forEach(link => {
                    if (link.href && link.href.includes('/auction/')) {
                        urls.push(link.href);
                    }
                });
                return urls;
            });

            // –ò—â–µ–º –ø–µ—Ä–≤—É—é —Å—Å—ã–ª–∫—É —Å —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ
            for (let i = 0; i < lotUrls.length; i++) {
                if (pageUrls.includes(lotUrls[i])) {
                    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø–µ—Ä–≤–∞—è —Å—Å—ã–ª–∫–∞ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${targetPage} –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ${i + 1}`);
                    return i;
                }
            }

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${targetPage}:`, error.message);
        }
        
        console.log(`‚ùå –°—Å—ã–ª–∫–∏ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${targetPage} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ`);
        return -1;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
    async resumeParsing(auctionUrl, options = {}) {
        const {
            startFromIndex = null,      // –ù–∞—á–∞—Ç—å —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
            startFromLotNumber = null,  // –ù–∞—á–∞—Ç—å —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –ª–æ—Ç–∞
            startFromPage = null,       // –ù–∞—á–∞—Ç—å —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            resumeFromProgress = true,  // –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            useSavedUrls = true,        // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏
            maxLots = null,             
            skipExisting = true,        
            delayBetweenLots = 800,     
            batchSize = 50,             
            testMode = false            
        } = options;

        console.log('üîÑ –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∞—É–∫—Ü–∏–æ–Ω–∞...');
        console.log(`–ù–∞—Å—Ç—Ä–æ–π–∫–∏: startFromIndex=${startFromIndex}, startFromLotNumber=${startFromLotNumber}, startFromPage=${startFromPage}, resumeFromProgress=${resumeFromProgress}, useSavedUrls=${useSavedUrls}`);

        let startIndex = 0;
        let progress = null;
        let lotUrls = null;

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if (resumeFromProgress || useSavedUrls) {
            progress = await this.loadProgress();
            if (progress && progress.auctionUrl === auctionUrl) {
                if (resumeFromProgress) {
                    startIndex = progress.currentIndex;
                    this.processed = progress.processed;
                    this.errors = progress.errors;
                    this.skipped = progress.skipped;
                    console.log(`üìÇ –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏: ${startIndex}`);
                }
            }
        }
        
        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Å—ã–ª–æ–∫: –ë–î > —Ñ–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ > —Å–±–æ—Ä –∑–∞–Ω–æ–≤–æ
        if (useSavedUrls) {
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Å—ã–ª–æ–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
            const urlsExist = await this.urlsExistInDatabase(this.auctionNumber);
            
            if (urlsExist) {
                console.log('üìã –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Å—ã–ª–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
                lotUrls = await this.loadLotUrlsFromDatabase(this.auctionNumber);
                if (lotUrls && lotUrls.length > 0) {
                    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${lotUrls.length} —Å—Å—ã–ª–æ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö`);
                } else {
                    console.log('‚ö†Ô∏è –°—Å—ã–ª–∫–∏ –≤ –ë–î –Ω–∞–π–¥–µ–Ω—ã, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å');
                }
            } else {
                console.log('üìã –°—Å—ã–ª–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                if (progress && progress.lotUrls) {
                    // –ï—Å–ª–∏ –≤ –ë–î –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑ —Ñ–∞–π–ª–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                    lotUrls = progress.lotUrls;
                    console.log(`üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞: ${lotUrls.length} —Å—Å—ã–ª–æ–∫`);
                }
            }
        }

        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: startFromLotNumber > startFromPage > startFromIndex > —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
        if (startFromLotNumber) {
            console.log(`üéØ –ù–∞—á–∏–Ω–∞–µ–º —Å –Ω–æ–º–µ—Ä–∞ –ª–æ—Ç–∞: ${startFromLotNumber}`);
            if (!lotUrls) {
                // –î–ª—è –ø–æ–∏—Å–∫–∞ –ª–æ—Ç–∞ –≤—Å–µ–≥–¥–∞ —Å–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫
                console.log('üîç –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª–æ—Ç–∞...');
                lotUrls = await this.getAllLotUrls(auctionUrl, false); // false = –ø–æ–ª–Ω—ã–π —Ä–µ–∂–∏–º
            }
            const foundIndex = await this.findLotIndexByNumber(lotUrls, startFromLotNumber);
            if (foundIndex >= 0) {
                startIndex = foundIndex;
            } else {
                console.log(`‚ö†Ô∏è –õ–æ—Ç ${startFromLotNumber} –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Å –Ω–∞—á–∞–ª–∞`);
                startIndex = 0;
            }
        } else if (startFromPage) {
            console.log(`üìÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${startFromPage}`);
            if (!lotUrls) {
                // –î–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—Å–µ–≥–¥–∞ —Å–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫
                console.log('üîç –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
                lotUrls = await this.getAllLotUrls(auctionUrl, false); // false = –ø–æ–ª–Ω—ã–π —Ä–µ–∂–∏–º
            }
            const foundIndex = await this.findLotIndexByPage(lotUrls, startFromPage);
            if (foundIndex >= 0) {
                startIndex = foundIndex;
            } else {
                console.log(`‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${startFromPage} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –Ω–∞—á–∏–Ω–∞–µ–º —Å –Ω–∞—á–∞–ª–∞`);
                startIndex = 0;
            }
        } else if (startFromIndex !== null) {
            startIndex = startFromIndex;
            console.log(`üìç –ù–∞—á–∏–Ω–∞–µ–º —Å –∏–Ω–¥–µ–∫—Å–∞: ${startIndex}`);
        }

        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
        await this.parseEntireAuction(auctionUrl, {
            ...options,
            startIndex,
            resumeFromProgress: false, // –ù–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–≤—Ç–æ—Ä–Ω–æ
            savedLotUrls: lotUrls // –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏
        });
    }

    async close() {
        try {
            if (this.page && !this.page.isClosed()) {
                await this.page.close();
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', error.message);
        }
        
        try {
            if (this.browser) {
                await this.browser.close();
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞:', error.message);
        }
        
        try {
            if (this.dbClient) {
                await this.dbClient.end();
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î:', error.message);
        }
    }
}

// Wolmar Auction Parser v4.0
// –û—Å–Ω–æ–≤–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:
// - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ –ª–æ—Ç—ã –≤ PostgreSQL
// - –ë—ã—Å—Ç—Ä–æ–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
// - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Å—ã–ª–æ–∫: –ë–î > —Ñ–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ > —Å–±–æ—Ä –∑–∞–Ω–æ–≤–æ
async function main(auctionNumber) {
    const dbConfig = {
        user: 'postgres.xkwgspqwebfeteoblayu',        
        host: 'aws-0-eu-north-1.pooler.supabase.com',
        database: 'postgres',   
        password: 'Gopapopa326+',    
        port: 6543,
        ssl: {
            rejectUnauthorized: false
        }
    };

    const parser = new WolmarAuctionParser(dbConfig, auctionNumber);
    
    try {
        await parser.init();
        
        // –ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞
        const auctionUrl = `https://www.wolmar.ru/auction/${auctionNumber}`;
        await parser.parseEntireAuction(auctionUrl, {
            maxLots: null,           // –ü–∞—Ä—Å–∏—Ç—å –≤—Å–µ –ª–æ—Ç—ã
            skipExisting: true,      // –ü—Ä–æ–ø—É—Å–∫–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ª–æ—Ç—ã
            delayBetweenLots: 800,   // –£–º–µ–Ω—å—à–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –±–ª–∞–≥–æ–¥–∞—Ä—è —É–ø—Ä–æ—â–µ–Ω–∏—é
            batchSize: 50,           
            testMode: false          // –ü–æ–ª–Ω—ã–π —Ä–µ–∂–∏–º
        });
        
    } catch (error) {
        console.error('–û–±—â–∞—è –æ—à–∏–±–∫–∞:', error.message);
        
        // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å detached frame, –≤—ã–≤–æ–¥–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if (error.message.includes('detached') || error.message.includes('Frame')) {
            console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–µ—Ä –∏–ª–∏ —É–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö –ª–æ—Ç–æ–≤');
        }
    } finally {
        try {
            await parser.close();
        } catch (closeError) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞:', closeError.message);
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
async function resumeFromProgress(auctionNumber) {
    const dbConfig = {
        user: 'postgres.xkwgspqwebfeteoblayu',        
        host: 'aws-0-eu-north-1.pooler.supabase.com',
        database: 'postgres',   
        password: 'Gopapopa326+',    
        port: 6543,
        ssl: {
            rejectUnauthorized: false
        }
    };

    const parser = new WolmarAuctionParser(dbConfig, auctionNumber);
    
    try {
        await parser.init();
        
        // –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        const auctionUrl = `https://www.wolmar.ru/auction/${auctionNumber}`;
        await parser.resumeParsing(auctionUrl, {
            resumeFromProgress: true,  // –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            skipExisting: true,        // –ü—Ä–æ–ø—É—Å–∫–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ª–æ—Ç—ã
            delayBetweenLots: 800,     
            batchSize: 50,             
            testMode: false            
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error.message);
    } finally {
        try {
            await parser.close();
        } catch (closeError) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞:', closeError.message);
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –ª–æ—Ç–∞
async function startFromLotNumber(auctionNumber, lotNumber) {
    const dbConfig = {
        user: 'postgres.xkwgspqwebfeteoblayu',        
        host: 'aws-0-eu-north-1.pooler.supabase.com',
        database: 'postgres',   
        password: 'Gopapopa326+',    
        port: 6543,
        ssl: {
            rejectUnauthorized: false
        }
    };

    const parser = new WolmarAuctionParser(dbConfig, auctionNumber);
    
    try {
        await parser.init();
        
        // –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –ª–æ—Ç–∞
        const auctionUrl = `https://www.wolmar.ru/auction/${auctionNumber}`;
        await parser.resumeParsing(auctionUrl, {
            startFromLotNumber: lotNumber,  // –ù–∞—á–∞—Ç—å —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –ª–æ—Ç–∞
            resumeFromProgress: false,      // –ù–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª—è—Ç—å —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
            useSavedUrls: true,             // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏
            skipExisting: true,             // –ü—Ä–æ–ø—É—Å–∫–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ª–æ—Ç—ã
            delayBetweenLots: 800,          
            batchSize: 50,                  
            testMode: false                 
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å –Ω–æ–º–µ—Ä–∞ –ª–æ—Ç–∞:', error.message);
    } finally {
        try {
            await parser.close();
        } catch (closeError) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞:', closeError.message);
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
async function startFromPage(auctionNumber, pageNumber) {
    const dbConfig = {
        user: 'postgres.xkwgspqwebfeteoblayu',        
        host: 'aws-0-eu-north-1.pooler.supabase.com',
        database: 'postgres',   
        password: 'Gopapopa326+',    
        port: 6543,
        ssl: {
            rejectUnauthorized: false
        }
    };

    const parser = new WolmarAuctionParser(dbConfig, auctionNumber);
    
    try {
        await parser.init();
        
        // –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const auctionUrl = `https://www.wolmar.ru/auction/${auctionNumber}`;
        await parser.resumeParsing(auctionUrl, {
            startFromPage: pageNumber,      // –ù–∞—á–∞—Ç—å —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            resumeFromProgress: false,      // –ù–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª—è—Ç—å —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
            useSavedUrls: true,             // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏
            skipExisting: true,             // –ü—Ä–æ–ø—É—Å–∫–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ª–æ—Ç—ã
            delayBetweenLots: 800,          
            batchSize: 50,                  
            testMode: false                 
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', error.message);
    } finally {
        try {
            await parser.close();
        } catch (closeError) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞:', closeError.message);
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
async function startFromIndex(auctionNumber, index) {
    const dbConfig = {
        user: 'postgres.xkwgspqwebfeteoblayu',        
        host: 'aws-0-eu-north-1.pooler.supabase.com',
        database: 'postgres',   
        password: 'Gopapopa326+',    
        port: 6543,
        ssl: {
            rejectUnauthorized: false
        }
    };

    const parser = new WolmarAuctionParser(dbConfig, auctionNumber);
    
    try {
        await parser.init();
        
        // –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
        const auctionUrl = `https://www.wolmar.ru/auction/${auctionNumber}`;
        await parser.resumeParsing(auctionUrl, {
            startFromIndex: index,          // –ù–∞—á–∞—Ç—å —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
            resumeFromProgress: false,      // –ù–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª—è—Ç—å —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
            useSavedUrls: true,             // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏
            skipExisting: true,             // –ü—Ä–æ–ø—É—Å–∫–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ª–æ—Ç—ã
            delayBetweenLots: 800,          
            batchSize: 50,                  
            testMode: false                 
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å –∏–Ω–¥–µ–∫—Å–∞:', error.message);
    } finally {
        try {
            await parser.close();
        } catch (closeError) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞:', closeError.message);
        }
    }
}

// –ü–æ–ª–Ω—ã–π —Å–±–æ—Ä —Å—Å—ã–ª–æ–∫ –Ω–∞ –ª–æ—Ç—ã (–±–µ–∑ –ø–∞—Ä—Å–∏–Ω–≥–∞)
async function collectUrls(auctionNumber) {
    const dbConfig = {
        user: 'postgres.xkwgspqwebfeteoblayu',        
        host: 'aws-0-eu-north-1.pooler.supabase.com',
        database: 'postgres',   
        password: 'Gopapopa326+',    
        port: 6543,
        ssl: {
            rejectUnauthorized: false
        }
    };

    const parser = new WolmarAuctionParser(dbConfig, auctionNumber);
    
    try {
        await parser.init();
        
        // –¢–æ–ª—å–∫–æ —Å–±–æ—Ä —Å—Å—ã–ª–æ–∫ –±–µ–∑ –ø–∞—Ä—Å–∏–Ω–≥–∞
        const auctionUrl = `https://www.wolmar.ru/auction/${auctionNumber}`;
        console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–±–æ—Ä —Å—Å—ã–ª–æ–∫ –Ω–∞ –ª–æ—Ç—ã...');
        
        const urls = await parser.getAllLotUrls(auctionUrl, false); // false = –ø–æ–ª–Ω—ã–π —Ä–µ–∂–∏–º
        console.log(`‚úÖ –°–±–æ—Ä —Å—Å—ã–ª–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω! –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${urls.length} —Å—Å—ã–ª–æ–∫ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö`);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ —Å—Å—ã–ª–æ–∫:', error.message);
    } finally {
        try {
            await parser.close();
        } catch (closeError) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞:', closeError.message);
        }
    }
}

// –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –Ω–∞ –Ω–µ–±–æ–ª—å—à–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ª–æ—Ç–æ–≤
async function testRun(auctionNumber) {
    const dbConfig = {
        user: 'postgres.xkwgspqwebfeteoblayu',        
        host: 'aws-0-eu-north-1.pooler.supabase.com',
        database: 'postgres',   
        password: 'Gopapopa326+',    
        port: 6543,
        ssl: {
            rejectUnauthorized: false
        }
    };

    const parser = new WolmarAuctionParser(dbConfig, auctionNumber);
    
    try {
        await parser.init();
        
        // –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –Ω–∞ –ª–æ—Ç–∞—Ö —Ç–æ–ª—å–∫–æ —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const auctionUrl = `https://www.wolmar.ru/auction/${auctionNumber}`;
        await parser.parseEntireAuction(auctionUrl, {
            maxLots: 5,             // –¢–æ–ª—å–∫–æ 5 –ª–æ—Ç–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞
            skipExisting: false,    // –ù–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –¥–ª—è —Ç–µ—Å—Ç–∞
            delayBetweenLots: 1000, // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
            batchSize: 3,           
            testMode: true          // –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Å—ã–ª–æ–∫!
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error.message);
        
        // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å detached frame, –≤—ã–≤–æ–¥–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if (error.message.includes('detached') || error.message.includes('Frame')) {
            console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–µ—Ä –∏–ª–∏ —É–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö –ª–æ—Ç–æ–≤');
        }
    } finally {
        try {
            await parser.close();
        } catch (closeError) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞:', closeError.message);
        }
    }
}

module.exports = WolmarAuctionParser;

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
    (async () => {
        const args = process.argv.slice(2);
        
        if (args.length === 0) {
            console.log('üöÄ Wolmar Auction Parser v4.0');
            console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
            console.log('  main <–Ω–æ–º–µ—Ä_–∞—É–∫—Ü–∏–æ–Ω–∞>              - –ü–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∞—É–∫—Ü–∏–æ–Ω–∞');
            console.log('  collect <–Ω–æ–º–µ—Ä_–∞—É–∫—Ü–∏–æ–Ω–∞>           - –ü–æ–ª–Ω—ã–π —Å–±–æ—Ä —Å—Å—ã–ª–æ–∫ (–±–µ–∑ –ø–∞—Ä—Å–∏–Ω–≥–∞)');
            console.log('  test <–Ω–æ–º–µ—Ä_–∞—É–∫—Ü–∏–æ–Ω–∞>              - –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ (5 –ª–æ—Ç–æ–≤)');
            console.log('  resume <–Ω–æ–º–µ—Ä_–∞—É–∫—Ü–∏–æ–Ω–∞>            - –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞');
            console.log('  lot <–Ω–æ–º–µ—Ä_–∞—É–∫—Ü–∏–æ–Ω–∞> <–Ω–æ–º–µ—Ä_–ª–æ—Ç–∞>  - –ù–∞—á–∞—Ç—å —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –ª–æ—Ç–∞');
            console.log('  page <–Ω–æ–º–µ—Ä_–∞—É–∫—Ü–∏–æ–Ω–∞> <–Ω–æ–º–µ—Ä_—Å—Ç—Ä–∞–Ω–∏—Ü—ã> - –ù–∞—á–∞—Ç—å —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
            console.log('  index <–Ω–æ–º–µ—Ä_–∞—É–∫—Ü–∏–æ–Ω–∞> <–Ω–æ–º–µ—Ä_–∏–Ω–¥–µ–∫—Å–∞> - –ù–∞—á–∞—Ç—å —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞');
            console.log('');
            console.log('–ü—Ä–∏–º–µ—Ä—ã:');
            console.log('  node wolmar-parser4.js main 2122');
            console.log('  node wolmar-parser4.js collect 2122');
            console.log('  node wolmar-parser4.js lot 2122 7512932');
            console.log('  node wolmar-parser4.js index 2122 1000');
            return;
        }

        const command = args[0];
        const auctionNumber = args[1];

        if (!auctionNumber) {
            console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä –∞—É–∫—Ü–∏–æ–Ω–∞');
            return;
        }

        console.log(`üöÄ Wolmar Auction Parser v4.0 - –ê—É–∫—Ü–∏–æ–Ω ${auctionNumber}`);

        try {
            switch (command) {
                case 'main':
                    console.log(`üìç –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞—É–∫—Ü–∏–æ–Ω–∞ ${auctionNumber}...`);
                    await main(auctionNumber);
                    break;
                    
                case 'collect':
                    console.log(`üìç –ü–æ–ª–Ω—ã–π —Å–±–æ—Ä —Å—Å—ã–ª–æ–∫ –∞—É–∫—Ü–∏–æ–Ω–∞ ${auctionNumber}...`);
                    await collectUrls(auctionNumber);
                    break;
                    
                case 'test':
                    console.log(`üìç –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –∞—É–∫—Ü–∏–æ–Ω–∞ ${auctionNumber}...`);
                    await testRun(auctionNumber);
                    break;
                    
                case 'resume':
                    console.log(`üìç –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞—É–∫—Ü–∏–æ–Ω–∞ ${auctionNumber}...`);
                    await resumeFromProgress(auctionNumber);
                    break;
                    
                case 'lot':
                    const lotNumber = args[2];
                    if (!lotNumber) {
                        console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä –ª–æ—Ç–∞');
                        return;
                    }
                    console.log(`üìç –ó–∞–ø—É—Å–∫ —Å –ª–æ—Ç–∞ ${lotNumber} –∞—É–∫—Ü–∏–æ–Ω–∞ ${auctionNumber}...`);
                    await startFromLotNumber(auctionNumber, lotNumber);
                    break;
                    
                case 'page':
                    const pageNumber = args[2];
                    if (!pageNumber) {
                        console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
                        return;
                    }
                    console.log(`üìç –ó–∞–ø—É—Å–∫ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${pageNumber} –∞—É–∫—Ü–∏–æ–Ω–∞ ${auctionNumber}...`);
                    await startFromPage(auctionNumber, pageNumber);
                    break;
                    
                case 'index':
                    const index = args[2];
                    if (!index) {
                        console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω –∏–Ω–¥–µ–∫—Å');
                        return;
                    }
                    console.log(`üìç –ó–∞–ø—É—Å–∫ —Å –∏–Ω–¥–µ–∫—Å–∞ ${index} –∞—É–∫—Ü–∏–æ–Ω–∞ ${auctionNumber}...`);
                    await startFromIndex(auctionNumber, index);
                    break;
                    
                default:
                    console.error(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${command}`);
                    console.log('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: main, test, resume, lot, page, index');
            }
        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
            
            // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å detached frame, –≤—ã–≤–æ–¥–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            if (error.message.includes('detached') || error.message.includes('Frame')) {
                console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–µ—Ä –∏–ª–∏ —É–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö –ª–æ—Ç–æ–≤');
                console.log('üí° –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É: resume');
            }
        }
    })();
}