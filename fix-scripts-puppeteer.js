const fs = require('fs');
const path = require('path');

// –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ scripts, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å
const scriptsFiles = [
    'scripts/test-fetch.js',
    'scripts/fetch-with-session.js',
    'scripts/fetch-with-proxy.js',
    'scripts/fetch-with-chrome.js',
    'scripts/fetch-ultimate.js',
    'scripts/fetch-stealth.js',
    'scripts/fetch-stealth-advanced.js',
    'scripts/fetch-listing.js',
    'scripts/fetch-multiple-attempts.js',
    'scripts/fetch-listing-advanced.js',
    'scripts/fetch-item.js',
    'scripts/fetch-fully-automated.js',
    'scripts/fetch-browser-headless.js',
    'scripts/fetch-browser-extension.js',
    'scripts/fetch-browser-system.js'
];

// –§–ª–∞–≥–∏ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ Chrome
const metricsFlags = [
    '--user-data-dir=/tmp/chrome-temp-' + Math.random().toString(36).substring(7),
    '--disable-metrics',
    '--disable-metrics-reporting',
    '--disable-background-mode',
    '--disable-background-timer-throttling',
    '--disable-renderer-backgrounding',
    '--disable-backgrounding-occluded-windows',
    '--disable-logging',
    '--disable-gpu-logging',
    '--disable-features=TranslateUI,BlinkGenPropertyTrees,VizDisplayCompositor'
];

function fixPuppeteerLaunch(filePath) {
    try {
        console.log(`üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª: ${filePath}`);
        
        if (!fs.existsSync(filePath)) {
            console.log(`‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
            return;
        }
        
        let content = fs.readFileSync(filePath, 'utf8');
        let modified = false;
        
        // –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ puppeteer.launch —Å args
        const launchPattern = /puppeteer\.launch\(\s*\{([^}]+)\}\s*\)/gs;
        
        content = content.replace(launchPattern, (match, config) => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ñ–ª–∞–≥–∏ –º–µ—Ç—Ä–∏–∫
            if (config.includes('--disable-metrics')) {
                console.log(`‚úÖ –§–∞–π–ª —É–∂–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω: ${filePath}`);
                return match;
            }
            
            // –ò—â–µ–º args –º–∞—Å—Å–∏–≤
            const argsPattern = /args:\s*\[([^\]]*)\]/s;
            const argsMatch = config.match(argsPattern);
            
            if (argsMatch) {
                // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥–∏ –º–µ—Ç—Ä–∏–∫ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π args –º–∞—Å—Å–∏–≤
                const existingArgs = argsMatch[1];
                const newArgs = existingArgs.trim() + 
                    (existingArgs.trim().endsWith(',') ? '' : ',') + 
                    '\n      ' + 
                    metricsFlags.map(flag => `'${flag}'`).join(',\n      ');
                
                const newConfig = config.replace(argsPattern, `args: [${newArgs}]`);
                modified = true;
                console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã —Ñ–ª–∞–≥–∏ –º–µ—Ç—Ä–∏–∫ –≤: ${filePath}`);
                return `puppeteer.launch({${newConfig}})`;
            } else {
                // –ï—Å–ª–∏ –Ω–µ—Ç args, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
                const newConfig = config.trim() + 
                    (config.trim().endsWith(',') ? '' : ',') + 
                    '\n    args: [\n      ' + 
                    metricsFlags.map(flag => `'${flag}'`).join(',\n      ') + 
                    '\n    ]';
                modified = true;
                console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω args –º–∞—Å—Å–∏–≤ —Å —Ñ–ª–∞–≥–∞–º–∏ –º–µ—Ç—Ä–∏–∫ –≤: ${filePath}`);
                return `puppeteer.launch({${newConfig}})`;
            }
        });
        
        if (modified) {
            fs.writeFileSync(filePath, content, 'utf8');
            console.log(`üíæ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${filePath}`);
        } else {
            console.log(`‚ÑπÔ∏è  –ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è: ${filePath}`);
        }
        
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ ${filePath}:`, error.message);
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ scripts...\n');
    
    let fixedCount = 0;
    let totalCount = scriptsFiles.length;
    
    scriptsFiles.forEach(filePath => {
        fixPuppeteerLaunch(filePath);
        fixedCount++;
    });
    
    console.log(`\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${fixedCount}/${totalCount}`);
    console.log('üéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
main();
