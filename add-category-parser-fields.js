/**
 * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π –¥–ª—è –ø–∞—Ä—Å–µ—Ä–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
 * 
 * –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—è source_category –∏ parsing_method –≤ —Ç–∞–±–ª–∏—Ü—É auction_lots
 */

const { Client } = require('pg');
const config = require('./config');

async function addCategoryParserFields() {
    const client = new Client(config.dbConfig);
    
    try {
        await client.connect();
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ source_category
        console.log('üîß –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ source_category...');
        await client.query(`
            ALTER TABLE auction_lots 
            ADD COLUMN IF NOT EXISTS source_category VARCHAR(100)
        `);
        console.log('‚úÖ –ü–æ–ª–µ source_category –¥–æ–±–∞–≤–ª–µ–Ω–æ');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ parsing_method
        console.log('üîß –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ parsing_method...');
        await client.query(`
            ALTER TABLE auction_lots 
            ADD COLUMN IF NOT EXISTS parsing_method VARCHAR(50) DEFAULT 'auction_parser'
        `);
        console.log('‚úÖ –ü–æ–ª–µ parsing_method –¥–æ–±–∞–≤–ª–µ–Ω–æ');
        
        // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è source_category
        console.log('üîß –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è source_category...');
        await client.query(`
            CREATE INDEX IF NOT EXISTS idx_auction_lots_source_category 
            ON auction_lots(source_category)
        `);
        console.log('‚úÖ –ò–Ω–¥–µ–∫—Å –¥–ª—è source_category —Å–æ–∑–¥–∞–Ω');
        
        // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è parsing_method
        console.log('üîß –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è parsing_method...');
        await client.query(`
            CREATE INDEX IF NOT EXISTS idx_auction_lots_parsing_method 
            ON auction_lots(parsing_method)
        `);
        console.log('‚úÖ –ò–Ω–¥–µ–∫—Å –¥–ª—è parsing_method —Å–æ–∑–¥–∞–Ω');
        
        console.log('\nüéâ –í—Å–µ –ø–æ–ª—è –¥–ª—è –ø–∞—Ä—Å–µ—Ä–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
        throw error;
    } finally {
        await client.end();
    }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    addCategoryParserFields()
        .then(() => {
            console.log('‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
            process.exit(0);
        })
        .catch((error) => {
            console.error('‚ùå –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π:', error.message);
            process.exit(1);
        });
}

module.exports = { addCategoryParserFields };

