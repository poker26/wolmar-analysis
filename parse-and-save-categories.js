const { Pool } = require('pg');
const puppeteer = require('puppeteer');
const config = require('./config');

const pool = new Pool(config.dbConfig);

async function parseAndSaveCategories() {
    let browser = null;
    
    try {
        console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...');
        browser = await puppeteer.launch({
            headless: true,
            args: ['--no-sandbox', '--disable-setuid-sandbox']
        });
        
        const page = await browser.newPage();
        await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36');
        
        console.log('üîç –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É Wolmar...');
        await page.goto('https://wolmar.ru', { waitUntil: 'networkidle2', timeout: 30000 });
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        console.log('üìã –ò—â–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ...');
        const categories = await page.evaluate(() => {
            const foundCategories = [];
            
            // –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–º –±–ª–æ–∫–µ
            const allLinks = document.querySelectorAll('a[href*="/auction/"]');
            allLinks.forEach(link => {
                const url = link.href;
                const name = link.textContent.trim();
                
                // –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∞—É–∫—Ü–∏–æ–Ω–∞
                if (name && url && 
                    url.includes('/auction/') &&
                    !url.includes('?category=') &&
                    !url.includes('/lot/') &&
                    name.length > 3 &&
                    name.length < 100 &&
                    !name.includes('–∞—É–∫—Ü–∏–æ–Ω') &&
                    !name.includes('VIP') &&
                    !name.includes('‚Ññ') &&
                    !name.includes('–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')) {
                    
                    // –ò–∑–≤–ª–µ–∫–∞–µ–º slug –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ URL
                    const urlParts = url.split('/');
                    if (urlParts.length > 3) {
                        const auctionNumber = urlParts[urlParts.length - 2];
                        const categorySlug = urlParts[urlParts.length - 1];
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –Ω–æ–º–µ—Ä –∞—É–∫—Ü–∏–æ–Ω–∞
                        if (categorySlug && !categorySlug.match(/^\d+$/)) {
                            foundCategories.push({
                                name: name,
                                url_slug: categorySlug,
                                url_template: `https://wolmar.ru/auction/{AUCTION_NUMBER}/${categorySlug}`
                            });
                        }
                    }
                }
            });
            
            return foundCategories;
        });
        
        // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ url_slug
        const uniqueCategories = categories.filter((category, index, self) => 
            index === self.findIndex(c => c.url_slug === category.url_slug)
        );
        
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${uniqueCategories.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
        
        // –í—ã–≤–æ–¥–∏–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        uniqueCategories.forEach((cat, index) => {
            console.log(`  ${index + 1}. ${cat.name} -> ${cat.url_slug}`);
        });
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        console.log('\nüíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
        
        for (const category of uniqueCategories) {
            try {
                const insertQuery = `
                    INSERT INTO wolmar_categories (name, url_slug, url_template)
                    VALUES ($1, $2, $3)
                    ON CONFLICT (url_slug) 
                    DO UPDATE SET 
                        name = EXCLUDED.name,
                        url_template = EXCLUDED.url_template,
                        updated_at = CURRENT_TIMESTAMP
                `;
                
                await pool.query(insertQuery, [category.name, category.url_slug, category.url_template]);
                console.log(`  ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ${category.name}`);
                
            } catch (error) {
                console.error(`  ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ${category.name}:`, error.message);
            }
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const countResult = await pool.query('SELECT COUNT(*) as count FROM wolmar_categories');
        console.log(`\nüìä –í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –±–∞–∑–µ: ${countResult.rows[0].count}`);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
    } finally {
        if (browser) {
            await browser.close();
        }
        await pool.end();
    }
}

parseAndSaveCategories();
