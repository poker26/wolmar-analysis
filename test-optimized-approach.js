const { Client } = require('pg');
const puppeteer = require('puppeteer-core');
const fs = require('fs');

const dbConfig = {
    user: 'postgres.xkwgspqwebfeteoblayu',        
    host: 'aws-0-eu-north-1.pooler.supabase.com',
    database: 'postgres',   
    password: 'Gopapopa326+',    
    port: 6543,
    ssl: {
        rejectUnauthorized: false
    }
};

class TestOptimizedApproach {
    constructor() {
        this.dbClient = new Client(dbConfig);
        this.browser = null;
        this.page = null;
        this.results = {
            auctions: [],
            totalUpdated: 0,
            totalSkipped: 0,
            totalErrors: 0,
            totalProcessed: 0
        };
    }

    async init() {
        await this.dbClient.connect();
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');
        
        this.browser = await puppeteer.launch({
            headless: false, // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            executablePath: 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe',
            args: ['--no-sandbox', '--disable-setuid-sandbox', '--disable-dev-shm-usage',
            '--user-data-dir=/tmp/chrome-temp-9g8ln',
            '--disable-metrics',
            '--disable-metrics-reporting',
            '--disable-background-mode',
            '--disable-background-timer-throttling',
            '--disable-renderer-backgrounding',
            '--disable-backgrounding-occluded-windows',
            '--disable-logging',
            '--disable-gpu-logging',
            '--disable-features=TranslateUI,BlinkGenPropertyTrees,VizDisplayCompositor']
        });
        
        this.page = await this.browser.newPage();
        await this.page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36');
        this.page.setDefaultTimeout(30000);
        this.page.setDefaultNavigationTimeout(30000);
        
        console.log('‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –≥—Ä–∞–¥–∞—Ü–∏–µ–π
    extractConditionWithGrade(conditionText) {
        if (!conditionText) return null;
        return conditionText.replace(/\s+/g, '');
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 3)
    async getTestAuctions() {
        console.log('üìä –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∞—É–∫—Ü–∏–æ–Ω—ã...');
        
        const query = `
            SELECT DISTINCT auction_number 
            FROM auction_lots 
            WHERE source_url IS NOT NULL
            ORDER BY auction_number DESC
            LIMIT 3;
        `;
        
        const result = await this.dbClient.query(query);
        console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${result.rows.length} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤: ${result.rows.map(r => r.auction_number).join(', ')}`);
        
        return result.rows.map(row => row.auction_number);
    }

    // –ü–∞—Ä—Å–∏–Ω–≥ –æ–±—â–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –∞—É–∫—Ü–∏–æ–Ω–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
    async parseAuctionPageForConditions(auctionNumber) {
        try {
            const auctionUrl = `https://www.wolmar.ru/auction/${auctionNumber}`;
            console.log(`\nüîç –ü–∞—Ä—Å–∏–º –æ–±—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞—É–∫—Ü–∏–æ–Ω–∞ ${auctionNumber}...`);
            
            await this.page.goto(auctionUrl, { waitUntil: 'networkidle2', timeout: 30000 });
            await new Promise(resolve => setTimeout(resolve, 3000));
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ª–æ—Ç–∞—Ö –∏ –∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö —Å –æ–±—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            const lotsData = await this.page.evaluate(() => {
                const lots = [];
                
                // –ò—â–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ª–æ—Ç—ã
                const lotLinks = document.querySelectorAll('a[href*="/auction/"]');
                console.log(`–ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫ –Ω–∞ –ª–æ—Ç—ã: ${lotLinks.length}`);
                
                lotLinks.forEach((link, index) => {
                    try {
                        const lot = {};
                        
                        if (link.href && link.href.includes('/auction/')) {
                            lot.url = link.href;
                            
                            // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –ª–æ—Ç–∞ –∏–∑ —Å—Å—ã–ª–∫–∏
                            const urlMatch = link.href.match(/\/auction\/\d+\/(\d+)/);
                            if (urlMatch) {
                                lot.lotNumber = urlMatch[1];
                                
                                // –ò—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ –∏–ª–∏ —Ä—è–¥–æ–º
                                let condition = null;
                                
                                // –ú–µ—Ç–æ–¥ 1: –ò—â–µ–º –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π —Å—Ç—Ä–æ–∫–µ —Ç–∞–±–ª–∏—Ü—ã
                                const parentRow = link.closest('tr');
                                if (parentRow) {
                                    const cells = parentRow.querySelectorAll('td');
                                    cells.forEach(cell => {
                                        const cellText = cell.textContent.trim();
                                        if (cellText.match(/^(MS|AU|XF|VF|UNC|PL)[\s\d\-\+\/]*$/i)) {
                                            condition = cellText;
                                        }
                                    });
                                }
                                
                                // –ú–µ—Ç–æ–¥ 2: –ò—â–µ–º –≤ —Ç–µ–∫—Å—Ç–µ –≤–æ–∫—Ä—É–≥ —Å—Å—ã–ª–∫–∏
                                if (!condition) {
                                    const context = link.parentElement ? link.parentElement.textContent : '';
                                    const conditionMatch = context.match(/(MS|AU|XF|VF|UNC|PL)[\s\d\-\+\/]*/i);
                                    if (conditionMatch) {
                                        condition = conditionMatch[0].trim();
                                    }
                                }
                                
                                // –ú–µ—Ç–æ–¥ 3: –ò—â–µ–º –≤ —Å–æ—Å–µ–¥–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
                                if (!condition) {
                                    const siblings = link.parentElement ? link.parentElement.parentElement.children : [];
                                    for (let sibling of siblings) {
                                        const siblingText = sibling.textContent.trim();
                                        if (siblingText.match(/^(MS|AU|XF|VF|UNC|PL)[\s\d\-\+\/]*$/i)) {
                                            condition = siblingText;
                                            break;
                                        }
                                    }
                                }
                                
                                if (condition) {
                                    lot.condition = condition;
                                    lots.push(lot);
                                }
                            }
                        }
                    } catch (error) {
                        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å—Å—ã–ª–∫–∏ ${index}:`, error);
                    }
                });
                
                return lots;
            });
            
            console.log(`‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ ${lotsData.length} –ª–æ—Ç–æ–≤ —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ —Å –æ–±—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã`);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
            if (lotsData.length > 0) {
                console.log(`üìã –ü—Ä–∏–º–µ—Ä—ã –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π:`);
                lotsData.slice(0, 5).forEach((lot, index) => {
                    console.log(`  ${index + 1}. –õ–æ—Ç ${lot.lotNumber}: ${lot.condition}`);
                });
            }
            
            return lotsData;
            
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∞—É–∫—Ü–∏–æ–Ω–∞ ${auctionNumber}:`, error.message);
            return [];
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ª–æ—Ç–æ–≤ –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å –æ–±—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    async updateLotsFromAuctionPage(auctionNumber, lotsData) {
        console.log(`üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞ ${auctionNumber}...`);
        
        let auctionUpdated = 0;
        let auctionSkipped = 0;
        let auctionErrors = 0;
        
        for (const lotData of lotsData) {
            try {
                // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –±–∞–∑—ã
                const currentQuery = `
                    SELECT id, condition FROM auction_lots 
                    WHERE auction_number = $1 AND lot_number = $2;
                `;
                const currentResult = await this.dbClient.query(currentQuery, [auctionNumber, lotData.lotNumber]);
                
                if (currentResult.rows.length > 0) {
                    const lotId = currentResult.rows[0].id;
                    const currentCondition = currentResult.rows[0].condition;
                    const newCondition = this.extractConditionWithGrade(lotData.condition);
                    
                    if (newCondition !== currentCondition) {
                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                        const updateQuery = `
                            UPDATE auction_lots 
                            SET condition = $1, parsed_at = CURRENT_TIMESTAMP
                            WHERE id = $2;
                        `;
                        await this.dbClient.query(updateQuery, [newCondition, lotId]);
                        
                        console.log(`‚úÖ –õ–æ—Ç ${lotData.lotNumber}: "${currentCondition}" -> "${newCondition}"`);
                        auctionUpdated++;
                        this.results.totalUpdated++;
                    } else {
                        console.log(`‚è≠Ô∏è –õ–æ—Ç ${lotData.lotNumber}: –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ("${currentCondition}")`);
                        auctionSkipped++;
                        this.results.totalSkipped++;
                    }
                } else {
                    console.log(`‚ö†Ô∏è –õ–æ—Ç ${lotData.lotNumber} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
                    auctionErrors++;
                    this.results.totalErrors++;
                }
                
                this.results.totalProcessed++;
                
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ª–æ—Ç–∞ ${lotData.lotNumber}:`, error.message);
                auctionErrors++;
                this.results.totalErrors++;
                this.results.totalProcessed++;
            }
        }
        
        const auctionResult = {
            auctionNumber,
            updated: auctionUpdated,
            skipped: auctionSkipped,
            errors: auctionErrors,
            totalLots: lotsData.length
        };
        
        this.results.auctions.push(auctionResult);
        
        console.log(`üìä –ê—É–∫—Ü–∏–æ–Ω ${auctionNumber}: –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${auctionUpdated}, –ø—Ä–æ–ø—É—â–µ–Ω–æ ${auctionSkipped}, –æ—à–∏–±–æ–∫ ${auctionErrors}`);
        return auctionResult;
    }

    // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    async testOptimizedApproach() {
        try {
            const auctions = await this.getTestAuctions();
            
            if (auctions.length === 0) {
                console.log('‚ùå –ù–µ—Ç –∞—É–∫—Ü–∏–æ–Ω–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
                return;
            }
            
            console.log(`\nüß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ –Ω–∞ ${auctions.length} –∞—É–∫—Ü–∏–æ–Ω–∞—Ö...`);
            console.log('‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:', new Date().toLocaleString());
            
            for (let i = 0; i < auctions.length; i++) {
                const auctionNumber = auctions[i];
                
                console.log(`\nüìã [${i + 1}/${auctions.length}] –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞—É–∫—Ü–∏–æ–Ω ${auctionNumber}...`);
                
                // –ü–∞—Ä—Å–∏–º –æ–±—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞—É–∫—Ü–∏–æ–Ω–∞
                const lotsData = await this.parseAuctionPageForConditions(auctionNumber);
                
                if (lotsData.length > 0) {
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ª–æ—Ç–æ–≤
                    await this.updateLotsFromAuctionPage(auctionNumber, lotsData);
                } else {
                    console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ —Å –æ–±—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞—É–∫—Ü–∏–æ–Ω–∞ ${auctionNumber}`);
                }
                
                // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∞—É–∫—Ü–∏–æ–Ω–∞–º–∏
                await new Promise(resolve => setTimeout(resolve, 2000));
            }
            
            console.log('\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!');
            this.printTestResults();
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
        }
    }

    printTestResults() {
        console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
        console.log('='.repeat(60));
        
        this.results.auctions.forEach(auction => {
            console.log(`\nüìã –ê—É–∫—Ü–∏–æ–Ω ${auction.auctionNumber}:`);
            console.log(`   üìä –í—Å–µ–≥–æ –ª–æ—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: ${auction.totalLots}`);
            console.log(`   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${auction.updated}`);
            console.log(`   ‚è≠Ô∏è –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${auction.skipped}`);
            console.log(`   ‚ùå –û—à–∏–±–æ–∫: ${auction.errors}`);
            
            if (auction.totalLots > 0) {
                const successRate = ((auction.updated + auction.skipped) / auction.totalLots * 100).toFixed(1);
                console.log(`   üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${successRate}%`);
            }
        });
        
        console.log(`\nüìä –û–ë–©–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:`);
        console.log(`   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –ª–æ—Ç–æ–≤: ${this.results.totalUpdated}`);
        console.log(`   ‚è≠Ô∏è –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${this.results.totalSkipped}`);
        console.log(`   ‚ùå –û—à–∏–±–æ–∫: ${this.results.totalErrors}`);
        console.log(`   üìä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${this.results.totalProcessed}`);
        
        if (this.results.totalProcessed > 0) {
            const successRate = ((this.results.totalUpdated + this.results.totalSkipped) / this.results.totalProcessed * 100).toFixed(1);
            console.log(`   üìà –û–±—â–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${successRate}%`);
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
        try {
            const resultsFile = 'test_results.json';
            fs.writeFileSync(resultsFile, JSON.stringify(this.results, null, 2));
            console.log(`\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: ${resultsFile}`);
        } catch (error) {
            console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª');
        }
    }

    async close() {
        try {
            if (this.dbClient) {
                await this.dbClient.end();
                console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
            }
        } catch (error) {
            console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î');
        }
        
        try {
            if (this.browser) {
                await this.browser.close();
                console.log('‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç');
            }
        } catch (error) {
            console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞');
        }
    }
}

async function testOptimizedApproach() {
    const tester = new TestOptimizedApproach();
    
    try {
        await tester.init();
        await tester.testOptimizedApproach();
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    } finally {
        await tester.close();
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', async () => {
    console.log('\n‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...');
    process.exit(0);
});

testOptimizedApproach();
