const { Pool } = require('pg');
const config = require('./config');

const pool = new Pool(config.dbConfig);

async function testSqlQuery() {
    try {
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º SQL –∑–∞–ø—Ä–æ—Å –∏–∑ recalculateLotPredictions
        const lotIds = [90224, 63217, 63219]; // –ü—Ä–∏–º–µ—Ä—ã ID –ª–æ—Ç–æ–≤ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        
        console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ª–æ—Ç–æ–≤:', lotIds);
        
        const lotsResult = await pool.query(`
            SELECT 
                al.id,
                al.lot_number,
                al.auction_number,
                al.coin_description,
                al.metal,
                al.condition,
                al.weight,
                al.year,
                al.letters,
                al.winning_bid
            FROM auction_lots al
            WHERE al.id = ANY($1)
            ORDER BY al.id
        `, [lotIds]);
        
        console.log('‚úÖ SQL –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ª–æ—Ç–æ–≤: ${lotsResult.rows.length}`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥–æ–≥–æ –ª–æ—Ç–∞
        lotsResult.rows.forEach((lot, index) => {
            console.log(`\nüìã –õ–æ—Ç ${index + 1}:`);
            console.log(`  - ID: ${lot.id}`);
            console.log(`  - –ù–æ–º–µ—Ä –ª–æ—Ç–∞: ${lot.lot_number}`);
            console.log(`  - –ê—É–∫—Ü–∏–æ–Ω: ${lot.auction_number}`);
            console.log(`  - –ú–µ—Ç–∞–ª–ª: ${lot.metal}`);
            console.log(`  - –°–æ—Å—Ç–æ—è–Ω–∏–µ: ${lot.condition}`);
            console.log(`  - –í–µ—Å: ${lot.weight}`);
            console.log(`  - –ì–æ–¥: ${lot.year}`);
            console.log(`  - –ë—É–∫–≤—ã: ${lot.letters}`);
            console.log(`  - –°—Ç–∞–≤–∫–∞: ${lot.winning_bid}`);
            console.log(`  - –û–ø–∏—Å–∞–Ω–∏–µ: ${lot.coin_description ? lot.coin_description.substring(0, 100) + '...' : '–ù–µ—Ç'}`);
        });
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–¥–∞–ø—Ç–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö
        console.log('\nüîß –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–¥–∞–ø—Ç–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö:');
        
        function adaptLotDataForPrediction(lot) {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–∏–Ω–∞–ª –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –º–æ–Ω–µ—Ç—ã
            let denomination = '–ù–µ —É–∫–∞–∑–∞–Ω';
            if (lot.coin_description) {
                // –ò—â–µ–º –Ω–æ–º–∏–Ω–∞–ª –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "1 —Ä—É–±–ª—å", "50 –∫–æ–ø–µ–µ–∫", "5 —Ä—É–±–ª–µ–π")
                const denominationMatch = lot.coin_description.match(/(\d+(?:[.,]\d+)?)\s*(—Ä—É–±|–∫–æ–ø|–∫–æ–ø–µ–µ–∫?|—Ä—É–±–ª)/i);
                if (denominationMatch) {
                    denomination = `${denominationMatch[1]} ${denominationMatch[2]}`;
                }
            }
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –º–æ–Ω–µ—Ç–Ω—ã–π –¥–≤–æ—Ä –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –∏–ª–∏ letters
            let mint = lot.letters || '–ù–µ —É–∫–∞–∑–∞–Ω';
            if (lot.coin_description) {
                // –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –º–æ–Ω–µ—Ç–Ω—ã—Ö –¥–≤–æ—Ä–æ–≤
                const mintMatch = lot.coin_description.match(/(–°–ü–ë|–°–ü–ú|–ï–ú|–ê–ú|–í–ú|–ö–ú|–¢–ú|–ù–ú–î|–ú–ú–î|–õ–ú–î|–°–ü–ú–î)/i);
                if (mintMatch) {
                    mint = mintMatch[1];
                }
            }
            
            return {
                coin_name: lot.coin_description || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–Ω–µ—Ç–∞',
                denomination: denomination,
                metal: lot.metal,
                condition: lot.condition,
                year: lot.year,
                coin_weight: lot.weight,
                pure_metal_weight: lot.weight,
                mint: mint,
                original_description: lot.coin_description
            };
        }
        
        lotsResult.rows.forEach((lot, index) => {
            const adaptedData = adaptLotDataForPrediction(lot);
            console.log(`\nüìã –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ª–æ—Ç–∞ ${index + 1}:`);
            console.log(`  - –ù–∞–∑–≤–∞–Ω–∏–µ: ${adaptedData.coin_name.substring(0, 50)}...`);
            console.log(`  - –ù–æ–º–∏–Ω–∞–ª: ${adaptedData.denomination}`);
            console.log(`  - –ú–µ—Ç–∞–ª–ª: ${adaptedData.metal}`);
            console.log(`  - –°–æ—Å—Ç–æ—è–Ω–∏–µ: ${adaptedData.condition}`);
            console.log(`  - –ì–æ–¥: ${adaptedData.year}`);
            console.log(`  - –í–µ—Å: ${adaptedData.coin_weight}`);
            console.log(`  - –ú–æ–Ω–µ—Ç–Ω—ã–π –¥–≤–æ—Ä: ${adaptedData.mint}`);
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL –∑–∞–ø—Ä–æ—Å–∞:', error);
    } finally {
        await pool.end();
    }
}

testSqlQuery();
