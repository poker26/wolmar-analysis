const puppeteer = require('puppeteer-core');
const { Client } = require('pg');

const dbConfig = {
    user: 'postgres.xkwgspqwebfeteoblayu',        
    host: 'aws-0-eu-north-1.pooler.supabase.com',
    database: 'postgres',   
    password: 'Gopapopa326+',    
    port: 6543,
    ssl: {
        rejectUnauthorized: false
    }
};

class ParserV5Tester {
    constructor() {
        this.dbClient = new Client(dbConfig);
        this.browser = null;
        this.page = null;
    }

    async init() {
        await this.dbClient.connect();
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');
        
        this.browser = await puppeteer.launch({
            headless: true,
            executablePath: 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe',
            args: ['--no-sandbox', '--disable-setuid-sandbox', '--disable-dev-shm-usage',
            '--user-data-dir=/tmp/chrome-temp-9g8ln',
            '--disable-metrics',
            '--disable-metrics-reporting',
            '--disable-background-mode',
            '--disable-background-timer-throttling',
            '--disable-renderer-backgrounding',
            '--disable-backgrounding-occluded-windows',
            '--disable-logging',
            '--disable-gpu-logging',
            '--disable-features=TranslateUI,BlinkGenPropertyTrees,VizDisplayCompositor']
        });
        
        this.page = await this.browser.newPage();
        await this.page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36');
        this.page.setDefaultTimeout(30000);
        this.page.setDefaultNavigationTimeout(30000);
        
        console.log('‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    // –§—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –≥—Ä–∞–¥–∞—Ü–∏–µ–π (–∏–∑ wolmar-parser5.js)
    extractConditionWithGrade(conditionText) {
        if (!conditionText) return null;
        return conditionText.replace(/\s+/g, '');
    }

    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–±—â–µ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞
    async testAuctionPageParsing() {
        console.log('\nüîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–ê–†–°–ò–ù–ì–ê –û–ë–©–ï–ô –°–¢–†–ê–ù–ò–¶–´ –ê–£–ö–¶–ò–û–ù–ê 2104:');
        console.log('='.repeat(60));
        
        try {
            await this.page.goto('https://www.wolmar.ru/auction/2104', { waitUntil: 'networkidle2', timeout: 30000 });
            await new Promise(resolve => setTimeout(resolve, 2000));
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ª–æ—Ç–∞—Ö —Å –æ–±—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            const auctionData = await this.page.evaluate(() => {
                const lots = [];
                
                // –ò—â–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ª–æ—Ç–æ–≤
                const lotElements = document.querySelectorAll('.lot-item, .auction-lot, [class*="lot"]');
                
                lotElements.forEach((element, index) => {
                    try {
                        const lotData = {};
                        
                        // –ò—â–µ–º –Ω–æ–º–µ—Ä –ª–æ—Ç–∞
                        const lotNumberMatch = element.textContent.match(/–õ–æ—Ç\s*(\d+)/i);
                        if (lotNumberMatch) {
                            lotData.lotNumber = lotNumberMatch[1];
                        }
                        
                        // –ò—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ/—Å–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç—å
                        const conditionMatch = element.textContent.match(/–°–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç—å:\s*([^\n\r]+)/i);
                        if (conditionMatch) {
                            lotData.condition = conditionMatch[1].trim();
                        }
                        
                        // –ò—â–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ª–æ—Ç
                        const linkElement = element.querySelector('a[href*="/auction/2104/"]');
                        if (linkElement) {
                            lotData.url = linkElement.href;
                        }
                        
                        if (lotData.lotNumber && lotData.condition) {
                            lots.push(lotData);
                        }
                    } catch (error) {
                        console.log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —ç–ª–µ–º–µ–Ω—Ç–∞ ${index}:`, error.message);
                    }
                });
                
                return lots;
            });
            
            console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${auctionData.length} –ª–æ—Ç–æ–≤ —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –Ω–∞ –æ–±—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ`);
            
            if (auctionData.length > 0) {
                console.log('\nüìã –ü–†–ò–ú–ï–†–´ –°–û–°–¢–û–Ø–ù–ò–ô –° –û–ë–©–ï–ô –°–¢–†–ê–ù–ò–¶–´:');
                auctionData.slice(0, 10).forEach((lot, index) => {
                    const processedCondition = this.extractConditionWithGrade(lot.condition);
                    console.log(`${index + 1}. –õ–æ—Ç ${lot.lotNumber}: "${lot.condition}" -> "${processedCondition}"`);
                });
            }
            
            return auctionData;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –æ–±—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', error.message);
            return [];
        }
    }

    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ª–æ—Ç–æ–≤
    async testIndividualLotParsing(lotUrls) {
        console.log('\nüîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–ê–†–°–ò–ù–ì–ê –û–¢–î–ï–õ–¨–ù–´–• –õ–û–¢–û–í:');
        console.log('='.repeat(60));
        
        const results = [];
        
        for (let i = 0; i < Math.min(lotUrls.length, 5); i++) {
            const lotUrl = lotUrls[i];
            console.log(`\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ—Ç ${i + 1}: ${lotUrl}`);
            
            try {
                await this.page.goto(lotUrl, { waitUntil: 'networkidle2', timeout: 30000 });
                await new Promise(resolve => setTimeout(resolve, 1500));
                
                // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                const lotData = await this.page.evaluate(() => {
                    const data = {};
                    
                    // –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤ —Ç–µ–∫—Å—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    const pageText = document.body.textContent || '';
                    const conditionMatch = pageText.match(/–°–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç—å:\s*([^\n\r]+)/i);
                    if (conditionMatch) {
                        data.condition = conditionMatch[1].trim();
                    }
                    
                    // –ò—â–µ–º –Ω–æ–º–µ—Ä –ª–æ—Ç–∞
                    const lotNumberMatch = pageText.match(/–õ–æ—Ç\s*(\d+)/i);
                    if (lotNumberMatch) {
                        data.lotNumber = lotNumberMatch[1];
                    }
                    
                    return data;
                });
                
                if (lotData.condition) {
                    const processedCondition = this.extractConditionWithGrade(lotData.condition);
                    console.log(`‚úÖ –õ–æ—Ç ${lotData.lotNumber}: "${lotData.condition}" -> "${processedCondition}"`);
                    
                    results.push({
                        lotNumber: lotData.lotNumber,
                        originalCondition: lotData.condition,
                        processedCondition: processedCondition,
                        url: lotUrl
                    });
                } else {
                    console.log(`‚ö†Ô∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –ª–æ—Ç–∞ ${lotUrl}`);
                }
                
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –ª–æ—Ç–∞ ${lotUrl}:`, error.message);
            }
        }
        
        return results;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    async checkExistingRecords() {
        console.log('\nüîç –ü–†–û–í–ï–†–ö–ê –°–£–©–ï–°–¢–í–£–Æ–©–ò–• –ó–ê–ü–ò–°–ï–ô –í –ë–ê–ó–ï –î–ê–ù–ù–´–•:');
        console.log('='.repeat(60));
        
        try {
            const query = `
                SELECT lot_number, condition, source_url
                FROM auction_lots 
                WHERE auction_number = '2104'
                ORDER BY lot_number
                LIMIT 10;
            `;
            
            const result = await this.dbClient.query(query);
            
            if (result.rows.length > 0) {
                console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${result.rows.length} –∑–∞–ø–∏—Å–µ–π –∞—É–∫—Ü–∏–æ–Ω–∞ 2104 –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:`);
                result.rows.forEach((row, index) => {
                    console.log(`${index + 1}. –õ–æ—Ç ${row.lot_number}: "${row.condition}"`);
                });
            } else {
                console.log('‚ö†Ô∏è –ó–∞–ø–∏—Å–∏ –∞—É–∫—Ü–∏–æ–Ω–∞ 2104 –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
            }
            
            return result.rows;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error.message);
            return [];
        }
    }

    // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    async runTest() {
        try {
            console.log('üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø WOLMAR-PARSER5 –ù–ê –ê–£–ö–¶–ò–û–ù–ï 2104');
            console.log('='.repeat(70));
            
            // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏
            await this.checkExistingRecords();
            
            // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –æ–±—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            const auctionData = await this.testAuctionPageParsing();
            
            // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ª–æ—Ç–æ–≤
            if (auctionData.length > 0) {
                const lotUrls = auctionData.map(lot => lot.url).filter(url => url);
                await this.testIndividualLotParsing(lotUrls);
            }
            
            console.log('\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!');
            
        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
        }
    }

    async close() {
        try {
            if (this.dbClient) {
                await this.dbClient.end();
                console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
            }
        } catch (error) {
            console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î');
        }
        
        try {
            if (this.browser) {
                await this.browser.close();
                console.log('‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç');
            }
        } catch (error) {
            console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞');
        }
    }
}

async function testParserV5() {
    const tester = new ParserV5Tester();
    
    try {
        await tester.init();
        await tester.runTest();
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    } finally {
        await tester.close();
    }
}

testParserV5();
