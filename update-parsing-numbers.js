const { Pool } = require('pg');
const config = require('./config');

const pool = new Pool(config.dbConfig);

// –ú–∞–ø–ø–∏–Ω–≥ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤: auction_number -> parsing_number
const auctionMapping = {
    // –ü—Ä–∏–º–µ—Ä—ã –∏–∑ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    971: 2139,  // –ê—É–∫—Ü–∏–æ–Ω 971 -> URL /auction/2139
    
    // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –º–∞–ø–ø–∏–Ω–≥–∏ –∑–¥–µ—Å—å
    // 943: 2077,  // –µ—Å–ª–∏ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –ø—Ä–∏–º–µ—Ä—ã
};

async function updateParsingNumbers() {
    try {
        console.log('üîß –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞...');
        
        for (const [auctionNumber, parsingNumber] of Object.entries(auctionMapping)) {
            const updateQuery = `
                UPDATE auction_lots 
                SET parsing_number = $1 
                WHERE auction_number = $2;
            `;
            
            const result = await pool.query(updateQuery, [parsingNumber, auctionNumber]);
            console.log(`‚úÖ –ê—É–∫—Ü–∏–æ–Ω ${auctionNumber}: –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${result.rowCount} –ª–æ—Ç–æ–≤ (–ø–∞—Ä—Å–∏–Ω–≥: ${parsingNumber})`);
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const statsQuery = `
            SELECT 
                auction_number,
                parsing_number,
                COUNT(*) as lots_count
            FROM auction_lots 
            WHERE auction_number IS NOT NULL
            GROUP BY auction_number, parsing_number
            ORDER BY auction_number DESC
            LIMIT 10;
        `;
        
        const statsResult = await pool.query(statsQuery);
        console.log('\nüìä –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –∞—É–∫—Ü–∏–æ–Ω–æ–≤:');
        statsResult.rows.forEach(row => {
            const isDifferent = row.auction_number !== row.parsing_number;
            const status = isDifferent ? 'üîÑ' : '‚úÖ';
            console.log(`  ${status} –ê—É–∫—Ü–∏–æ–Ω ${row.auction_number} (–ø–∞—Ä—Å–∏–Ω–≥: ${row.parsing_number}): ${row.lots_count} –ª–æ—Ç–æ–≤`);
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error);
    } finally {
        await pool.end();
    }
}

updateParsingNumbers();
