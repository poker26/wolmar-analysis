const { Client } = require('pg');
const puppeteer = require('puppeteer-core');
const fs = require('fs');

const dbConfig = {
    user: 'postgres.xkwgspqwebfeteoblayu',        
    host: 'aws-0-eu-north-1.pooler.supabase.com',
    database: 'postgres',   
    password: 'Gopapopa326+',    
    port: 6543,
    ssl: {
        rejectUnauthorized: false
    }
};

class OptimizedMassUpdater {
    constructor() {
        this.dbClient = new Client(dbConfig);
        this.browser = null;
        this.page = null;
        this.updated = 0;
        this.errors = 0;
        this.skipped = 0;
        this.processed = 0;
        this.progressFile = 'optimized_update_progress.json';
        this.startTime = Date.now();
    }

    async init() {
        await this.dbClient.connect();
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');
        
        this.browser = await puppeteer.launch({
            headless: true,
            executablePath: 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe',
            args: ['--no-sandbox', '--disable-setuid-sandbox', '--disable-dev-shm-usage',
                            '--user-data-dir=/tmp/chrome-temp-bxyh3',
                            '--disable-metrics',
                            '--disable-metrics-reporting',
                            '--disable-background-mode',
                            '--disable-background-timer-throttling',
                            '--disable-renderer-backgrounding',
                            '--disable-backgrounding-occluded-windows',
                            '--disable-logging',
                            '--disable-gpu-logging',
                            '--disable-features=TranslateUI,BlinkGenPropertyTrees,VizDisplayCompositor']
        });
        
        this.page = await this.browser.newPage();
        await this.page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36');
        this.page.setDefaultTimeout(30000);
        this.page.setDefaultNavigationTimeout(30000);
        
        console.log('‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        this.loadProgress();
    }

    loadProgress() {
        try {
            if (fs.existsSync(this.progressFile)) {
                const progress = JSON.parse(fs.readFileSync(this.progressFile, 'utf8'));
                this.updated = progress.updated || 0;
                this.errors = progress.errors || 0;
                this.skipped = progress.skipped || 0;
                this.processed = progress.processed || 0;
                console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å: –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${this.updated}, –æ—à–∏–±–æ–∫ ${this.errors}, –ø—Ä–æ–ø—É—â–µ–Ω–æ ${this.skipped}`);
            }
        } catch (error) {
            console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å, –Ω–∞—á–∏–Ω–∞–µ–º —Å –Ω—É–ª—è');
        }
    }

    saveProgress() {
        try {
            const progress = {
                updated: this.updated,
                errors: this.errors,
                skipped: this.skipped,
                processed: this.processed,
                timestamp: new Date().toISOString()
            };
            fs.writeFileSync(this.progressFile, JSON.stringify(progress, null, 2));
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error.message);
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –≥—Ä–∞–¥–∞—Ü–∏–µ–π
    extractConditionWithGrade(conditionText) {
        if (!conditionText) return null;
        return conditionText.replace(/\s+/g, '');
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    async getAllAuctions() {
        console.log('üìä –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤...');
        
        const query = `
            SELECT DISTINCT auction_number 
            FROM auction_lots 
            WHERE source_url IS NOT NULL
            ORDER BY auction_number DESC;
        `;
        
        const result = await this.dbClient.query(query);
        console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${result.rows.length} –∞—É–∫—Ü–∏–æ–Ω–æ–≤`);
        
        return result.rows.map(row => row.auction_number);
    }

    // –ü–∞—Ä—Å–∏–Ω–≥ –æ–±—â–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –∞—É–∫—Ü–∏–æ–Ω–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
    async parseAuctionPageForConditions(auctionNumber) {
        try {
            const auctionUrl = `https://www.wolmar.ru/auction/${auctionNumber}`;
            console.log(`üîç –ü–∞—Ä—Å–∏–º –æ–±—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞—É–∫—Ü–∏–æ–Ω–∞ ${auctionNumber}...`);
            
            await this.page.goto(auctionUrl, { waitUntil: 'networkidle2', timeout: 30000 });
            await new Promise(resolve => setTimeout(resolve, 2000));
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ª–æ—Ç–∞—Ö –∏ –∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö —Å –æ–±—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            const lotsData = await this.page.evaluate(() => {
                const lots = [];
                
                // –ò—â–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã —Å –ª–æ—Ç–∞–º–∏
                const lotRows = document.querySelectorAll('tr[data-lot-id], .lot-row, tr:has(.title.lot)');
                
                lotRows.forEach(row => {
                    try {
                        const lot = {};
                        
                        // –ò—â–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ª–æ—Ç
                        const lotLink = row.querySelector('a.title.lot[href*="/auction/"]');
                        if (lotLink && lotLink.href) {
                            lot.url = lotLink.href;
                            
                            // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –ª–æ—Ç–∞ –∏–∑ —Å—Å—ã–ª–∫–∏
                            const urlMatch = lotLink.href.match(/\/auction\/\d+\/(\d+)/);
                            if (urlMatch) {
                                lot.lotNumber = urlMatch[1];
                            }
                            
                            // –ò—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Ç–æ–π –∂–µ —Å—Ç—Ä–æ–∫–µ
                            const conditionCell = row.querySelector('td:contains("MS"), td:contains("AU"), td:contains("XF"), td:contains("VF"), td:contains("UNC")');
                            if (conditionCell) {
                                lot.condition = conditionCell.textContent.trim();
                            } else {
                                // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ - –∏—â–µ–º –≤ —Ç–µ–∫—Å—Ç–µ —Å—Ç—Ä–æ–∫–∏
                                const rowText = row.textContent;
                                const conditionMatch = rowText.match(/(MS|AU|XF|VF|UNC|PL)[\s\d\-\+\/]*/i);
                                if (conditionMatch) {
                                    lot.condition = conditionMatch[0].trim();
                                }
                            }
                            
                            if (lot.url && lot.lotNumber && lot.condition) {
                                lots.push(lot);
                            }
                        }
                    } catch (error) {
                        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å—Ç—Ä–æ–∫–∏ –ª–æ—Ç–∞:', error);
                    }
                });
                
                return lots;
            });
            
            console.log(`‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ ${lotsData.length} –ª–æ—Ç–æ–≤ —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ —Å –æ–±—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã`);
            return lotsData;
            
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∞—É–∫—Ü–∏–æ–Ω–∞ ${auctionNumber}:`, error.message);
            return [];
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ª–æ—Ç–æ–≤ –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å –æ–±—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    async updateLotsFromAuctionPage(auctionNumber, lotsData) {
        console.log(`üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞ ${auctionNumber}...`);
        
        let auctionUpdated = 0;
        let auctionSkipped = 0;
        let auctionErrors = 0;
        
        for (const lotData of lotsData) {
            try {
                // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –±–∞–∑—ã
                const currentQuery = `
                    SELECT id, condition FROM auction_lots 
                    WHERE auction_number = $1 AND lot_number = $2;
                `;
                const currentResult = await this.dbClient.query(currentQuery, [auctionNumber, lotData.lotNumber]);
                
                if (currentResult.rows.length > 0) {
                    const lotId = currentResult.rows[0].id;
                    const currentCondition = currentResult.rows[0].condition;
                    const newCondition = this.extractConditionWithGrade(lotData.condition);
                    
                    if (newCondition !== currentCondition) {
                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                        const updateQuery = `
                            UPDATE auction_lots 
                            SET condition = $1, parsed_at = CURRENT_TIMESTAMP
                            WHERE id = $2;
                        `;
                        await this.dbClient.query(updateQuery, [newCondition, lotId]);
                        
                        console.log(`‚úÖ –õ–æ—Ç ${lotData.lotNumber}: "${currentCondition}" -> "${newCondition}"`);
                        auctionUpdated++;
                        this.updated++;
                    } else {
                        console.log(`‚è≠Ô∏è –õ–æ—Ç ${lotData.lotNumber}: –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ("${currentCondition}")`);
                        auctionSkipped++;
                        this.skipped++;
                    }
                } else {
                    console.log(`‚ö†Ô∏è –õ–æ—Ç ${lotData.lotNumber} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
                    auctionErrors++;
                    this.errors++;
                }
                
                this.processed++;
                
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ª–æ—Ç–∞ ${lotData.lotNumber}:`, error.message);
                auctionErrors++;
                this.errors++;
                this.processed++;
            }
        }
        
        console.log(`üìä –ê—É–∫—Ü–∏–æ–Ω ${auctionNumber}: –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${auctionUpdated}, –ø—Ä–æ–ø—É—â–µ–Ω–æ ${auctionSkipped}, –æ—à–∏–±–æ–∫ ${auctionErrors}`);
        return { updated: auctionUpdated, skipped: auctionSkipped, errors: auctionErrors };
    }

    // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    async massUpdateFromAuctionPages() {
        try {
            const auctions = await this.getAllAuctions();
            
            if (auctions.length === 0) {
                console.log('‚ùå –ù–µ—Ç –∞—É–∫—Ü–∏–æ–Ω–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
                return;
            }
            
            console.log(`\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –º–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è ${auctions.length} –∞—É–∫—Ü–∏–æ–Ω–æ–≤...`);
            console.log('‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:', new Date().toLocaleString());
            
            for (let i = 0; i < auctions.length; i++) {
                const auctionNumber = auctions[i];
                
                console.log(`\nüìã [${i + 1}/${auctions.length}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–∫—Ü–∏–æ–Ω ${auctionNumber}...`);
                
                // –ü–∞—Ä—Å–∏–º –æ–±—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞—É–∫—Ü–∏–æ–Ω–∞
                const lotsData = await this.parseAuctionPageForConditions(auctionNumber);
                
                if (lotsData.length > 0) {
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ª–æ—Ç–æ–≤
                    await this.updateLotsFromAuctionPage(auctionNumber, lotsData);
                } else {
                    console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ —Å –æ–±—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞—É–∫—Ü–∏–æ–Ω–∞ ${auctionNumber}`);
                }
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 5 –∞—É–∫—Ü–∏–æ–Ω–æ–≤
                if ((i + 1) % 5 === 0) {
                    this.saveProgress();
                    this.printStats();
                }
                
                // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∞—É–∫—Ü–∏–æ–Ω–∞–º–∏
                await new Promise(resolve => setTimeout(resolve, 2000));
            }
            
            console.log('\nüéâ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –ú–ê–°–°–û–í–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!');
            this.printFinalStats();
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:', error.message);
        }
    }

    printStats() {
        const elapsed = Math.round((Date.now() - this.startTime) / 1000);
        const rate = this.processed > 0 ? (this.processed / elapsed * 60).toFixed(1) : 0;
        
        console.log(`\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: ${this.processed} –ª–æ—Ç–æ–≤ | –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${this.updated} | –û—à–∏–±–æ–∫: ${this.errors} | –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${this.skipped} | –°–∫–æ—Ä–æ—Å—Ç—å: ${rate} –ª–æ—Ç–æ–≤/–º–∏–Ω`);
    }

    printFinalStats() {
        const elapsed = Math.round((Date.now() - this.startTime) / 1000);
        const hours = Math.floor(elapsed / 3600);
        const minutes = Math.floor((elapsed % 3600) / 60);
        const seconds = elapsed % 60;
        
        console.log('\nüìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
        console.log('='.repeat(50));
        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –ª–æ—Ç–æ–≤: ${this.updated}`);
        console.log(`‚è≠Ô∏è –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${this.skipped}`);
        console.log(`‚ùå –û—à–∏–±–æ–∫: ${this.errors}`);
        console.log(`üìä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${this.processed}`);
        console.log(`‚è∞ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${hours}—á ${minutes}–º ${seconds}—Å`);
        
        if (this.processed > 0) {
            const rate = (this.processed / elapsed * 60).toFixed(1);
            console.log(`üöÄ –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: ${rate} –ª–æ—Ç–æ–≤/–º–∏–Ω`);
        }
        
        // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        try {
            if (fs.existsSync(this.progressFile)) {
                fs.unlinkSync(this.progressFile);
                console.log('üóëÔ∏è –§–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω');
            }
        } catch (error) {
            console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞');
        }
    }

    async close() {
        try {
            if (this.dbClient) {
                await this.dbClient.end();
                console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
            }
        } catch (error) {
            console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î');
        }
        
        try {
            if (this.browser) {
                await this.browser.close();
                console.log('‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç');
            }
        } catch (error) {
            console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞');
        }
    }
}

async function optimizedMassUpdate() {
    const updater = new OptimizedMassUpdater();
    
    try {
        await updater.init();
        await updater.massUpdateFromAuctionPages();
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    } finally {
        await updater.close();
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', async () => {
    console.log('\n‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è. –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å...');
    process.exit(0);
});

process.on('SIGTERM', async () => {
    console.log('\n‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å...');
    process.exit(0);
});

optimizedMassUpdate();
