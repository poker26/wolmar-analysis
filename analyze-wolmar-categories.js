const puppeteer = require('puppeteer');
const { launchPuppeteer, createPage, cleanupChromeTempFiles } = require('./puppeteer-utils');

async function analyzeWolmarCategories() {
    console.log('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ Wolmar...');
    
    const browser = await launchPuppeteer();
    
    try {
        const page = await createPage(browser);
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É Wolmar
        console.log('üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É Wolmar...');
        await page.goto('https://wolmar.ru/', { 
            waitUntil: 'networkidle2',
            timeout: 30000 
        });
        
        // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        await new Promise(resolve => setTimeout(resolve, 3000));
        
        // –ò—â–µ–º –±–ª–æ–∫ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –º–æ–Ω–µ—Ç
        console.log('üîç –ò—â–µ–º –±–ª–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...');
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        const categorySelectors = [
            'a[href*="category"]',
            'a[href*="coins"]',
            '.category',
            '.categories',
            '[class*="category"]',
            'a:contains("–ú–æ–Ω–µ—Ç—ã")',
            'a:contains("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏")'
        ];
        
        let categories = [];
        
        for (const selector of categorySelectors) {
            try {
                const elements = await page.$$(selector);
                console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${elements.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: ${selector}`);
                
                for (const element of elements) {
                    const text = await element.evaluate(el => el.textContent?.trim());
                    const href = await element.evaluate(el => el.href);
                    
                    if (text && href && text.length > 0 && text.length < 100) {
                        categories.push({
                            text: text,
                            href: href,
                            selector: selector
                        });
                    }
                }
            } catch (error) {
                console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º ${selector}:`, error.message);
            }
        }
        
        // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        const uniqueCategories = categories.filter((category, index, self) => 
            index === self.findIndex(c => c.href === category.href)
        );
        
        console.log(`\nüìä –ù–∞–π–¥–µ–Ω–æ ${uniqueCategories.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π:`);
        uniqueCategories.forEach((category, index) => {
            console.log(`${index + 1}. ${category.text}`);
            console.log(`   URL: ${category.href}`);
            console.log(`   –°–µ–ª–µ–∫—Ç–æ—Ä: ${category.selector}`);
            console.log('');
        });
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        const fs = require('fs');
        fs.writeFileSync('wolmar-categories-analysis.json', JSON.stringify(uniqueCategories, null, 2));
        console.log('üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ wolmar-categories-analysis.json');
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –±–ª–æ–∫ "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–æ–Ω–µ—Ç"
        console.log('\nüîç –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –±–ª–æ–∫ "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–æ–Ω–µ—Ç"...');
        
        const categoryBlock = await page.$eval('*', (el) => {
            // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Ç–µ–∫—Å—Ç "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–æ–Ω–µ—Ç"
            const walker = document.createTreeWalker(
                el,
                NodeFilter.SHOW_TEXT,
                null,
                false
            );
            
            let node;
            while (node = walker.nextNode()) {
                if (node.textContent.includes('–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–æ–Ω–µ—Ç')) {
                    return node.parentElement;
                }
            }
            return null;
        });
        
        if (categoryBlock) {
            console.log('‚úÖ –ù–∞–π–¥–µ–Ω –±–ª–æ–∫ "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–æ–Ω–µ—Ç"');
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –≤ —ç—Ç–æ–º –±–ª–æ–∫–µ
            const categoryLinks = await page.evaluate((block) => {
                const links = block.querySelectorAll('a');
                return Array.from(links).map(link => ({
                    text: link.textContent.trim(),
                    href: link.href
                }));
            }, categoryBlock);
            
            console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${categoryLinks.length} —Å—Å—ã–ª–æ–∫ –≤ –±–ª–æ–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:`);
            categoryLinks.forEach((link, index) => {
                console.log(`${index + 1}. ${link.text} -> ${link.href}`);
            });
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            fs.writeFileSync('wolmar-category-links.json', JSON.stringify(categoryLinks, null, 2));
            console.log('üíæ –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ wolmar-category-links.json');
        } else {
            console.log('‚ùå –ë–ª–æ–∫ "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–æ–Ω–µ—Ç" –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
    } finally {
        await cleanupChromeTempFiles();
        await browser.close();
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
analyzeWolmarCategories().catch(console.error);
