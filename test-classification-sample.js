const { Pool } = require('pg');
const LotClassifier = require('./lot-classifier');
const config = require('./config');

async function testClassificationSample() {
    const pool = new Pool(config.dbConfig);
    const classifier = new LotClassifier();
    
    try {
        console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –Ω–∞ –≤—ã–±–æ—Ä–∫–µ –ª–æ—Ç–æ–≤...');
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –≤—ã–±–æ—Ä–∫—É –ª–æ—Ç–æ–≤
        const sampleQuery = `
            SELECT id, coin_description, letters, metal, year, category, lot_type
            FROM auction_lots 
            WHERE coin_description IS NOT NULL 
            AND coin_description != ''
            ORDER BY RANDOM()
            LIMIT 20
        `;
        
        const sampleResult = await pool.query(sampleQuery);
        const lots = sampleResult.rows;
        
        console.log(`üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ ${lots.length} –ª–æ—Ç–∞—Ö:\n`);
        
        let classifiedCount = 0;
        const categoryStats = {};
        
        lots.forEach((lot, index) => {
            console.log(`--- –õ–æ—Ç ${index + 1} (ID: ${lot.id}) ---`);
            console.log(`–û–ø–∏—Å–∞–Ω–∏–µ: ${lot.coin_description}`);
            console.log(`–ë—É–∫–≤—ã: ${lot.letters || '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}`);
            console.log(`–ú–µ—Ç–∞–ª–ª: ${lot.metal || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
            console.log(`–ì–æ–¥: ${lot.year || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
            console.log(`–¢–∏–ø –ª–æ—Ç–∞: ${lot.lot_type || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
            console.log(`–¢–µ–∫—É—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${lot.category || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}`);
            
            // –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ª–æ—Ç
            const classification = classifier.classify(lot);
            const detailed = classifier.classifyDetailed(lot);
            
            console.log(`üéØ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${classification || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'}`);
            console.log(`üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${(detailed.confidence * 100).toFixed(1)}%`);
            console.log(`üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—á–µ—Ç: ${detailed.maxScore.toFixed(2)}`);
            
            if (classification) {
                classifiedCount++;
                categoryStats[classification] = (categoryStats[classification] || 0) + 1;
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª—É—á—à–∏–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                if (detailed.category) {
                    console.log(`üèÜ –õ—É—á—à–∏–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è:`);
                    Object.entries(detailed.fieldAnalysis).forEach(([field, analysis]) => {
                        if (analysis.matches[detailed.category] && analysis.matches[detailed.category].length > 0) {
                            console.log(`  ${field}: ${analysis.matches[detailed.category].join(', ')}`);
                        }
                    });
                }
            }
            
            console.log('');
        });
        
        console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
        console.log(`  –í—Å–µ–≥–æ –ª–æ—Ç–æ–≤: ${lots.length}`);
        console.log(`  –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ: ${classifiedCount}`);
        console.log(`  –ü—Ä–æ—Ü–µ–Ω—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${(classifiedCount / lots.length * 100).toFixed(1)}%`);
        
        if (Object.keys(categoryStats).length > 0) {
            console.log('\nüìã –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:');
            Object.entries(categoryStats)
                .sort(([,a], [,b]) => b - a)
                .forEach(([category, count]) => {
                    console.log(`  ${category}: ${count}`);
                });
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
    } finally {
        await pool.end();
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testClassificationSample().catch(console.error);
