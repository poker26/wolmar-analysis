/**
 * –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞–≤–æ–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–ª—è –∫–∞–∫–∏—Ö –ª–æ—Ç–æ–≤ –µ—Å—Ç—å –∏—Å—Ç–æ—Ä–∏—è —Å—Ç–∞–≤–æ–∫ –∏ —á—Ç–æ –≤ –Ω–µ–π —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è
 */

const { Pool } = require('pg');

const dbConfig = {
    user: 'postgres.xkwgspqwebfeteoblayu',
    host: 'aws-0-eu-north-1.pooler.supabase.com',
    database: 'postgres',
    password: 'Gopapopa326+',
    port: 6543,
    ssl: { rejectUnauthorized: false }
};

async function analyzeBiddingHistoryData() {
    const db = new Pool(dbConfig);
    
    try {
        console.log('üîç –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞–≤–æ–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
        
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞–≤–æ–∫
        console.log('\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü:');
        
        const tablesCheck = await db.query(`
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
            AND table_name IN ('auction_bids', 'user_sessions', 'suspicious_activity')
            ORDER BY table_name
        `);
        
        console.log('   –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:');
        tablesCheck.rows.forEach(row => {
            console.log(`   ‚úÖ ${row.table_name}`);
        });
        
        if (tablesCheck.rows.length === 0) {
            console.log('   ‚ùå –¢–∞–±–ª–∏—Ü—ã –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            return;
        }
        
        // 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É auction_bids
        if (tablesCheck.rows.find(r => r.table_name === 'auction_bids')) {
            console.log('\nüìä –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã auction_bids:');
            
            // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã
            const bidsStructure = await db.query(`
                SELECT column_name, data_type, is_nullable
                FROM information_schema.columns 
                WHERE table_name = 'auction_bids' 
                ORDER BY ordinal_position
            `);
            
            console.log('   –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã:');
            bidsStructure.rows.forEach(row => {
                console.log(`     ${row.column_name}: ${row.data_type} (nullable: ${row.is_nullable})`);
            });
            
            // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            const bidsCount = await db.query('SELECT COUNT(*) as total FROM auction_bids');
            console.log(`   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${bidsCount.rows[0].total}`);
            
            if (bidsCount.rows[0].total > 0) {
                // –ü—Ä–∏–º–µ—Ä –∑–∞–ø–∏—Å–∏
                const sampleBid = await db.query('SELECT * FROM auction_bids LIMIT 1');
                console.log('   –ü—Ä–∏–º–µ—Ä –∑–∞–ø–∏—Å–∏:');
                Object.keys(sampleBid.rows[0]).forEach(key => {
                    console.log(`     ${key}: ${sampleBid.rows[0][key]}`);
                });
                
                // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ª–æ—Ç–∞–º
                const lotsWithBids = await db.query(`
                    SELECT 
                        COUNT(DISTINCT lot_number) as unique_lots,
                        COUNT(DISTINCT auction_number) as unique_auctions,
                        COUNT(DISTINCT bidder_login) as unique_bidders,
                        MIN(bid_time) as earliest_bid,
                        MAX(bid_time) as latest_bid
                    FROM auction_bids
                `);
                
                console.log('   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
                console.log(`     –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ª–æ—Ç–æ–≤: ${lotsWithBids.rows[0].unique_lots}`);
                console.log(`     –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤: ${lotsWithBids.rows[0].unique_auctions}`);
                console.log(`     –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç–æ—Ä–≥–æ–≤: ${lotsWithBids.rows[0].unique_bidders}`);
                console.log(`     –°–∞–º–∞—è —Ä–∞–Ω–Ω—è—è —Å—Ç–∞–≤–∫–∞: ${lotsWithBids.rows[0].earliest_bid}`);
                console.log(`     –°–∞–º–∞—è –ø–æ–∑–¥–Ω—è—è —Å—Ç–∞–≤–∫–∞: ${lotsWithBids.rows[0].latest_bid}`);
                
                // –¢–æ–ø –ª–æ—Ç–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å—Ç–∞–≤–æ–∫
                const topLots = await db.query(`
                    SELECT 
                        lot_number,
                        auction_number,
                        COUNT(*) as bids_count,
                        MIN(bid_amount) as min_bid,
                        MAX(bid_amount) as max_bid,
                        COUNT(DISTINCT bidder_login) as unique_bidders
                    FROM auction_bids
                    GROUP BY lot_number, auction_number
                    ORDER BY bids_count DESC
                    LIMIT 10
                `);
                
                console.log('\n   –¢–æ–ø-10 –ª–æ—Ç–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å—Ç–∞–≤–æ–∫:');
                topLots.rows.forEach((lot, index) => {
                    console.log(`     ${index + 1}. –õ–æ—Ç ${lot.lot_number} (–∞—É–∫—Ü–∏–æ–Ω ${lot.auction_number}): ${lot.bids_count} —Å—Ç–∞–≤–æ–∫, ${lot.unique_bidders} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, ${lot.min_bid}-${lot.max_bid}‚ÇΩ`);
                });
                
                // –¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç–æ—Ä–≥–æ–≤
                const topBidders = await db.query(`
                    SELECT 
                        bidder_login,
                        COUNT(*) as total_bids,
                        COUNT(DISTINCT lot_number) as lots_participated,
                        COUNT(DISTINCT auction_number) as auctions_participated,
                        AVG(bid_amount) as avg_bid_amount
                    FROM auction_bids
                    GROUP BY bidder_login
                    ORDER BY total_bids DESC
                    LIMIT 10
                `);
                
                console.log('\n   –¢–æ–ø-10 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç–æ—Ä–≥–æ–≤:');
                topBidders.rows.forEach((bidder, index) => {
                    console.log(`     ${index + 1}. ${bidder.bidder_login}: ${bidder.total_bids} —Å—Ç–∞–≤–æ–∫, ${bidder.lots_participated} –ª–æ—Ç–æ–≤, ${bidder.auctions_participated} –∞—É–∫—Ü–∏–æ–Ω–æ–≤, —Å—Ä–µ–¥–Ω—è—è —Å—Ç–∞–≤–∫–∞ ${Math.round(bidder.avg_bid_amount)}‚ÇΩ`);
                });
            }
        }
        
        // 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É user_sessions
        if (tablesCheck.rows.find(r => r.table_name === 'user_sessions')) {
            console.log('\nüìä –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã user_sessions:');
            
            const sessionsCount = await db.query('SELECT COUNT(*) as total FROM user_sessions');
            console.log(`   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${sessionsCount.rows[0].total}`);
            
            if (sessionsCount.rows[0].total > 0) {
                // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ IP-–∞–¥—Ä–µ—Å–∞–º
                const ipStats = await db.query(`
                    SELECT 
                        ip_address,
                        COUNT(DISTINCT bidder_login) as unique_users,
                        COUNT(*) as total_sessions,
                        SUM(total_bids) as total_bids
                    FROM user_sessions
                    GROUP BY ip_address
                    HAVING COUNT(DISTINCT bidder_login) > 1
                    ORDER BY unique_users DESC, total_bids DESC
                    LIMIT 10
                `);
                
                console.log('   –¢–æ–ø-10 IP-–∞–¥—Ä–µ—Å–æ–≤ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:');
                ipStats.rows.forEach((ip, index) => {
                    console.log(`     ${index + 1}. ${ip.ip_address}: ${ip.unique_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, ${ip.total_sessions} —Å–µ—Å—Å–∏–π, ${ip.total_bids} —Å—Ç–∞–≤–æ–∫`);
                });
            }
        }
        
        // 4. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É suspicious_activity
        if (tablesCheck.rows.find(r => r.table_name === 'suspicious_activity')) {
            console.log('\nüìä –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã suspicious_activity:');
            
            const suspiciousCount = await db.query('SELECT COUNT(*) as total FROM suspicious_activity');
            console.log(`   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${suspiciousCount.rows[0].total}`);
            
            if (suspiciousCount.rows[0].total > 0) {
                // –¢–∏–ø—ã –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                const activityTypes = await db.query(`
                    SELECT 
                        activity_type,
                        COUNT(*) as occurrences,
                        COUNT(DISTINCT user_login) as affected_users
                    FROM suspicious_activity
                    GROUP BY activity_type
                    ORDER BY occurrences DESC
                `);
                
                console.log('   –¢–∏–ø—ã –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:');
                activityTypes.rows.forEach((type, index) => {
                    console.log(`     ${index + 1}. ${type.activity_type}: ${type.occurrences} —Å–ª—É—á–∞–µ–≤, ${type.affected_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
                });
            }
        }
        
        // 5. –°–≤—è–∑—å —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ–π auction_lots
        console.log('\nüîó –°–≤—è–∑—å —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ–π auction_lots:');
        
        const lotsWithHistory = await db.query(`
            SELECT COUNT(*) as total 
            FROM auction_lots 
            WHERE bidding_history_collected = true
        `);
        console.log(`   –õ–æ—Ç–æ–≤ —Å —Å–æ–±—Ä–∞–Ω–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–µ–π —Å—Ç–∞–≤–æ–∫: ${lotsWithHistory.rows[0].total}`);
        
        const lotsWithoutHistory = await db.query(`
            SELECT COUNT(*) as total 
            FROM auction_lots 
            WHERE bidding_history_collected = false OR bidding_history_collected IS NULL
        `);
        console.log(`   –õ–æ—Ç–æ–≤ –±–µ–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞–≤–æ–∫: ${lotsWithoutHistory.rows[0].total}`);
        
        // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–∞–Ω–Ω—ã—Ö
        if (tablesCheck.rows.find(r => r.table_name === 'auction_bids')) {
            const bidsCount = await db.query('SELECT COUNT(*) as total FROM auction_bids');
            const lotsWithHistoryCount = await db.query('SELECT COUNT(*) as total FROM auction_lots WHERE bidding_history_collected = true');
            
            console.log('\nüìà –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–∞–Ω–Ω—ã—Ö:');
            console.log(`   –ó–∞–ø–∏—Å–µ–π –≤ auction_bids: ${bidsCount.rows[0].total}`);
            console.log(`   –õ–æ—Ç–æ–≤ —Å bidding_history_collected = true: ${lotsWithHistoryCount.rows[0].total}`);
            
            if (bidsCount.rows[0].total > 0 && lotsWithHistoryCount.rows[0].total > 0) {
                console.log('   ‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –¥—Ä—É–≥ –¥—Ä—É–≥—É');
            } else if (bidsCount.rows[0].total > 0 && lotsWithHistoryCount.rows[0].total === 0) {
                console.log('   ‚ö†Ô∏è –ï—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ auction_bids, –Ω–æ –Ω–µ—Ç –ª–æ—Ç–æ–≤ —Å bidding_history_collected = true');
            } else {
                console.log('   ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
            }
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    } finally {
        await db.end();
    }
}

analyzeBiddingHistoryData();
