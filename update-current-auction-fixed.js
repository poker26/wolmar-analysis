const { Pool } = require('pg');
const puppeteer = require('puppeteer-core');
const fs = require('fs');
const path = require('path');

const dbConfig = {
    user: 'postgres.xkwgspqwebfeteoblayu',
    host: 'aws-0-eu-north-1.pooler.supabase.com',
    database: 'postgres',
    password: 'Gopapopa326+',
    port: 6543,
    ssl: {
        rejectUnauthorized: false
    }
};

const pool = new Pool(dbConfig);

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
function getProgressFilePath(auctionNumber) {
    return path.join(__dirname, `update_progress_${auctionNumber}.json`);
}

function saveProgress(auctionNumber, currentIndex, totalLots) {
    const progress = {
        auctionNumber,
        currentIndex,
        totalLots,
        lastUpdate: new Date().toISOString()
    };
    
    const filePath = getProgressFilePath(auctionNumber);
    fs.writeFileSync(filePath, JSON.stringify(progress, null, 2));
    console.log(`üíæ –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${currentIndex}/${totalLots}`);
}

function loadProgress(auctionNumber) {
    const filePath = getProgressFilePath(auctionNumber);
    
    if (!fs.existsSync(filePath)) {
        return null;
    }
    
    try {
        const data = fs.readFileSync(filePath, 'utf8');
        return JSON.parse(data);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
        return null;
    }
}

function clearProgress(auctionNumber) {
    const filePath = getProgressFilePath(auctionNumber);
    
    if (fs.existsSync(filePath)) {
        fs.unlinkSync(filePath);
        console.log('üóëÔ∏è –§–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–∫—É—â–µ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞
async function getCurrentAuctionNumber() {
    try {
        // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∞—É–∫—Ü–∏–æ–Ω—ã
        const activeResult = await pool.query(`
            SELECT auction_number
            FROM auction_lots
            WHERE auction_end_date > NOW()
            ORDER BY auction_end_date ASC
            LIMIT 1
        `);

        if (activeResult.rows.length > 0) {
            console.log(`üîÑ –ù–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –∞—É–∫—Ü–∏–æ–Ω: ${activeResult.rows[0].auction_number}`);
            return activeResult.rows[0].auction_number;
        }

        // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö, –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
        const lastResult = await pool.query(`
            SELECT auction_number
            FROM auction_lots
            ORDER BY auction_number DESC
            LIMIT 1
        `);

        if (lastResult.rows.length > 0) {
            console.log(`üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞—É–∫—Ü–∏–æ–Ω: ${lastResult.rows[0].auction_number}`);
            return lastResult.rows[0].auction_number;
        }

        return null;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞:', error);
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ Wolmar –ø–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É –Ω–æ–º–µ—Ä—É
async function getWolmarAuctionNumber(internalNumber) {
    try {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π –∞—É–∫—Ü–∏–æ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const result = await pool.query(`
            SELECT auction_number 
            FROM auction_lots 
            WHERE auction_number = $1 
            LIMIT 1
        `, [internalNumber]);
        
        if (result.rows.length > 0) {
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –∞—É–∫—Ü–∏–æ–Ω ${internalNumber} –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
            return internalNumber;
        }
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∞—É–∫—Ü–∏–æ–Ω (—Å–∞–º—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π)
        const activeResult = await pool.query(`
            SELECT auction_number 
            FROM auction_lots 
            WHERE auction_end_date > NOW()
            ORDER BY auction_end_date ASC
            LIMIT 1
        `);
        
        if (activeResult.rows.length > 0) {
            const activeAuction = activeResult.rows[0].auction_number;
            console.log(`üîÑ –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä ${internalNumber} ‚Üí –ê–∫—Ç–∏–≤–Ω—ã–π –∞—É–∫—Ü–∏–æ–Ω –≤ –ë–î: ${activeAuction}`);
            console.log(`üìã –ü–∞—Ä—Å–∏–º —Å–∞–π—Ç Wolmar –ø–æ –Ω–æ–º–µ—Ä—É ${internalNumber}, –æ–±–Ω–æ–≤–ª—è–µ–º –ë–î –ø–æ –Ω–æ–º–µ—Ä—É ${activeAuction}`);
            return { wolmarNumber: internalNumber, dbNumber: activeAuction };
        }
        
        // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤, –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π
        const lastResult = await pool.query(`
            SELECT auction_number 
            FROM auction_lots 
            ORDER BY auction_number DESC
            LIMIT 1
        `);
        
        if (lastResult.rows.length > 0) {
            const lastAuction = lastResult.rows[0].auction_number;
            console.log(`üîÑ –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä ${internalNumber} ‚Üí –ü–æ—Å–ª–µ–¥–Ω–∏–π –∞—É–∫—Ü–∏–æ–Ω –≤ –ë–î: ${lastAuction}`);
            console.log(`üìã –ü–∞—Ä—Å–∏–º —Å–∞–π—Ç Wolmar –ø–æ –Ω–æ–º–µ—Ä—É ${internalNumber}, –æ–±–Ω–æ–≤–ª—è–µ–º –ë–î –ø–æ –Ω–æ–º–µ—Ä—É ${lastAuction}`);
            return { wolmarNumber: internalNumber, dbNumber: lastAuction };
        }
        
        return null;
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞—É–∫—Ü–∏–æ–Ω–∞ –ø–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É –Ω–æ–º–µ—Ä—É:', error);
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–∫—É—â–∏—Ö —Å—Ç–∞–≤–æ–∫ —Å –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
async function parseCurrentBidsFixed(wolmarNumber, dbNumber, startFromIndex = null) {
    console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–≤–æ–∫: –ø–∞—Ä—Å–∏–º Wolmar ${wolmarNumber}, –æ–±–Ω–æ–≤–ª—è–µ–º –ë–î ${dbNumber}...`);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å
    let progress = null;
    if (startFromIndex === null) {
        progress = loadProgress(wolmarNumber);
        if (progress) {
            startFromIndex = progress.currentIndex;
            console.log(`üìÇ –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º —Å –ø–æ–∑–∏—Ü–∏–∏: ${startFromIndex}`);
        }
    }

    const { launchPuppeteer, createPage } = require('./puppeteer-utils');
    
    const browser = await launchPuppeteer();

    try {
        const page = await createPage(browser);
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ URL –ª–æ—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        console.log(`üìã –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –ª–æ—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...`);
        
        const lotUrls = await pool.query(`
            SELECT lot_url, url_index 
            FROM auction_lot_urls 
            WHERE auction_number = $1 
            ORDER BY url_index
        `, [wolmarNumber]);
        
        if (lotUrls.rows.length === 0) {
            console.log(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫ –Ω–∞ –ª–æ—Ç—ã –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞ ${wolmarNumber}`);
            return;
        }
        
        console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${lotUrls.rows.length} —Å—Å—ã–ª–æ–∫ –Ω–∞ –ª–æ—Ç—ã`);
        
        // –ü–∞—Ä—Å–∏–º –∫–∞–∂–¥—ã–π –ª–æ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ —Å –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
        const lotsData = [];
        const batchSize = 100; // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ 100 –ª–æ—Ç–æ–≤ –∑–∞ —Ä–∞–∑
        const totalLots = lotUrls.rows.length;
        
        console.log(`üìä –í—Å–µ–≥–æ –ª–æ—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${totalLots}`);
        console.log(`üì¶ –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞: ${batchSize} –ª–æ—Ç–æ–≤`);
        
        // –ù–∞—á–∏–Ω–∞–µ–º —Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –∏–ª–∏ —Å 0
        const startIndex = startFromIndex || 0;
        console.log(`üéØ –ù–∞—á–∏–Ω–∞–µ–º —Å –∏–Ω–¥–µ–∫—Å–∞: ${startIndex}`);
        
        for (let i = startIndex; i < totalLots; i += batchSize) {
            const endIndex = Math.min(i + batchSize, totalLots);
            console.log(`\nüîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞–∫–µ—Ç ${Math.floor(i/batchSize) + 1}: –ª–æ—Ç—ã ${i + 1}-${endIndex}`);
            
            for (let j = i; j < endIndex; j++) {
                const lotUrl = lotUrls.rows[j].lot_url;
                console.log(`üîÑ –ü–∞—Ä—Å–∏–º –ª–æ—Ç ${j + 1}/${totalLots}: ${lotUrl}`);
                
                try {
                    await page.goto(lotUrl, { waitUntil: 'domcontentloaded', timeout: 30000 });
                    await new Promise(resolve => setTimeout(resolve, 1000));
                    
                    const lotData = await page.evaluate(() => {
                        const data = {};
                        
                        // –ù–æ–º–µ—Ä –ª–æ—Ç–∞ - –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ h5
                        const lotTitle = document.querySelector('h5');
                        if (lotTitle) {
                            const match = lotTitle.textContent.match(/–õ–æ—Ç\s*‚Ññ\s*(\d+)/i);
                            if (match) {
                                data.lotNumber = parseInt(match[1]);
                            }
                        }
                        
                        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ—Ä–≥–∞—Ö
                        const valuesDiv = document.querySelectorAll('.values')[1];
                        if (valuesDiv) {
                            const valuesText = valuesDiv.textContent;
                            
                            // –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞
                            const bidMatch = valuesText.match(/–°—Ç–∞–≤–∫–∞:\s*(\d+(?:\s?\d+)*(?:[.,]\d+)?)\s*—Ä—É–±/i);
                            if (bidMatch) {
                                data.winningBid = bidMatch[1].replace(/\s/g, '').replace(',', '.');
                            }
                            
                            // –õ–∏–¥–µ—Ä
                            const leaderMatch = valuesText.match(/–õ–∏–¥–µ—Ä:\s*([a-zA-Z0-9_–ê-–Ø–∞-—è]+)/i);
                            if (leaderMatch) {
                                data.winnerLogin = leaderMatch[1];
                            }
                        }
                        
                        return data;
                    });
                    
                    if (lotData.lotNumber && lotData.winningBid) {
                        lotsData.push({
                            lotNumber: lotData.lotNumber,
                            currentBid: lotData.winningBid,
                            bidder: lotData.winnerLogin || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                        });
                        
                        console.log(`‚úÖ –õ–æ—Ç ${lotData.lotNumber}: ${lotData.winningBid}‚ÇΩ (${lotData.winnerLogin || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'})`);
                    } else {
                        console.log(`‚ùå –õ–æ—Ç ${lotData.lotNumber}: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ç–∞–≤–∫–∞`);
                    }
                    
                    // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ª–æ—Ç–∞–º–∏
                    await new Promise(resolve => setTimeout(resolve, 200));
                    
                } catch (error) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ª–æ—Ç–∞ ${j + 1}:`, error.message);
                    continue;
                }
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –ø–∞–∫–µ—Ç–∞
            console.log(`üíæ –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–∞–∫–µ—Ç–∞ ${Math.floor(i/batchSize) + 1}...`);
            let updatedCount = 0;
            for (const lot of lotsData) {
                try {
                    const price = parseFloat(lot.currentBid);
                    if (isNaN(price) || price <= 0) continue;
                    
                    // –ò—â–µ–º –ª–æ—Ç –≤ –ë–î –ø–æ –Ω–æ–º–µ—Ä—É –ª–æ—Ç–∞ (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –ø–æ—Ä—è–¥–∫–∞ URL)
                    const updateResult = await pool.query(`
                        UPDATE auction_lots 
                        SET winning_bid = $1, 
                            winner_login = $2
                        WHERE auction_number = $3 
                        AND lot_number = $4
                    `, [price, lot.bidder, dbNumber, lot.lotNumber]);
                    
                    if (updateResult.rowCount > 0) {
                        updatedCount++;
                        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –ª–æ—Ç ${lot.lotNumber}: ${price}‚ÇΩ (${lot.bidder})`);
                    } else {
                        console.log(`‚ö†Ô∏è –õ–æ—Ç ${lot.lotNumber} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è`);
                    }
                } catch (error) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ—Ç–∞ ${lot.lotNumber}:`, error);
                }
            }
            
            console.log(`‚úÖ –ü–∞–∫–µ—Ç ${Math.floor(i/batchSize) + 1} –∑–∞–≤–µ—Ä—à–µ–Ω: –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${updatedCount} –ª–æ—Ç–æ–≤`);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            saveProgress(wolmarNumber, endIndex, totalLots);
            
            // –û—á–∏—â–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–∞–∫–µ—Ç–∞
            lotsData.length = 0;
            
            // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏
            if (i + batchSize < totalLots) {
                console.log(`‚è≥ –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –ø–∞–∫–µ—Ç–æ–º...`);
                await new Promise(resolve => setTimeout(resolve, 2000));
            }
        }
        
        console.log(`üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –ª–æ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!`);
        
        // –û—á–∏—â–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        clearProgress(wolmarNumber);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error);
    } finally {
        await browser.close();
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö —Å—Ç–∞–≤–æ–∫ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)...');

    try {
        let wolmarNumber, dbNumber;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        const args = process.argv.slice(2);
        let startFromIndex = null;
        
        if (args.length > 0) {
            const inputNumber = parseInt(args[0]);
            if (isNaN(inputNumber)) {
                console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: node update-current-auction-fixed.js [–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π_–Ω–æ–º–µ—Ä] [—Å—Ç–∞—Ä—Ç–æ–≤—ã–π_–∏–Ω–¥–µ–∫—Å]');
                return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç (—Å—Ç–∞—Ä—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å)
            if (args.length > 1) {
                startFromIndex = parseInt(args[1]);
                if (isNaN(startFromIndex)) {
                    console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ');
                    return;
                }
                console.log(`üéØ –ó–∞–ø—É—Å–∫ —Å –∏–Ω–¥–µ–∫—Å–∞: ${startFromIndex}`);
            }
            
            // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –Ω–æ–º–µ—Ä Wolmar –ø–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É –Ω–æ–º–µ—Ä—É
            const auctionInfo = await getWolmarAuctionNumber(inputNumber);
            
            if (!auctionInfo) {
                console.log(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∞—É–∫—Ü–∏–æ–Ω –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –Ω–æ–º–µ—Ä–∞ ${inputNumber}`);
                console.log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –Ω–æ–º–µ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
                return;
            }
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–º–µ—Ä–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î
            if (typeof auctionInfo === 'object') {
                wolmarNumber = auctionInfo.wolmarNumber;
                dbNumber = auctionInfo.dbNumber;
            } else {
                wolmarNumber = auctionInfo;
                dbNumber = auctionInfo;
            }
            
            console.log(`üìã –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä: ${inputNumber} ‚Üí Wolmar –∞—É–∫—Ü–∏–æ–Ω: ${wolmarNumber}, –ë–î –∞—É–∫—Ü–∏–æ–Ω: ${dbNumber}`);
        } else {
            // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            const auctionNumber = await getCurrentAuctionNumber();
            
            if (!auctionNumber) {
                console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–µ–∫—É—â–∏–π –∞—É–∫—Ü–∏–æ–Ω');
                console.log('üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: node update-current-auction-fixed.js [–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π_–Ω–æ–º–µ—Ä]');
                return;
            }
            
            console.log(`üìã –¢–µ–∫—É—â–∏–π –∞—É–∫—Ü–∏–æ–Ω: ${auctionNumber}`);
            
            // –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω –Ω–æ–º–µ—Ä
            wolmarNumber = auctionNumber;
            dbNumber = auctionNumber;
        }
        
        // –ü–∞—Ä—Å–∏–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞–≤–∫–∏
        await parseCurrentBidsFixed(wolmarNumber, dbNumber, startFromIndex);
        
        console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    } finally {
        await pool.end();
    }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
    main();
}




