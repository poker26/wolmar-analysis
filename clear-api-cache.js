const { Client } = require('pg');
const config = require('./config');

async function clearApiCache() {
    const client = new Client(config.dbConfig);
    
    try {
        await client.connect();
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        const categoryResult = await client.query(`
            SELECT COUNT(*) as total,
                   COUNT(CASE WHEN category IS NOT NULL AND category != '' THEN 1 END) as with_categories
            FROM auction_lots
        `);
        
        console.log('üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:');
        console.log(`   –í—Å–µ–≥–æ –ª–æ—Ç–æ–≤: ${categoryResult.rows[0].total}`);
        console.log(`   –° –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏: ${categoryResult.rows[0].with_categories}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const uniqueCategoriesResult = await client.query(`
            SELECT DISTINCT category, COUNT(*) as count
            FROM auction_lots 
            WHERE category IS NOT NULL AND category != ''
            GROUP BY category 
            ORDER BY count DESC
            LIMIT 10
        `);
        
        if (uniqueCategoriesResult.rows.length > 0) {
            console.log('üè∑Ô∏è –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:');
            uniqueCategoriesResult.rows.forEach((row, index) => {
                console.log(`   ${index + 1}. ${row.category}: ${row.count} –ª–æ—Ç–æ–≤`);
            });
        } else {
            console.log('‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
        }
        
        console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
        console.log('1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ PM2: pm2 restart all)');
        console.log('2. –û—á–∏—Å—Ç–∏—Ç–µ –∫—ç—à –±—Ä–∞—É–∑–µ—Ä–∞ (Ctrl+F5)');
        console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –ø–∞—Ä—Å–µ—Ä –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    } finally {
        await client.end();
    }
}

clearApiCache();


