const puppeteer = require('puppeteer-core');
const { Client } = require('pg');

const dbConfig = {
    user: 'postgres.xkwgspqwebfeteoblayu',        
    host: 'aws-0-eu-north-1.pooler.supabase.com',
    database: 'postgres',   
    password: 'Gopapopa326+',    
    port: 6543,
    ssl: {
        rejectUnauthorized: false
    }
};

class DetailedParserV5Tester {
    constructor() {
        this.dbClient = new Client(dbConfig);
        this.browser = null;
        this.page = null;
    }

    async init() {
        await this.dbClient.connect();
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');
        
        this.browser = await puppeteer.launch({
            headless: true,
            executablePath: 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe',
            args: ['--no-sandbox', '--disable-setuid-sandbox', '--disable-dev-shm-usage',
            '--user-data-dir=/tmp/chrome-temp-9g8ln',
            '--disable-metrics',
            '--disable-metrics-reporting',
            '--disable-background-mode',
            '--disable-background-timer-throttling',
            '--disable-renderer-backgrounding',
            '--disable-backgrounding-occluded-windows',
            '--disable-logging',
            '--disable-gpu-logging',
            '--disable-features=TranslateUI,BlinkGenPropertyTrees,VizDisplayCompositor']
        });
        
        this.page = await this.browser.newPage();
        await this.page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36');
        this.page.setDefaultTimeout(30000);
        this.page.setDefaultNavigationTimeout(30000);
        
        console.log('‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    // –§—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –≥—Ä–∞–¥–∞—Ü–∏–µ–π (–∏–∑ wolmar-parser5.js)
    extractConditionWithGrade(conditionText) {
        if (!conditionText) return null;
        return conditionText.replace(/\s+/g, '');
    }

    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ª–æ—Ç–æ–≤ –∞—É–∫—Ü–∏–æ–Ω–∞ 2104
    async testSpecificLots() {
        console.log('\nüîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–ù–ö–†–ï–¢–ù–´–• –õ–û–¢–û–í –ê–£–ö–¶–ò–û–ù–ê 2104:');
        console.log('='.repeat(60));
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ª–æ—Ç–æ–≤
        const testLots = [
            'https://www.wolmar.ru/auction/2104/1',
            'https://www.wolmar.ru/auction/2104/10',
            'https://www.wolmar.ru/auction/2104/50',
            'https://www.wolmar.ru/auction/2104/100',
            'https://www.wolmar.ru/auction/2104/200'
        ];
        
        const results = [];
        
        for (let i = 0; i < testLots.length; i++) {
            const lotUrl = testLots[i];
            console.log(`\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ—Ç ${i + 1}: ${lotUrl}`);
            
            try {
                await this.page.goto(lotUrl, { waitUntil: 'networkidle2', timeout: 30000 });
                await new Promise(resolve => setTimeout(resolve, 1500));
                
                // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                const lotData = await this.page.evaluate(() => {
                    const data = {};
                    
                    // –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤ —Ç–µ–∫—Å—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    const pageText = document.body.textContent || '';
                    
                    // –†–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∏—Å–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                    const patterns = [
                        /–°–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç—å:\s*([^\n\r]+)/i,
                        /–°–æ—Å—Ç–æ—è–Ω–∏–µ:\s*([^\n\r]+)/i,
                        /Grade:\s*([^\n\r]+)/i,
                        /Condition:\s*([^\n\r]+)/i
                    ];
                    
                    for (const pattern of patterns) {
                        const match = pageText.match(pattern);
                        if (match) {
                            data.condition = match[1].trim();
                            break;
                        }
                    }
                    
                    // –ò—â–µ–º –Ω–æ–º–µ—Ä –ª–æ—Ç–∞
                    const lotNumberMatch = pageText.match(/–õ–æ—Ç\s*(\d+)/i);
                    if (lotNumberMatch) {
                        data.lotNumber = lotNumberMatch[1];
                    }
                    
                    // –ò—â–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã
                    const descriptionMatch = pageText.match(/–û–ø–∏—Å–∞–Ω–∏–µ[:\s]*([^\n\r]+)/i);
                    if (descriptionMatch) {
                        data.description = descriptionMatch[1].trim();
                    }
                    
                    // –ò—â–µ–º –≥–æ–¥
                    const yearMatch = pageText.match(/(\d{4})\s*–≥–æ–¥/i);
                    if (yearMatch) {
                        data.year = yearMatch[1];
                    }
                    
                    return data;
                });
                
                if (lotData.condition) {
                    const processedCondition = this.extractConditionWithGrade(lotData.condition);
                    console.log(`‚úÖ –õ–æ—Ç ${lotData.lotNumber}: "${lotData.condition}" -> "${processedCondition}"`);
                    
                    if (lotData.description) {
                        console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${lotData.description}`);
                    }
                    
                    if (lotData.year) {
                        console.log(`   –ì–æ–¥: ${lotData.year}`);
                    }
                    
                    results.push({
                        lotNumber: lotData.lotNumber,
                        originalCondition: lotData.condition,
                        processedCondition: processedCondition,
                        description: lotData.description,
                        year: lotData.year,
                        url: lotUrl
                    });
                } else {
                    console.log(`‚ö†Ô∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –ª–æ—Ç–∞ ${lotUrl}`);
                    
                    // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª—é–±—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                    const pageText = await this.page.evaluate(() => document.body.textContent);
                    const conditionKeywords = ['MS', 'AU', 'XF', 'VF', 'UNC', 'PF', 'PL', 'PR', 'F'];
                    const foundKeywords = conditionKeywords.filter(keyword => 
                        pageText.includes(keyword)
                    );
                    
                    if (foundKeywords.length > 0) {
                        console.log(`   –ù–∞–π–¥–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π: ${foundKeywords.join(', ')}`);
                    }
                }
                
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –ª–æ—Ç–∞ ${lotUrl}:`, error.message);
            }
        }
        
        return results;
    }

    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ª–æ—Ç–∞—Ö —Å –≥—Ä–∞–¥–∞—Ü–∏—è–º–∏
    async testKnownLotsWithGrades() {
        console.log('\nüîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ó–í–ï–°–¢–ù–´–• –õ–û–¢–û–í –° –ì–†–ê–î–ê–¶–ò–Ø–ú–ò:');
        console.log('='.repeat(60));
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –∑–Ω–∞–µ–º –∏–º–µ—é—Ç –≥—Ä–∞–¥–∞—Ü–∏–∏
        const knownLots = [
            'https://www.wolmar.ru/auction/2130/7555831', // MS 61
            'https://www.wolmar.ru/auction/2130/7555840', // MS 61
            'https://www.wolmar.ru/auction/2121/7501805', // MS 61
            'https://www.wolmar.ru/auction/2126/7525679'  // MS 61
        ];
        
        const results = [];
        
        for (let i = 0; i < knownLots.length; i++) {
            const lotUrl = knownLots[i];
            console.log(`\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–π –ª–æ—Ç ${i + 1}: ${lotUrl}`);
            
            try {
                await this.page.goto(lotUrl, { waitUntil: 'networkidle2', timeout: 30000 });
                await new Promise(resolve => setTimeout(resolve, 1500));
                
                // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                const lotData = await this.page.evaluate(() => {
                    const data = {};
                    
                    // –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤ —Ç–µ–∫—Å—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    const pageText = document.body.textContent || '';
                    const conditionMatch = pageText.match(/–°–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç—å:\s*([^\n\r]+)/i);
                    if (conditionMatch) {
                        data.condition = conditionMatch[1].trim();
                    }
                    
                    // –ò—â–µ–º –Ω–æ–º–µ—Ä –ª–æ—Ç–∞
                    const lotNumberMatch = pageText.match(/–õ–æ—Ç\s*(\d+)/i);
                    if (lotNumberMatch) {
                        data.lotNumber = lotNumberMatch[1];
                    }
                    
                    return data;
                });
                
                if (lotData.condition) {
                    const processedCondition = this.extractConditionWithGrade(lotData.condition);
                    console.log(`‚úÖ –õ–æ—Ç ${lotData.lotNumber}: "${lotData.condition}" -> "${processedCondition}"`);
                    
                    results.push({
                        lotNumber: lotData.lotNumber,
                        originalCondition: lotData.condition,
                        processedCondition: processedCondition,
                        url: lotUrl
                    });
                } else {
                    console.log(`‚ö†Ô∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –ª–æ—Ç–∞ ${lotUrl}`);
                }
                
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –ª–æ—Ç–∞ ${lotUrl}:`, error.message);
            }
        }
        
        return results;
    }

    // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    async runTest() {
        try {
            console.log('üöÄ –î–ï–¢–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï WOLMAR-PARSER5');
            console.log('='.repeat(70));
            
            // 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ª–æ—Ç—ã –∞—É–∫—Ü–∏–æ–Ω–∞ 2104
            const auction2104Results = await this.testSpecificLots();
            
            // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ª–æ—Ç—ã —Å –≥—Ä–∞–¥–∞—Ü–∏—è–º–∏
            const knownLotsResults = await this.testKnownLotsWithGrades();
            
            // 3. –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            console.log('\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
            console.log('='.repeat(40));
            console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ª–æ—Ç–æ–≤ –∞—É–∫—Ü–∏–æ–Ω–∞ 2104: ${auction2104Results.length}`);
            console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ª–æ—Ç–æ–≤: ${knownLotsResults.length}`);
            
            const allResults = [...auction2104Results, ...knownLotsResults];
            if (allResults.length > 0) {
                console.log('\nüìã –í–°–ï –û–ë–†–ê–ë–û–¢–ê–ù–ù–´–ï –°–û–°–¢–û–Ø–ù–ò–Ø:');
                allResults.forEach((result, index) => {
                    console.log(`${index + 1}. –õ–æ—Ç ${result.lotNumber}: "${result.originalCondition}" -> "${result.processedCondition}"`);
                });
            }
            
            console.log('\nüéâ –î–ï–¢–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!');
            
        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
        }
    }

    async close() {
        try {
            if (this.dbClient) {
                await this.dbClient.end();
                console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
            }
        } catch (error) {
            console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î');
        }
        
        try {
            if (this.browser) {
                await this.browser.close();
                console.log('‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç');
            }
        } catch (error) {
            console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞');
        }
    }
}

async function testDetailedParserV5() {
    const tester = new DetailedParserV5Tester();
    
    try {
        await tester.init();
        await tester.runTest();
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    } finally {
        await tester.close();
    }
}

testDetailedParserV5();
