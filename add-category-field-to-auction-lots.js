const { Pool } = require('pg');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
const config = require('./config');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Supabase
const dbConfig = config.dbConfig;

async function addCategoryField() {
    const pool = new Pool(dbConfig);
    
    try {
        console.log('üîß –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ category –≤ —Ç–∞–±–ª–∏—Ü—É auction_lots...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª–µ category
        const checkFieldQuery = `
            SELECT column_name 
            FROM information_schema.columns 
            WHERE table_name = 'auction_lots' 
            AND column_name = 'category'
        `;
        
        const checkResult = await pool.query(checkFieldQuery);
        
        if (checkResult.rows.length > 0) {
            console.log('‚úÖ –ü–æ–ª–µ category —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ auction_lots');
            return;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ category
        const addFieldQuery = `
            ALTER TABLE auction_lots 
            ADD COLUMN category VARCHAR(50)
        `;
        
        await pool.query(addFieldQuery);
        console.log('‚úÖ –ü–æ–ª–µ category —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—É auction_lots');
        
        // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–ª—è category –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞
        const createIndexQuery = `
            CREATE INDEX IF NOT EXISTS idx_auction_lots_category 
            ON auction_lots(category)
        `;
        
        await pool.query(createIndexQuery);
        console.log('‚úÖ –ò–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–ª—è category —Å–æ–∑–¥–∞–Ω');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        const structureQuery = `
            SELECT column_name, data_type, is_nullable
            FROM information_schema.columns 
            WHERE table_name = 'auction_lots' 
            ORDER BY ordinal_position
        `;
        
        const structureResult = await pool.query(structureQuery);
        console.log('\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã auction_lots:');
        structureResult.rows.forEach(row => {
            console.log(`  ${row.column_name}: ${row.data_type} (nullable: ${row.is_nullable})`);
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        const countQuery = 'SELECT COUNT(*) as total FROM auction_lots';
        const countResult = await pool.query(countQuery);
        console.log(`\nüìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ: ${countResult.rows[0].total}`);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—è category:', error);
        throw error;
    } finally {
        await pool.end();
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
addCategoryField().catch(console.error);
