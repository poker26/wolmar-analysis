const express = require('express');
const { Pool } = require('pg');
const cors = require('cors');
const path = require('path');

const app = express();
const PORT = process.env.ANALYTICS_PORT || 3002;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.use(cors());
app.use(express.json());

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.use(express.static('public'));

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (Supabase)
const pool = new Pool({
    user: 'postgres.xkwgspqwebfeteoblayu',
    host: 'aws-0-eu-north-1.pooler.supabase.com',
    database: 'postgres',
    password: 'Gopapopa326+',
    port: 6543,
    ssl: {
        rejectUnauthorized: false
    },
    connectionTimeoutMillis: 10000,
    idleTimeoutMillis: 30000,
    max: 10,
    allowExitOnIdle: true
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
pool.on('connect', () => {
    console.log('üîó Analytics Service: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
});

pool.on('error', (err) => {
    console.error('‚ùå Analytics Service: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', err);
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞
app.get('/api/analytics/dashboard-stats', async (req, res) => {
    try {
        const queries = {
            totalBids: 'SELECT COUNT(*) as count FROM lot_bids',
            totalLots: 'SELECT COUNT(*) as count FROM auction_lots',
            totalBidders: 'SELECT COUNT(DISTINCT bidder_login) as count FROM lot_bids',
            manualBids: 'SELECT COUNT(*) as count FROM lot_bids WHERE is_auto_bid = false',
            autobids: 'SELECT COUNT(*) as count FROM lot_bids WHERE is_auto_bid = true'
        };
        
        const results = {};
        for (const [key, query] of Object.entries(queries)) {
            const result = await pool.query(query);
            results[key] = parseInt(result.rows[0].count);
        }
        
        results.manualBidPercentage = results.totalBids > 0 
            ? Math.round((results.manualBids / results.totalBids) * 100) 
            : 0;
        
        res.json({
            success: true,
            data: results
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞:', error);
        res.status(500).json({ 
            success: false, 
            error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞',
            details: error.message 
        });
    }
});

// API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±—ã—Å—Ç—Ä—ã—Ö —Ä—É—á–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫
app.get('/api/analytics/fast-manual-bids', async (req, res) => {
    try {
        const query = `
            WITH bid_intervals AS (
                SELECT 
                    lot_id,
                    auction_number,
                    lot_number,
                    bidder_login,
                    bid_amount,
                    bid_timestamp,
                    is_auto_bid,
                    LAG(bid_timestamp) OVER (PARTITION BY lot_id ORDER BY bid_timestamp) as prev_bid_timestamp,
                    EXTRACT(EPOCH FROM (bid_timestamp - LAG(bid_timestamp) OVER (PARTITION BY lot_id ORDER BY bid_timestamp))) as seconds_between_bids
                FROM lot_bids 
                WHERE lot_id IN (
                    SELECT lot_id 
                    FROM lot_bids 
                    GROUP BY lot_id 
                    HAVING COUNT(*) > 5
                )
            )
            SELECT 
                lot_id,
                auction_number,
                lot_number,
                bidder_login,
                bid_amount,
                bid_timestamp,
                is_auto_bid,
                seconds_between_bids,
                CASE 
                    WHEN is_auto_bid = false AND seconds_between_bids < 1 THEN '–ö–†–ò–¢–ò–ß–ï–°–ö–ò –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û: —Ä—É—á–Ω–∞—è —Å—Ç–∞–≤–∫–∞ < 1 —Å–µ–∫'
                    WHEN is_auto_bid = false AND seconds_between_bids < 5 THEN '–ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û: —Ä—É—á–Ω–∞—è —Å—Ç–∞–≤–∫–∞ < 5 —Å–µ–∫'
                    WHEN is_auto_bid = false AND seconds_between_bids < 30 THEN '–í–ù–ò–ú–ê–ù–ò–ï: –±—ã—Å—Ç—Ä–∞—è —Ä—É—á–Ω–∞—è —Å—Ç–∞–≤–∫–∞'
                END as suspicious_level
            FROM bid_intervals
            WHERE is_auto_bid = false 
              AND seconds_between_bids < 30
            ORDER BY seconds_between_bids ASC, lot_id, bid_timestamp
            LIMIT 100;
        `;
        
        const { rows } = await pool.query(query);
        
        res.json({
            success: true,
            data: rows,
            count: rows.length
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –±—ã—Å—Ç—Ä—ã—Ö —Ä—É—á–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫:', error);
        res.status(500).json({ 
            success: false, 
            error: '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –±—ã—Å—Ç—Ä—ã—Ö —Ä—É—á–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫',
            details: error.message 
        });
    }
});

// –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
app.get('/analytics', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'analytics.html'));
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`üöÄ Analytics Service –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${PORT}/analytics`);
});

// Graceful shutdown
process.on('SIGINT', async () => {
    console.log('\nüõë Analytics Service: –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...');
    await pool.end();
    process.exit(0);
});

module.exports = app;
