const { Pool } = require('pg');
const LotClassifier = require('./lot-classifier');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
const config = require('./config');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Supabase
const dbConfig = config.dbConfig;

class LotClassificationService {
    constructor() {
        this.classifier = new LotClassifier();
        this.pool = new Pool(dbConfig);
        this.batchSize = 1000; // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ 1000 –∑–∞–ø–∏—Å–µ–π –∑–∞ —Ä–∞–∑
    }

    /**
     * –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –≤—Å–µ –ª–æ—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
     */
    async classifyAllLots() {
        try {
            console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –≤—Å–µ—Ö –ª–æ—Ç–æ–≤...');
            
            // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ—Ç–æ–≤
            const totalQuery = 'SELECT COUNT(*) as total FROM auction_lots';
            const totalResult = await this.pool.query(totalQuery);
            const totalLots = parseInt(totalResult.rows[0].total);
            
            console.log(`üìä –í—Å–µ–≥–æ –ª–æ—Ç–æ–≤ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${totalLots}`);
            
            let processedCount = 0;
            let classifiedCount = 0;
            let skippedCount = 0;
            const categoryStats = {};
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–æ—Ç—ã –±–∞—Ç—á–∞–º–∏
            for (let offset = 0; offset < totalLots; offset += this.batchSize) {
                console.log(`\nüîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á ${Math.floor(offset / this.batchSize) + 1} (${offset + 1}-${Math.min(offset + this.batchSize, totalLots)})...`);
                
                // –ü–æ–ª—É—á–∞–µ–º –±–∞—Ç—á –ª–æ—Ç–æ–≤
                const batchQuery = `
                    SELECT id, coin_description, letters, metal, year, category, lot_type
                    FROM auction_lots 
                    ORDER BY id 
                    LIMIT $1 OFFSET $2
                `;
                
                const batchResult = await this.pool.query(batchQuery, [this.batchSize, offset]);
                const lots = batchResult.rows;
                
                if (lots.length === 0) break;
                
                // –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ª–æ—Ç –≤ –±–∞—Ç—á–µ
                for (const lot of lots) {
                    processedCount++;
                    
                    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ª–æ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –∏–º–µ—é—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                    if (lot.category) {
                        skippedCount++;
                        continue;
                    }
                    
                    // –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ª–æ—Ç
                    const classification = this.classifier.classify(lot);
                    
                    if (classification) {
                        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                        const updateQuery = `
                            UPDATE auction_lots 
                            SET category = $1 
                            WHERE id = $2
                        `;
                        
                        await this.pool.query(updateQuery, [classification, lot.id]);
                        classifiedCount++;
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                        categoryStats[classification] = (categoryStats[classification] || 0) + 1;
                        
                        if (processedCount % 100 === 0) {
                            console.log(`  ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processedCount}/${totalLots}, –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ: ${classifiedCount}, –ø—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedCount}`);
                        }
                    }
                }
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                const progress = ((offset + lots.length) / totalLots * 100).toFixed(1);
                console.log(`üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: ${progress}% (${offset + lots.length}/${totalLots})`);
            }
            
            // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            console.log('\nüéâ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
            console.log(`üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
            console.log(`  –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processedCount}`);
            console.log(`  –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ: ${classifiedCount}`);
            console.log(`  –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ –∏–º–µ–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é): ${skippedCount}`);
            console.log(`  –ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å: ${processedCount - classifiedCount - skippedCount}`);
            
            console.log('\nüìã –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:');
            Object.entries(categoryStats)
                .sort(([,a], [,b]) => b - a)
                .forEach(([category, count]) => {
                    const percentage = (count / classifiedCount * 100).toFixed(1);
                    console.log(`  ${category}: ${count} (${percentage}%)`);
                });
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ª–æ—Ç–æ–≤:', error);
            throw error;
        }
    }

    /**
     * –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ª–æ—Ç—ã —Å –Ω–∏–∑–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
     */
    async reclassifyLowConfidenceLots(minConfidence = 0.3) {
        try {
            console.log(`üîç –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ª–æ—Ç–æ–≤ —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é < ${minConfidence}...`);
            
            // –ü–æ–ª—É—á–∞–µ–º –ª–æ—Ç—ã –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            const unclassifiedQuery = `
                SELECT id, coin_description, letters, denomination, metal, year
                FROM auction_lots 
                WHERE category IS NULL
                ORDER BY id
            `;
            
            const unclassifiedResult = await this.pool.query(unclassifiedQuery);
            const unclassifiedLots = unclassifiedResult.rows;
            
            console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${unclassifiedLots.length} –ª–æ—Ç–æ–≤ –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏`);
            
            let reclassifiedCount = 0;
            const categoryStats = {};
            
            for (const lot of unclassifiedLots) {
                // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é
                const detailedClassification = this.classifier.classifyDetailed(lot);
                
                if (detailedClassification.category && detailedClassification.confidence >= minConfidence) {
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                    const updateQuery = `
                        UPDATE auction_lots 
                        SET category = $1 
                        WHERE id = $2
                    `;
                    
                    await this.pool.query(updateQuery, [detailedClassification.category, lot.id]);
                    reclassifiedCount++;
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    categoryStats[detailedClassification.category] = (categoryStats[detailedClassification.category] || 0) + 1;
                }
            }
            
            console.log(`‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–æ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ: ${reclassifiedCount} –ª–æ—Ç–æ–≤`);
            
            if (Object.keys(categoryStats).length > 0) {
                console.log('\nüìã –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è):');
                Object.entries(categoryStats)
                    .sort(([,a], [,b]) => b - a)
                    .forEach(([category, count]) => {
                        console.log(`  ${category}: ${count}`);
                    });
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
            throw error;
        }
    }

    /**
     * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
     */
    async analyzeClassificationQuality() {
        try {
            console.log('üìä –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
            
            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            const categoryStatsQuery = `
                SELECT category, COUNT(*) as count
                FROM auction_lots 
                WHERE category IS NOT NULL
                GROUP BY category
                ORDER BY count DESC
            `;
            
            const categoryStatsResult = await this.pool.query(categoryStatsQuery);
            
            console.log('\nüìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:');
            categoryStatsResult.rows.forEach(row => {
                console.log(`  ${row.category}: ${row.count} –ª–æ—Ç–æ–≤`);
            });
            
            // –ü—Ä–æ—Ü–µ–Ω—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–æ—Ç–æ–≤
            const totalQuery = 'SELECT COUNT(*) as total FROM auction_lots';
            const classifiedQuery = 'SELECT COUNT(*) as classified FROM auction_lots WHERE category IS NOT NULL';
            
            const [totalResult, classifiedResult] = await Promise.all([
                this.pool.query(totalQuery),
                this.pool.query(classifiedQuery)
            ]);
            
            const total = parseInt(totalResult.rows[0].total);
            const classified = parseInt(classifiedResult.rows[0].classified);
            const percentage = (classified / total * 100).toFixed(1);
            
            console.log(`\nüìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
            console.log(`  –í—Å–µ–≥–æ –ª–æ—Ç–æ–≤: ${total}`);
            console.log(`  –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ: ${classified}`);
            console.log(`  –ü—Ä–æ—Ü–µ–Ω—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${percentage}%`);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–∞—á–µ—Å—Ç–≤–∞:', error);
            throw error;
        }
    }

    async close() {
        await this.pool.end();
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    const service = new LotClassificationService();
    
    try {
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ category –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        console.log('üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—è category...');
        const checkFieldQuery = `
            SELECT column_name 
            FROM information_schema.columns 
            WHERE table_name = 'auction_lots' 
            AND column_name = 'category'
        `;
        
        const checkResult = await service.pool.query(checkFieldQuery);
        
        if (checkResult.rows.length === 0) {
            console.log('‚ùå –ü–æ–ª–µ category –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ add-category-field-to-auction-lots.js');
            return;
        }
        
        console.log('‚úÖ –ü–æ–ª–µ category –Ω–∞–π–¥–µ–Ω–æ');
        
        // –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –≤—Å–µ –ª–æ—Ç—ã
        await service.classifyAllLots();
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
        await service.analyzeClassificationQuality();
        
        // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å –Ω–∏–∑–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é
        await service.reclassifyLowConfidenceLots(0.2);
        
        // –§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        await service.analyzeClassificationQuality();
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ main:', error);
    } finally {
        await service.close();
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
if (require.main === module) {
    main().catch(console.error);
}

module.exports = LotClassificationService;
