const { Pool } = require('pg');
const config = require('./config');

async function cleanDuplicates() {
    const pool = new Pool(config.dbConfig);
    
    try {
        console.log('üßπ –û—á–∏—â–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –º–æ–Ω–µ—Ç...');
        
        // –ù–∞–π–¥–µ–º –≤—Å–µ –¥—É–±–ª–∏–∫–∞—Ç—ã
        const duplicateQuery = `
            SELECT 
                denomination, coin_name, year, mint, coin_weight,
                COUNT(*) as count,
                STRING_AGG(id::text, ', ') as ids,
                MIN(id) as keep_id
            FROM coin_catalog 
            WHERE metal = 'Sn'
            GROUP BY denomination, coin_name, year, mint, coin_weight
            HAVING COUNT(*) > 1
            ORDER BY count DESC
        `;
        
        const duplicateResult = await pool.query(duplicateQuery);
        
        if (duplicateResult.rows.length === 0) {
            console.log('‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            return;
        }
        
        console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${duplicateResult.rows.length} –≥—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:`);
        
        for (const dup of duplicateResult.rows) {
            console.log(`\nüìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: ${dup.denomination} ${dup.coin_name} | ${dup.year || '–±–µ–∑ –≥–æ–¥–∞'} | ${dup.mint || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–≤–æ—Ä'} | –≤–µ—Å: ${dup.coin_weight || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} - ${dup.count} —à—Ç—É–∫`);
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ ID –∫—Ä–æ–º–µ —Ç–æ–≥–æ, –∫–æ—Ç–æ—Ä—ã–π –æ—Å—Ç–∞–≤–ª—è–µ–º
            const ids = dup.ids.split(', ').map(id => parseInt(id));
            const idsToDelete = ids.filter(id => id !== dup.keep_id);
            
            console.log(`   –û—Å—Ç–∞–≤–ª—è–µ–º ID: ${dup.keep_id}`);
            console.log(`   –£–¥–∞–ª—è–µ–º ID: ${idsToDelete.join(', ')}`);
            
            // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            const deleteQuery = `
                DELETE FROM coin_catalog 
                WHERE id = ANY($1)
            `;
            
            const deleteResult = await pool.query(deleteQuery, [idsToDelete]);
            console.log(`   ‚úÖ –£–¥–∞–ª–µ–Ω–æ ${deleteResult.rowCount} –∑–∞–ø–∏—Å–µ–π`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...');
        const checkQuery = `
            SELECT 
                denomination, coin_name, year, mint, coin_weight,
                COUNT(*) as count
            FROM coin_catalog 
            WHERE metal = 'Sn'
            GROUP BY denomination, coin_name, year, mint, coin_weight
            HAVING COUNT(*) > 1
        `;
        
        const checkResult = await pool.query(checkQuery);
        
        if (checkResult.rows.length === 0) {
            console.log('‚úÖ –í—Å–µ –¥—É–±–ª–∏–∫–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!');
        } else {
            console.log(`‚ùå –û—Å—Ç–∞–ª–æ—Å—å ${checkResult.rows.length} –≥—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤`);
        }
        
        // –ü–æ–∫–∞–∂–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ–ª–æ–≤—è–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç
        console.log('\nüìã –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ–ª–æ–≤—è–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç:');
        const finalQuery = `
            SELECT 
                id, denomination, coin_name, year, mint, coin_weight, condition
            FROM coin_catalog 
            WHERE metal = 'Sn'
            ORDER BY denomination, coin_name, year, mint
        `;
        
        const finalResult = await pool.query(finalQuery);
        finalResult.rows.forEach((coin, index) => {
            console.log(`${index + 1}. ID: ${coin.id} | ${coin.denomination} ${coin.coin_name} | ${coin.year || '–±–µ–∑ –≥–æ–¥–∞'} | ${coin.mint || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–≤–æ—Ä'} | –≤–µ—Å: ${coin.coin_weight || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} | ${coin.condition || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    } finally {
        await pool.end();
    }
}

cleanDuplicates();
