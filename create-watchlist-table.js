const { Pool } = require('pg');
const config = require('./config');

async function createWatchlistTable() {
    const pool = new Pool(config.dbConfig);
    
    try {
        console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã watchlist...');
        
        // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É watchlist
        await pool.query(`
            CREATE TABLE IF NOT EXISTS watchlist (
                id SERIAL PRIMARY KEY,
                user_id INTEGER REFERENCES collection_users(id) ON DELETE CASCADE,
                lot_id INTEGER REFERENCES auction_lots(id) ON DELETE CASCADE,
                added_at TIMESTAMP DEFAULT NOW(),
                UNIQUE(user_id, lot_id)
            )
        `);
        
        console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ watchlist —Å–æ–∑–¥–∞–Ω–∞');
        
        // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤...');
        
        await pool.query(`
            CREATE INDEX IF NOT EXISTS idx_watchlist_user_id ON watchlist(user_id)
        `);
        
        await pool.query(`
            CREATE INDEX IF NOT EXISTS idx_watchlist_lot_id ON watchlist(lot_id)
        `);
        
        await pool.query(`
            CREATE INDEX IF NOT EXISTS idx_watchlist_added_at ON watchlist(added_at)
        `);
        
        console.log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã...');
        
        const result = await pool.query(`
            SELECT column_name, data_type, is_nullable, column_default
            FROM information_schema.columns 
            WHERE table_name = 'watchlist' 
            ORDER BY ordinal_position
        `);
        
        console.log('üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã watchlist:');
        result.rows.forEach(row => {
            console.log(`  - ${row.column_name}: ${row.data_type} ${row.is_nullable === 'NO' ? 'NOT NULL' : 'NULL'} ${row.column_default ? `DEFAULT ${row.column_default}` : ''}`);
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        const constraints = await pool.query(`
            SELECT constraint_name, constraint_type
            FROM information_schema.table_constraints 
            WHERE table_name = 'watchlist'
        `);
        
        console.log('üîí –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã:');
        constraints.rows.forEach(row => {
            console.log(`  - ${row.constraint_name}: ${row.constraint_type}`);
        });
        
        console.log('üéâ –¢–∞–±–ª–∏—Ü–∞ watchlist —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã watchlist:', error.message);
        throw error;
    } finally {
        await pool.end();
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
if (require.main === module) {
    createWatchlistTable()
        .then(() => {
            console.log('‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
            process.exit(0);
        })
        .catch((error) => {
            console.error('‚ùå –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π:', error.message);
            process.exit(1);
        });
}

module.exports = createWatchlistTable;
