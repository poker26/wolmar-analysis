const { Pool } = require('pg');
const config = require('./config');

async function checkFilterOptions() {
    const pool = new Pool(config.dbConfig);
    
    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É filter_options...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        const structureQuery = `
            SELECT column_name, data_type, is_nullable 
            FROM information_schema.columns 
            WHERE table_name = 'filter_options' 
            ORDER BY ordinal_position
        `;
        
        const structureResult = await pool.query(structureQuery);
        console.log('üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã:');
        structureResult.rows.forEach(row => {
            console.log(`   ${row.column_name}: ${row.data_type} (${row.is_nullable === 'YES' ? 'nullable' : 'not null'})`);
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
        const dataQuery = `
            SELECT type, COUNT(*) as count 
            FROM filter_options 
            GROUP BY type 
            ORDER BY type
        `;
        
        const dataResult = await pool.query(dataQuery);
        console.log('\nüìä –î–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ:');
        dataResult.rows.forEach(row => {
            console.log(`   ${row.type}: ${row.count} –∑–∞–ø–∏—Å–µ–π`);
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        const examplesQuery = `
            SELECT type, value, display_name 
            FROM filter_options 
            ORDER BY type, display_name 
            LIMIT 10
        `;
        
        const examplesResult = await pool.query(examplesQuery);
        console.log('\nüìù –ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö:');
        examplesResult.rows.forEach(row => {
            console.log(`   ${row.type}: "${row.value}" -> "${row.display_name}"`);
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    } finally {
        await pool.end();
    }
}

checkFilterOptions();

