const { launchPuppeteer, createPage, cleanupChromeTempFiles } = require('./puppeteer-utils');

async function debugRealBidCounts() {
    console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –†–ï–ê–õ–¨–ù–û–ì–û –ö–û–õ–ò–ß–ï–°–¢–í–ê –°–¢–ê–í–û–ö');
    console.log('==========================================');
    
    const browser = await launchPuppeteer();
    const page = await createPage(browser);
    
    try {
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑–Ω—ã—Ö –ª–æ—Ç–æ–≤
        const testLots = [
            { url: 'https://www.wolmar.ru/auction/2007/6879086?category=antikvariat', name: '–õ–æ—Ç 6879086' },
            { url: 'https://www.wolmar.ru/auction/2007/6879087?category=antikvariat', name: '–õ–æ—Ç 6879087' },
            { url: 'https://www.wolmar.ru/auction/2007/6879088?category=antikvariat', name: '–õ–æ—Ç 6879088' },
            { url: 'https://www.wolmar.ru/auction/2007/6879089?category=antikvariat', name: '–õ–æ—Ç 6879089' }
        ];
        
        for (const lot of testLots) {
            console.log(`\nüìã –¢–µ—Å—Ç–∏—Ä—É–µ–º ${lot.name}...`);
            
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ—Ç–∞
            await page.goto(lot.url, { waitUntil: 'domcontentloaded', timeout: 30000 });
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è AJAX
            const urlMatch = lot.url.match(/\/auction\/(\d+)\/(\d+)/);
            if (!urlMatch) {
                console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ URL: ${lot.url}`);
                continue;
            }
            
            const auctionId = urlMatch[1];
            const lotId = urlMatch[2];
            console.log(`üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: auction_id=${auctionId}, lot_id=${lotId}`);
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º AJAX URL
            const ajaxUrl = `https://www.wolmar.ru/ajax/bids.php?auction_id=${auctionId}&lot_id=${lotId}`;
            console.log(`üåê AJAX URL: ${ajaxUrl}`);
            
            // –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ AJAX endpoint
            const response = await page.goto(ajaxUrl, { waitUntil: 'domcontentloaded', timeout: 10000 });
            if (!response || !response.ok()) {
                console.log(`‚ùå –û—à–∏–±–∫–∞ AJAX –∑–∞–ø—Ä–æ—Å–∞: ${response?.status()}`);
                continue;
            }
            
            // –ü–∞—Ä—Å–∏–º HTML —Ç–∞–±–ª–∏—Ü—ã —Å—Ç–∞–≤–æ–∫
            const bidCount = await page.evaluate(() => {
                const table = document.querySelector('table.colored');
                if (!table) {
                    console.log('–¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∞–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                    return 0;
                }
                
                const rows = table.querySelectorAll('tr');
                console.log(`–ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ: ${rows.length}`);
                
                // –°—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ (–∏—Å–∫–ª—é—á–∞—è –∑–∞–≥–æ–ª–æ–≤–æ–∫)
                let validBids = 0;
                for (let i = 1; i < rows.length; i++) {
                    const row = rows[i];
                    const cells = row.querySelectorAll('td');
                    
                    if (cells.length >= 4) {
                        const amountText = cells[0]?.textContent?.trim();
                        const bidderText = cells[2]?.textContent?.trim();
                        const timestampText = cells[3]?.textContent?.trim();
                        
                        if (amountText && bidderText && timestampText) {
                            validBids++;
                        }
                    }
                }
                
                return validBids;
            });
            
            console.log(`üí∞ –†–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–≤–æ–∫: ${bidCount}`);
            
            // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            await new Promise(resolve => setTimeout(resolve, 1000));
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    } finally {
        await cleanupChromeTempFiles();
        await browser.close();
    }
}

if (require.main === module) {
    debugRealBidCounts();
}
