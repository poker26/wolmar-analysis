/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è Wolmar Category Parser
 * 
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –ø–∞—Ä—Å–µ—Ä–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –Ω–∞ –Ω–µ–±–æ–ª—å—à–æ–º –æ–±—ä–µ–º–µ –¥–∞–Ω–Ω—ã—Ö
 */

const WolmarCategoryParser = require('./wolmar-category-parser');
const config = require('./config');

async function testCategoryParser() {
    console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Wolmar Category Parser...\n');
    
    const parser = new WolmarCategoryParser(config.dbConfig);
    
    try {
        // –¢–µ—Å—Ç–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        const testOptions = {
            maxCategories: 2,           // –¢–æ–ª—å–∫–æ 2 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            maxLotsPerCategory: 5,      // –ü–æ 5 –ª–æ—Ç–æ–≤ –≤ –∫–∞–∂–¥–æ–π
            skipExisting: true,         // –ü—Ä–æ–ø—É—Å–∫–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ
            delayBetweenLots: 1500,     // –ó–∞–¥–µ—Ä–∂–∫–∞ 1.5 —Å–µ–∫—É–Ω–¥—ã
            testMode: true              // –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
        };
        
        console.log('üìã –¢–µ—Å—Ç–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:');
        console.log(`   - –ú–∞–∫—Å–∏–º—É–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${testOptions.maxCategories}`);
        console.log(`   - –ú–∞–∫—Å–∏–º—É–º –ª–æ—Ç–æ–≤ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ${testOptions.maxLotsPerCategory}`);
        console.log(`   - –ü—Ä–æ–ø—É—Å–∫–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ: ${testOptions.skipExisting}`);
        console.log(`   - –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ª–æ—Ç–∞–º–∏: ${testOptions.delayBetweenLots}ms`);
        console.log(`   - –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: ${testOptions.testMode}\n`);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
        await parser.parseAllCategories(testOptions);
        
        console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
        
    } catch (error) {
        console.error('\n‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
        console.error('Stack trace:', error.stack);
        throw error;
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
    testCategoryParser()
        .then(() => {
            console.log('‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
            process.exit(0);
        })
        .catch((error) => {
            console.error('‚ùå –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π:', error.message);
            process.exit(1);
        });
}

module.exports = { testCategoryParser };

