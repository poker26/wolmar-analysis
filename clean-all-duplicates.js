const { Pool } = require('pg');
const config = require('./config');

async function cleanAllDuplicates() {
    const pool = new Pool(config.dbConfig);
    
    try {
        console.log('üßπ –û—á–∏—â–∞–µ–º –í–°–ï –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –º–æ–Ω–µ—Ç...');
        
        // –°–Ω–∞—á–∞–ª–∞ –ø–æ—Å–º–æ—Ç—Ä–∏–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const totalQuery = 'SELECT COUNT(*) as total FROM coin_catalog';
        const totalResult = await pool.query(totalQuery);
        console.log(`üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –∫–∞—Ç–∞–ª–æ–≥–µ: ${totalResult.rows[0].total}`);
        
        // –ù–∞–π–¥–µ–º –≤—Å–µ –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –≤—Å–µ–º –º–µ—Ç–∞–ª–ª–∞–º
        const duplicateQuery = `
            SELECT 
                denomination, coin_name, year, mint, coin_weight, metal,
                COUNT(*) as count,
                STRING_AGG(id::text, ', ') as ids,
                MIN(id) as keep_id
            FROM coin_catalog 
            GROUP BY denomination, coin_name, year, mint, coin_weight, metal
            HAVING COUNT(*) > 1
            ORDER BY count DESC, metal
        `;
        
        const duplicateResult = await pool.query(duplicateQuery);
        
        if (duplicateResult.rows.length === 0) {
            console.log('‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            return;
        }
        
        console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${duplicateResult.rows.length} –≥—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:`);
        
        let totalDeleted = 0;
        let processedGroups = 0;
        
        // –ü–æ–∫–∞–∂–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–µ—Ç–∞–ª–ª–∞–º
        const metalStats = {};
        duplicateResult.rows.forEach(dup => {
            if (!metalStats[dup.metal]) {
                metalStats[dup.metal] = { groups: 0, total: 0 };
            }
            metalStats[dup.metal].groups++;
            metalStats[dup.metal].total += dup.count - 1; // -1 –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–¥–Ω—É –æ—Å—Ç–∞–≤–ª—è–µ–º
        });
        
        console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ –º–µ—Ç–∞–ª–ª–∞–º:');
        Object.entries(metalStats).forEach(([metal, stats]) => {
            console.log(`   ${metal}: ${stats.groups} –≥—Ä—É–ø–ø, ${stats.total} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤`);
        });
        
        console.log('\nüßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É...');
        
        for (const dup of duplicateResult.rows) {
            processedGroups++;
            
            if (processedGroups % 100 === 0) {
                console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≥—Ä—É–ø–ø: ${processedGroups}/${duplicateResult.rows.length}`);
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ ID –∫—Ä–æ–º–µ —Ç–æ–≥–æ, –∫–æ—Ç–æ—Ä—ã–π –æ—Å—Ç–∞–≤–ª—è–µ–º
            const ids = dup.ids.split(', ').map(id => parseInt(id));
            const idsToDelete = ids.filter(id => id !== dup.keep_id);
            
            // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            const deleteQuery = `
                DELETE FROM coin_catalog 
                WHERE id = ANY($1)
            `;
            
            const deleteResult = await pool.query(deleteQuery, [idsToDelete]);
            totalDeleted += deleteResult.rowCount;
            
            if (processedGroups <= 10) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 10
                console.log(`   ${dup.metal} | ${dup.denomination} ${dup.coin_name} | ${dup.year || '–±–µ–∑ –≥–æ–¥–∞'} | ${dup.mint || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–≤–æ—Ä'} | –≤–µ—Å: ${dup.coin_weight || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} - —É–¥–∞–ª–µ–Ω–æ ${deleteResult.rowCount} –∏–∑ ${dup.count}`);
            }
        }
        
        console.log(`\n‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!`);
        console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≥—Ä—É–ø–ø: ${processedGroups}`);
        console.log(`   –£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${totalDeleted}`);
        
        // –ü—Ä–æ–≤–µ—Ä–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...');
        const checkQuery = `
            SELECT 
                denomination, coin_name, year, mint, coin_weight, metal,
                COUNT(*) as count
            FROM coin_catalog 
            GROUP BY denomination, coin_name, year, mint, coin_weight, metal
            HAVING COUNT(*) > 1
        `;
        
        const checkResult = await pool.query(checkQuery);
        
        if (checkResult.rows.length === 0) {
            console.log('‚úÖ –í—Å–µ –¥—É–±–ª–∏–∫–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!');
        } else {
            console.log(`‚ùå –û—Å—Ç–∞–ª–æ—Å—å ${checkResult.rows.length} –≥—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤`);
        }
        
        // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        const finalTotalQuery = 'SELECT COUNT(*) as total FROM coin_catalog';
        const finalTotalResult = await pool.query(finalTotalQuery);
        console.log(`\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
        console.log(`   –ë—ã–ª–æ –∑–∞–ø–∏—Å–µ–π: ${totalResult.rows[0].total}`);
        console.log(`   –°—Ç–∞–ª–æ –∑–∞–ø–∏—Å–µ–π: ${finalTotalResult.rows[0].total}`);
        console.log(`   –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${totalResult.rows[0].total - finalTotalResult.rows[0].total}`);
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Ç–∞–ª–ª–∞–º –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
        const metalStatsQuery = `
            SELECT metal, COUNT(*) as count
            FROM coin_catalog 
            WHERE metal IS NOT NULL
            GROUP BY metal
            ORDER BY count DESC
        `;
        
        const metalStatsResult = await pool.query(metalStatsQuery);
        console.log('\nüìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –ø–æ –º–µ—Ç–∞–ª–ª–∞–º –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏:');
        metalStatsResult.rows.forEach((row, index) => {
            console.log(`   ${index + 1}. ${row.metal}: ${row.count} –º–æ–Ω–µ—Ç`);
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
        console.error('Stack:', error.stack);
    } finally {
        await pool.end();
    }
}

cleanAllDuplicates();
