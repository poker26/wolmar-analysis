const { launchPuppeteer, createPage, cleanupChromeTempFiles } = require('./puppeteer-utils');
const fs = require('fs');

class WolmarLoginDebug {
    constructor() {
        this.browser = null;
        this.page = null;
        this.credentials = {
            username: 'hippo26',
            password: 'Gopapopa326'
        };
    }

    async init() {
        console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...');
        this.browser = await launchPuppeteer();
        this.page = await createPage(this.browser);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
        await this.page.setViewport({ width: 1280, height: 720 });
        
        console.log('‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    async debugPage() {
        try {
            console.log('üîç –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É Wolmar...');
            await this.page.goto('https://www.wolmar.ru/', {
                waitUntil: 'networkidle2',
                timeout: 30000
            });

            console.log('‚è≥ –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
            await new Promise(resolve => setTimeout(resolve, 5000));

            // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            await this.page.screenshot({ path: 'wolmar-homepage-debug.png', fullPage: true });
            console.log('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: wolmar-homepage-debug.png');

            // –ü–æ–ª—É—á–∞–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            const pageContent = await this.page.content();
            fs.writeFileSync('wolmar-homepage.html', pageContent);
            console.log('üìÑ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω: wolmar-homepage.html');

            // –ò—â–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            console.log('üîç –ò—â–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ...');
            const links = await this.page.evaluate(() => {
                const linkElements = document.querySelectorAll('a');
                return Array.from(linkElements).map(link => ({
                    text: link.textContent.trim(),
                    href: link.href,
                    className: link.className,
                    id: link.id
                })).filter(link => link.text && link.text.length > 0);
            });

            console.log('üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏:');
            links.forEach((link, index) => {
                if (link.text.toLowerCase().includes('–∞–≤—Ç–æ—Ä') || 
                    link.text.toLowerCase().includes('–≤–æ–π—Ç–∏') || 
                    link.text.toLowerCase().includes('login') ||
                    link.href.includes('login') ||
                    link.href.includes('auth')) {
                    console.log(`  ${index + 1}. "${link.text}" -> ${link.href} (class: ${link.className}, id: ${link.id})`);
                }
            });

            // –ò—â–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            console.log('üîç –ò—â–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ...');
            const buttons = await this.page.evaluate(() => {
                const buttonElements = document.querySelectorAll('button, input[type="button"], input[type="submit"], input[type="image"]');
                return Array.from(buttonElements).map(button => ({
                    text: button.textContent?.trim() || button.value || button.alt || 'no text',
                    type: button.type,
                    className: button.className,
                    id: button.id,
                    name: button.name
                }));
            });

            console.log('üîò –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏:');
            buttons.forEach((button, index) => {
                if (button.text.toLowerCase().includes('–∞–≤—Ç–æ—Ä') || 
                    button.text.toLowerCase().includes('–≤–æ–π—Ç–∏') || 
                    button.text.toLowerCase().includes('login')) {
                    console.log(`  ${index + 1}. "${button.text}" (type: ${button.type}, class: ${button.className}, id: ${button.id}, name: ${button.name})`);
                }
            });

            // –ò—â–µ–º —Ñ–æ—Ä–º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            console.log('üîç –ò—â–µ–º –≤—Å–µ —Ñ–æ—Ä–º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ...');
            const forms = await this.page.evaluate(() => {
                const formElements = document.querySelectorAll('form');
                return Array.from(formElements).map(form => ({
                    action: form.action,
                    method: form.method,
                    className: form.className,
                    id: form.id
                }));
            });

            console.log('üìù –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:');
            forms.forEach((form, index) => {
                console.log(`  ${index + 1}. action: ${form.action}, method: ${form.method} (class: ${form.className}, id: ${form.id})`);
            });

            // –ò—â–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞
            console.log('üîç –ò—â–µ–º –≤—Å–µ –ø–æ–ª—è –≤–≤–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ...');
            const inputs = await this.page.evaluate(() => {
                const inputElements = document.querySelectorAll('input');
                return Array.from(inputElements).map(input => ({
                    type: input.type,
                    name: input.name,
                    id: input.id,
                    className: input.className,
                    placeholder: input.placeholder
                }));
            });

            console.log('üìù –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—è –≤–≤–æ–¥–∞:');
            inputs.forEach((input, index) => {
                console.log(`  ${index + 1}. type: ${input.type}, name: ${input.name}, id: ${input.id} (class: ${input.className}, placeholder: ${input.placeholder})`);
            });

            // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
            console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã...');
            
            const selectors = [
                'a[href*="login"]',
                'a[href*="auth"]',
                'a:contains("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")',
                'a:contains("–í–æ–π—Ç–∏")',
                'button:contains("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")',
                'button:contains("–í–æ–π—Ç–∏")',
                'input[type="image"]',
                'form[action*="login"]',
                'input[name="login"]',
                'input[name="password"]'
            ];

            for (const selector of selectors) {
                try {
                    const elements = await this.page.$$(selector);
                    if (elements.length > 0) {
                        console.log(`‚úÖ –°–µ–ª–µ–∫—Ç–æ—Ä "${selector}" –Ω–∞–π–¥–µ–Ω ${elements.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
                    } else {
                        console.log(`‚ùå –°–µ–ª–µ–∫—Ç–æ—Ä "${selector}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                    }
                } catch (e) {
                    console.log(`‚ùå –°–µ–ª–µ–∫—Ç–æ—Ä "${selector}" –≤—ã–∑–≤–∞–ª –æ—à–∏–±–∫—É: ${e.message}`);
                }
            }

            // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ XPath
            console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º XPath —Å–µ–ª–µ–∫—Ç–æ—Ä—ã...');
            const xpathSelectors = [
                '//a[contains(text(), "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")]',
                '//a[contains(text(), "–í–æ–π—Ç–∏")]',
                '//button[contains(text(), "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")]',
                '//button[contains(text(), "–í–æ–π—Ç–∏")]',
                '//input[@type="image"]',
                '//form[@action]',
                '//input[@name="login"]',
                '//input[@name="password"]'
            ];

            for (const xpath of xpathSelectors) {
                try {
                    const elements = await this.page.$x(xpath);
                    if (elements.length > 0) {
                        console.log(`‚úÖ XPath "${xpath}" –Ω–∞–π–¥–µ–Ω ${elements.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
                    } else {
                        console.log(`‚ùå XPath "${xpath}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                    }
                } catch (e) {
                    console.log(`‚ùå XPath "${xpath}" –≤—ã–∑–≤–∞–ª –æ—à–∏–±–∫—É: ${e.message}`);
                }
            }

            return true;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', error.message);
            await this.page.screenshot({ path: 'wolmar-debug-error.png', fullPage: true });
            return false;
        }
    }

    async close() {
        if (this.browser) {
            await this.browser.close();
            console.log('üîí –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç');
        }
        
        // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã Chrome
        cleanupChromeTempFiles();
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    const debug = new WolmarLoginDebug();
    
    try {
        await debug.init();
        const success = await debug.debugPage();
        
        if (success) {
            console.log('‚úÖ –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
            console.log('üì∏ –§–∞–π–ª—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:');
            console.log('  - wolmar-homepage-debug.png (—Å–∫—Ä–∏–Ω—à–æ—Ç)');
            console.log('  - wolmar-homepage.html (HTML –∫–æ–¥)');
        } else {
            console.log('‚ùå –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ —É–¥–∞–ª—Å—è');
        }
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    } finally {
        await debug.close();
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
if (require.main === module) {
    main().catch(console.error);
}

module.exports = WolmarLoginDebug;
