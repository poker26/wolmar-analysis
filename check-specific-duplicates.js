const { Pool } = require('pg');
const isProduction = process.env.NODE_ENV === 'production' || process.env.PORT;
const config = require(isProduction ? './config.production' : './config');

async function checkSpecificDuplicates() {
    const pool = new Pool(config.dbConfig);
    const client = await pool.connect();

    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –¥—É–±–ª–∏–∫–∞—Ç–æ–≤...\n');

        // –ü—Ä–æ–≤–µ—Ä–∏–º –≥—Ä—É–ø–ø—É —Å —Å–µ—Ä–µ–±—Ä—è–Ω—ã–º–∏ –º–æ–Ω–µ—Ç–∞–º–∏ –Ω–æ–º–∏–Ω–∞–ª–æ–º "1"
        console.log('1Ô∏è‚É£ –ì—Ä—É–ø–ø–∞: –Ω–æ–º–∏–Ω–∞–ª "1", –º–µ—Ç–∞–ª–ª Ag, –≤–µ—Å NULL, –≥–æ–¥ NULL (6,527 –∑–∞–ø–∏—Å–µ–π):');
        const silverQuery = `
            SELECT id, denomination, coin_name, year, mint, coin_weight, metal, 
                   original_description, category
            FROM coin_catalog 
            WHERE denomination = '1' 
            AND metal = 'Ag'
            AND coin_weight IS NULL 
            AND year IS NULL
            ORDER BY id
            LIMIT 5
        `;
        
        const silverResults = await client.query(silverQuery);
        silverResults.rows.forEach((row, index) => {
            console.log(`\n   –ó–∞–ø–∏—Å—å ${index + 1} (ID: ${row.id}):`);
            console.log(`     –û–ø–∏—Å–∞–Ω–∏–µ: "${row.original_description?.substring(0, 200)}..."`);
        });

        // –ü—Ä–æ–≤–µ—Ä–∏–º –≥—Ä—É–ø–ø—É —Å –º–µ–¥–Ω—ã–º–∏ –º–æ–Ω–µ—Ç–∞–º–∏ –Ω–æ–º–∏–Ω–∞–ª–æ–º "1"
        console.log('\n2Ô∏è‚É£ –ì—Ä—É–ø–ø–∞: –Ω–æ–º–∏–Ω–∞–ª "1", –º–µ—Ç–∞–ª–ª Cu, –≤–µ—Å NULL, –≥–æ–¥ NULL (1,985 –∑–∞–ø–∏—Å–µ–π):');
        const copperQuery = `
            SELECT id, denomination, coin_name, year, mint, coin_weight, metal, 
                   original_description, category
            FROM coin_catalog 
            WHERE denomination = '1' 
            AND metal = 'Cu'
            AND coin_weight IS NULL 
            AND year IS NULL
            ORDER BY id
            LIMIT 5
        `;
        
        const copperResults = await client.query(copperQuery);
        copperResults.rows.forEach((row, index) => {
            console.log(`\n   –ó–∞–ø–∏—Å—å ${index + 1} (ID: ${row.id}):`);
            console.log(`     –û–ø–∏—Å–∞–Ω–∏–µ: "${row.original_description?.substring(0, 200)}..."`);
        });

        // –ü—Ä–æ–≤–µ—Ä–∏–º –≥—Ä—É–ø–ø—É —Å –º–µ–¥–∞–ª—è–º–∏
        console.log('\n3Ô∏è‚É£ –ì—Ä—É–ø–ø–∞ –º–µ–¥–∞–ª–µ–π: "–ú–µ–¥–∞–ª—å –ø–∞–º—è—Ç–Ω–∞—è –ë–æ—Ä–∏—Å –ì—Ä–æ–º–æ–≤. –†–æ—Å—Å–∏—è Ag." (106 –∑–∞–ø–∏—Å–µ–π):');
        const medalQuery = `
            SELECT id, denomination, coin_name, year, mint, coin_weight, metal, 
                   original_description, category
            FROM coin_catalog 
            WHERE original_description = '–ú–µ–¥–∞–ª—å –ø–∞–º—è—Ç–Ω–∞—è –ë–æ—Ä–∏—Å –ì—Ä–æ–º–æ–≤. –†–æ—Å—Å–∏—è Ag.'
            ORDER BY id
            LIMIT 5
        `;
        
        const medalResults = await client.query(medalQuery);
        medalResults.rows.forEach((row, index) => {
            console.log(`\n   –ó–∞–ø–∏—Å—å ${index + 1} (ID: ${row.id}):`);
            console.log(`     –û–ø–∏—Å–∞–Ω–∏–µ: "${row.original_description}"`);
        });

        // –ü—Ä–æ–≤–µ—Ä–∏–º –≥—Ä—É–ø–ø—É —Å —é–≤–µ–ª–∏—Ä–Ω—ã–º–∏ –∏–∑–¥–µ–ª–∏—è–º–∏
        console.log('\n4Ô∏è‚É£ –ì—Ä—É–ø–ø–∞ —é–≤–µ–ª–∏—Ä–Ω—ã—Ö –∏–∑–¥–µ–ª–∏–π: "–°–µ—Ä—å–≥–∏ —Å —Ç–∞–Ω–∑–∞–Ω–∏—Ç–∞–º–∏ –∏ –±—Ä–∏–ª–ª–∏–∞–Ω—Ç–∞–º–∏ Au." (41 –∑–∞–ø–∏—Å—å):');
        const jewelryQuery = `
            SELECT id, denomination, coin_name, year, mint, coin_weight, metal, 
                   original_description, category
            FROM coin_catalog 
            WHERE original_description = '–°–µ—Ä—å–≥–∏ —Å —Ç–∞–Ω–∑–∞–Ω–∏—Ç–∞–º–∏ –∏ –±—Ä–∏–ª–ª–∏–∞–Ω—Ç–∞–º–∏ Au. | –°–µ—Ä—å–≥–∏ —Å —Ç–∞–Ω–∑–∞–Ω–∏—Ç–∞–º–∏ –∏ –±—Ä–∏–ª–ª–∏–∞–Ω—Ç–∞–º–∏. –ó–æ–ª–æ—Ç–æ 585 –ø—Ä–æ–±—ã. –í–µ—Å - 1,98 –≥—Ä., –≤—ã—Å–æ—Ç–∞ - 1 —Å–º.'
            ORDER BY id
            LIMIT 5
        `;
        
        const jewelryResults = await client.query(jewelryQuery);
        jewelryResults.rows.forEach((row, index) => {
            console.log(`\n   –ó–∞–ø–∏—Å—å ${index + 1} (ID: ${row.id}):`);
            console.log(`     –û–ø–∏—Å–∞–Ω–∏–µ: "${row.original_description}"`);
        });

        // –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —Ä–∞–∑–ª–∏—á–∏—è –≤ –æ–ø–∏—Å–∞–Ω–∏—è—Ö –≤–Ω—É—Ç—Ä–∏ –≥—Ä—É–ø–ø
        console.log('\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –æ–ø–∏—Å–∞–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ —Å–µ—Ä–µ–±—Ä—è–Ω—ã—Ö –º–æ–Ω–µ—Ç:');
        const uniqueDescQuery = `
            SELECT 
                COUNT(*) as total_records,
                COUNT(DISTINCT original_description) as unique_descriptions
            FROM coin_catalog 
            WHERE denomination = '1' 
            AND metal = 'Ag'
            AND coin_weight IS NULL 
            AND year IS NULL
        `;
        
        const uniqueDescResult = await client.query(uniqueDescQuery);
        const stats = uniqueDescResult.rows[0];
        console.log(`   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${stats.total_records}`);
        console.log(`   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π: ${stats.unique_descriptions}`);
        console.log(`   –ü—Ä–æ—Ü–µ–Ω—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏: ${((stats.unique_descriptions / stats.total_records) * 100).toFixed(1)}%`);

        // –ü–æ—Å–º–æ—Ç—Ä–∏–º –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π
        console.log('\n6Ô∏è‚É£ –ü—Ä–∏–º–µ—Ä—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ —Å–µ—Ä–µ–±—Ä—è–Ω—ã—Ö –º–æ–Ω–µ—Ç:');
        const uniqueExamplesQuery = `
            SELECT DISTINCT original_description
            FROM coin_catalog 
            WHERE denomination = '1' 
            AND metal = 'Ag'
            AND coin_weight IS NULL 
            AND year IS NULL
            ORDER BY original_description
            LIMIT 10
        `;
        
        const uniqueExamplesResult = await client.query(uniqueExamplesQuery);
        uniqueExamplesResult.rows.forEach((row, index) => {
            console.log(`   ${index + 1}. "${row.original_description}"`);
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:', error);
    } finally {
        client.release();
        await pool.end();
    }
}

checkSpecificDuplicates();
