const { Pool } = require('pg');
const config = require('./config');

async function cleanDuplicatesBatch() {
    const pool = new Pool(config.dbConfig);
    
    try {
        console.log('üßπ –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–∞–∫–µ—Ç–∞–º–∏...');
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –≥—Ä—É–ø–ø–∞–º
        console.log('\nüìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –≥—Ä—É–ø–ø–∞–º...');
        
        const analyzeQuery = `
            SELECT 
                denomination,
                metal,
                coin_weight,
                year,
                COUNT(*) as count
            FROM coin_catalog 
            WHERE denomination IS NOT NULL
            AND metal IS NOT NULL
            GROUP BY denomination, metal, coin_weight, year
            HAVING COUNT(*) > 1
            ORDER BY count DESC
            LIMIT 50
        `;
        
        const analyzeResult = await pool.query(analyzeQuery);
        
        console.log('\nüîç –¢–æ–ø-50 –≥—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:');
        analyzeResult.rows.forEach((row, index) => {
            console.log(`${index + 1}. "${row.denomination}" ${row.metal} ${row.coin_weight}g ${row.year}–≥: ${row.count} –∑–∞–ø–∏—Å–µ–π`);
        });
        
        // –ü–æ–¥—Å—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        const totalDuplicatesQuery = `
            SELECT COUNT(*) as total_duplicates
            FROM (
                SELECT denomination, metal, coin_weight, year
                FROM coin_catalog 
                WHERE denomination IS NOT NULL
                AND metal IS NOT NULL
                GROUP BY denomination, metal, coin_weight, year
                HAVING COUNT(*) > 1
            ) as duplicates
        `;
        
        const totalResult = await pool.query(totalDuplicatesQuery);
        const totalDuplicates = totalResult.rows[0].total_duplicates;
        
        console.log(`\nüìà –í—Å–µ–≥–æ –≥—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${totalDuplicates}`);
        
        // –ü–æ–¥—Å—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        const recordsToDeleteQuery = `
            SELECT SUM(count - 1) as records_to_delete
            FROM (
                SELECT COUNT(*) as count
                FROM coin_catalog 
                WHERE denomination IS NOT NULL
                AND metal IS NOT NULL
                GROUP BY denomination, metal, coin_weight, year
                HAVING COUNT(*) > 1
            ) as duplicates
        `;
        
        const deleteResult = await pool.query(recordsToDeleteQuery);
        const recordsToDelete = deleteResult.rows[0].records_to_delete;
        
        console.log(`üìâ –ó–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ${recordsToDelete}`);
        
        if (recordsToDelete > 100000) {
            console.log('\n‚ö†Ô∏è  –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!');
            console.log('   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–¥–∞–ª—è—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –≥—Ä—É–ø–ø–∞–º.');
            
            // –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ –±–æ–ª—å—à–∏–µ –≥—Ä—É–ø–ø—ã –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            console.log('\nüóëÔ∏è  –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏–∑ —Ç–æ–ø-10 –≥—Ä—É–ø–ø...');
            
            const topGroupsQuery = `
                SELECT 
                    denomination,
                    metal,
                    coin_weight,
                    year,
                    COUNT(*) as count
                FROM coin_catalog 
                WHERE denomination IS NOT NULL
                AND metal IS NOT NULL
                GROUP BY denomination, metal, coin_weight, year
                HAVING COUNT(*) > 1
                ORDER BY count DESC
                LIMIT 10
            `;
            
            const topGroupsResult = await pool.query(topGroupsQuery);
            
            let totalDeleted = 0;
            
            for (const group of topGroupsResult.rows) {
                console.log(`\nüóëÔ∏è  –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã: "${group.denomination}" ${group.metal} ${group.coin_weight}g ${group.year}–≥ (${group.count} –∑–∞–ø–∏—Å–µ–π)`);
                
                const deleteGroupQuery = `
                    DELETE FROM coin_catalog 
                    WHERE id IN (
                        SELECT id 
                        FROM (
                            SELECT id,
                                   ROW_NUMBER() OVER (
                                       PARTITION BY denomination, metal, coin_weight, year 
                                       ORDER BY id ASC
                                   ) as rn
                            FROM coin_catalog 
                            WHERE denomination = $1
                            AND metal = $2
                            AND (coin_weight = $3 OR (coin_weight IS NULL AND $3 IS NULL))
                            AND (year = $4 OR (year IS NULL AND $4 IS NULL))
                        ) as ranked
                        WHERE rn > 1
                    )
                `;
                
                const deleteGroupResult = await pool.query(deleteGroupQuery, [
                    group.denomination,
                    group.metal,
                    group.coin_weight,
                    group.year
                ]);
                
                totalDeleted += deleteGroupResult.rowCount;
                console.log(`   –£–¥–∞–ª–µ–Ω–æ: ${deleteGroupResult.rowCount} –∑–∞–ø–∏—Å–µ–π`);
            }
            
            console.log(`\n‚úÖ –í—Å–µ–≥–æ —É–¥–∞–ª–µ–Ω–æ: ${totalDeleted} –∑–∞–ø–∏—Å–µ–π`);
            
        } else {
            console.log('\nüóëÔ∏è  –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥—É–±–ª–∏–∫–∞—Ç—ã...');
            
            const deleteQuery = `
                DELETE FROM coin_catalog 
                WHERE id IN (
                    SELECT id 
                    FROM (
                        SELECT id,
                               ROW_NUMBER() OVER (
                                   PARTITION BY denomination, metal, coin_weight, year 
                                   ORDER BY id ASC
                               ) as rn
                        FROM coin_catalog 
                        WHERE denomination IS NOT NULL
                        AND metal IS NOT NULL
                    ) as ranked
                    WHERE rn > 1
                )
            `;
            
            const deleteStartTime = Date.now();
            const deleteResult2 = await pool.query(deleteQuery);
            const deleteEndTime = Date.now();
            
            console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!`);
            console.log(`   –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${deleteResult2.rowCount}`);
            console.log(`   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${(deleteEndTime - deleteStartTime) / 1000} —Å–µ–∫`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...');
        
        const finalCheckQuery = `
            SELECT 
                denomination,
                metal,
                coin_weight,
                year,
                COUNT(*) as count
            FROM coin_catalog 
            WHERE denomination IS NOT NULL
            AND metal IS NOT NULL
            GROUP BY denomination, metal, coin_weight, year
            HAVING COUNT(*) > 1
            ORDER BY count DESC
            LIMIT 10
        `;
        
        const finalResult = await pool.query(finalCheckQuery);
        
        if (finalResult.rows.length === 0) {
            console.log('‚úÖ –î—É–±–ª–∏–∫–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!');
        } else {
            console.log('‚ö†Ô∏è  –û—Å—Ç–∞–ª–∏—Å—å –¥—É–±–ª–∏–∫–∞—Ç—ã:');
            finalResult.rows.forEach((row, index) => {
                console.log(`${index + 1}. "${row.denomination}" ${row.metal} ${row.coin_weight}g ${row.year}–≥: ${row.count} –∑–∞–ø–∏—Å–µ–π`);
            });
        }
        
        // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        const finalStatsQuery = `
            SELECT COUNT(*) as total_records
            FROM coin_catalog
        `;
        
        const finalStats = await pool.query(finalStatsQuery);
        console.log(`\nüìä –ò—Ç–æ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –∫–∞—Ç–∞–ª–æ–≥–µ: ${finalStats.rows[0].total_records}`);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    } finally {
        await pool.end();
    }
}

cleanDuplicatesBatch();
