const { launchPuppeteer, createPage, cleanupChromeTempFiles } = require('./puppeteer-utils');

async function debugBidTable() {
    console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –¢–ê–ë–õ–ò–¶–´ –°–¢–ê–í–û–ö');
    console.log('==============================');
    
    const browser = await launchPuppeteer();
    const page = await createPage(browser);
    
    try {
        console.log('\n1Ô∏è‚É£ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ—Ç–∞...');
        const testUrl = 'https://www.wolmar.ru/auction/2070/7226578?category=bony';
        await page.goto(testUrl, { waitUntil: 'domcontentloaded', timeout: 30000 });
        
        console.log('\n2Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã —Å—Ç–∞–≤–æ–∫...');
        const tableInfo = await page.evaluate(() => {
            const info = {
                tables: [],
                bidTable: null
            };
            
            // –ò—â–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            const allTables = document.querySelectorAll('table');
            console.log(`–ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: ${allTables.length}`);
            
            allTables.forEach((table, index) => {
                const tbody = table.querySelector('tbody');
                const rows = tbody ? tbody.querySelectorAll('tr') : table.querySelectorAll('tr');
                
                info.tables.push({
                    index: index,
                    hasTbody: !!tbody,
                    rowCount: rows.length,
                    firstRowCells: rows.length > 0 ? rows[0].querySelectorAll('td').length : 0,
                    firstRowText: rows.length > 0 ? rows[0].textContent.trim().substring(0, 100) : ''
                });
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å—Ç–∞–≤–∫–∏
                if (rows.length > 0) {
                    const firstRowText = rows[0].textContent.trim();
                    if (firstRowText.includes('—Ä—É–±') || firstRowText.includes('‚ÇΩ')) {
                        info.bidTable = {
                            index: index,
                            rowCount: rows.length,
                            sampleRows: []
                        };
                        
                        // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏ –∫–∞–∫ –æ–±—Ä–∞–∑–µ—Ü
                        for (let i = 0; i < Math.min(3, rows.length); i++) {
                            const cells = rows[i].querySelectorAll('td');
                            const rowData = {
                                cellCount: cells.length,
                                cells: []
                            };
                            
                            cells.forEach((cell, cellIndex) => {
                                rowData.cells.push({
                                    index: cellIndex,
                                    text: cell.textContent.trim(),
                                    html: cell.innerHTML.trim()
                                });
                            });
                            
                            info.bidTable.sampleRows.push(rowData);
                        }
                    }
                }
            });
            
            return info;
        });
        
        console.log('\n3Ô∏è‚É£ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:');
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: ${tableInfo.tables.length}`);
        
        tableInfo.tables.forEach(table => {
            console.log(`   –¢–∞–±–ª–∏—Ü–∞ ${table.index}: ${table.rowCount} —Å—Ç—Ä–æ–∫, ${table.firstRowCells} –∫–æ–ª–æ–Ω–æ–∫`);
            console.log(`   –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: ${table.firstRowText}`);
        });
        
        if (tableInfo.bidTable) {
            console.log(`\nüí∞ –ù–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —Å—Ç–∞–≤–æ–∫ (–∏–Ω–¥–µ–∫—Å ${tableInfo.bidTable.index}):`);
            console.log(`üìä –°—Ç—Ä–æ–∫: ${tableInfo.bidTable.rowCount}`);
            
            tableInfo.bidTable.sampleRows.forEach((row, rowIndex) => {
                console.log(`\n   –°—Ç—Ä–æ–∫–∞ ${rowIndex + 1} (${row.cellCount} –∫–æ–ª–æ–Ω–æ–∫):`);
                row.cells.forEach((cell, cellIndex) => {
                    console.log(`     –ö–æ–ª–æ–Ω–∫–∞ ${cellIndex}: "${cell.text}"`);
                });
            });
        } else {
            console.log('‚ùå –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∞–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    } finally {
        await cleanupChromeTempFiles();
        await browser.close();
    }
}

if (require.main === module) {
    debugBidTable();
}
