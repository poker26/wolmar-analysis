const { Pool } = require('pg');
const config = require('./config');

const pool = new Pool(config.dbConfig);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç–∞–≤–∫–∏ –æ–¥–Ω–æ–≥–æ –ª–æ—Ç–∞ (—Ç–æ—á–Ω–∞—è –∫–æ–ø–∏—è –∏–∑ server.js)
async function parseSingleLotBid(lotUrl) {
    const puppeteer = require('puppeteer-core');
    
    const browser = await puppeteer.launch({
        executablePath: 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe',
        headless: true,
        args: ['--no-sandbox', '--disable-setuid-sandbox',
            '--user-data-dir=/tmp/chrome-temp-9g8ln',
            '--disable-metrics',
            '--disable-metrics-reporting',
            '--disable-background-mode',
            '--disable-background-timer-throttling',
            '--disable-renderer-backgrounding',
            '--disable-backgrounding-occluded-windows',
            '--disable-logging',
            '--disable-gpu-logging',
            '--disable-features=TranslateUI,BlinkGenPropertyTrees,VizDisplayCompositor']
    });
    
    try {
        const page = await browser.newPage();
        await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36');
        
        console.log(`üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ—Ç: ${lotUrl}`);
        await page.goto(lotUrl, { waitUntil: 'domcontentloaded', timeout: 30000 });
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        const lotData = await page.evaluate(() => {
            const data = {};
            
            // –ù–æ–º–µ—Ä –ª–æ—Ç–∞ - –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ h5
            const lotTitle = document.querySelector('h5');
            if (lotTitle) {
                const match = lotTitle.textContent.match(/–õ–æ—Ç\s*‚Ññ\s*(\d+)/i);
                if (match) {
                    data.lotNumber = parseInt(match[1]);
                }
            }
            
            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ—Ä–≥–∞—Ö
            const valuesDiv = document.querySelectorAll('.values')[1];
            if (valuesDiv) {
                const valuesText = valuesDiv.textContent;
                
                // –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞
                const bidMatch = valuesText.match(/–°—Ç–∞–≤–∫–∞:\s*(\d+(?:\s?\d+)*(?:[.,]\d+)?)\s*—Ä—É–±/i);
                if (bidMatch) {
                    data.winningBid = bidMatch[1].replace(/\s/g, '').replace(',', '.');
                }
                
                // –õ–∏–¥–µ—Ä
                const leaderMatch = valuesText.match(/–õ–∏–¥–µ—Ä:\s*([a-zA-Z0-9_–ê-–Ø–∞-—è]+)/i);
                if (leaderMatch) {
                    data.winnerLogin = leaderMatch[1];
                }
            }
            
            return data;
        });
        
        console.log(`üìä –ü–∞—Ä—Å–∏–Ω–≥ –ª–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω:`, lotData);
        return lotData;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ª–æ—Ç–∞:', error);
        return null;
    } finally {
        await browser.close();
    }
}

async function testUpdateLot113() {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ—Ç–µ
        const lotResult = await pool.query(`
            SELECT id, lot_number, auction_number, source_url, winning_bid, winner_login
            FROM auction_lots 
            WHERE lot_number = '113' AND auction_number = '970'
            LIMIT 1
        `);
        
        if (lotResult.rows.length === 0) {
            console.log('‚ùå –õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        const lot = lotResult.rows[0];
        console.log('üìä –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ª–æ—Ç–∞:', {
            id: lot.id,
            lot_number: lot.lot_number,
            auction_number: lot.auction_number,
            winning_bid: lot.winning_bid,
            winner_login: lot.winner_login,
            source_url: lot.source_url
        });
        
        // –ü–∞—Ä—Å–∏–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        console.log('üîÑ –ü–∞—Ä—Å–∏–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...');
        const bidData = await parseSingleLotBid(lot.source_url);
        
        if (bidData) {
            console.log('üìä –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:', bidData);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            const updateResult = await pool.query(`
                UPDATE auction_lots 
                SET winning_bid = $1, 
                    winner_login = $2
                WHERE id = $3
            `, [bidData.winningBid, bidData.winnerLogin, lot.id]);
            
            if (updateResult.rowCount > 0) {
                console.log('‚úÖ –õ–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!');
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                const checkResult = await pool.query(`
                    SELECT winning_bid, winner_login
                    FROM auction_lots 
                    WHERE id = $1
                `, [lot.id]);
                
                console.log('üìä –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', checkResult.rows[0]);
            } else {
                console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ª–æ—Ç');
            }
        } else {
            console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    } finally {
        await pool.end();
    }
}

testUpdateLot113();
