const { launchPuppeteer, createPage, cleanupChromeTempFiles } = require('./puppeteer-utils');
const fs = require('fs');

class WolmarBidPlacer {
    constructor() {
        this.browser = null;
        this.page = null;
        this.credentials = {
            username: 'hippo26',
            password: 'Gopapopa326'
        };
    }

    async init() {
        console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...');
        this.browser = await launchPuppeteer();
        this.page = await createPage(this.browser);
        
        await this.page.setViewport({ width: 1280, height: 720 });
        console.log('‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    async login() {
        try {
            console.log('üîç –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É Wolmar...');
            await this.page.goto('https://www.wolmar.ru/', {
                waitUntil: 'networkidle2',
                timeout: 30000
            });

            // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            await new Promise(resolve => setTimeout(resolve, 3000));

            console.log('üîç –ò—â–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
            
            // –ò—â–µ–º –ø–æ–ª—è –ø–æ —Ç–æ—á–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º –∏–∑ –∫–æ–¥–∞ —Ñ–æ—Ä–º—ã
            const usernameField = await this.page.$('input[name="login"]');
            const passwordField = await this.page.$('input[name="password"]');
            
            if (!usernameField || !passwordField) {
                console.log('‚ùå –ü–æ–ª—è —Ñ–æ—Ä–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                return false;
            }

            console.log('‚úÖ –ü–æ–ª—è —Ñ–æ—Ä–º—ã –Ω–∞–π–¥–µ–Ω—ã');
            console.log('üìù –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
            
            await usernameField.type(this.credentials.username);
            await passwordField.type(this.credentials.password);

            console.log('üîç –ò—â–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏...');
            
            // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ (input type="image")
            const submitButton = await this.page.$('input[type="image"]');
            
            if (!submitButton) {
                console.log('‚ùå –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                return false;
            }

            console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–π–¥–µ–Ω–∞');
            console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
            await submitButton.click();

            // –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
            await new Promise(resolve => setTimeout(resolve, 5000));

            console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–∞
            const pageContent = await this.page.content();
            const successIndicators = [
                '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç',
                '–õ–æ—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞',
                '–ò—Å—Ç–æ—Ä–∏—è –≤—ã–∏–≥—Ä—ã—à–µ–π',
                '–í—ã—Ö–æ–¥'
            ];

            const isLoggedIn = successIndicators.some(indicator => pageContent.includes(indicator));

            if (isLoggedIn) {
                console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!');
                return true;
            } else {
                console.log('‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å');
                return false;
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error.message);
            return false;
        }
    }

    async placeBid(lotUrl, bidAmount, useAutoBid = false) {
        try {
            console.log(`üîç –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ—Ç–∞: ${lotUrl}`);
            await this.page.goto(lotUrl, {
                waitUntil: 'networkidle2',
                timeout: 30000
            });

            // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            await new Promise(resolve => setTimeout(resolve, 3000));

            // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ª–æ—Ç–∞
            await this.page.screenshot({ path: 'wolmar-lot-page.png', fullPage: true });
            console.log('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ª–æ—Ç–∞: wolmar-lot-page.png');

            console.log('üîç –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞–≤–∫–∞—Ö...');
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞–≤–∫—É
            const currentBid = await this.page.evaluate(() => {
                const sumElement = document.getElementById('sum');
                return sumElement ? sumElement.textContent.trim() : null;
            });

            // –ü–æ–ª—É—á–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É
            const minBid = await this.page.evaluate(() => {
                const minBidElement = document.getElementById('min_bid');
                return minBidElement ? minBidElement.textContent.trim() : null;
            });

            console.log(`üìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: ${currentBid} —Ä—É–±.`);
            console.log(`üìä –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: ${minBid} —Ä—É–±.`);

            // üö® –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¢–û–õ–¨–ö–û –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É!
            const safeBidAmount = parseInt(minBid) || 2;
            if (bidAmount !== safeBidAmount) {
                console.log(`‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ó–∞–ø—Ä–æ—à–µ–Ω–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ${bidAmount} —Ä—É–±. –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω—É—é –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É ${safeBidAmount} —Ä—É–±.`);
            }
            const finalBidAmount = safeBidAmount;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ä–º–∞ —Å—Ç–∞–≤–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
            const bidForm = await this.page.$('form#bid');
            
            if (!bidForm) {
                console.log('‚ùå –§–æ—Ä–º–∞ —Å—Ç–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∏–ª–∏ –ª–æ—Ç –∑–∞–∫—Ä—ã—Ç');
                return false;
            }

            console.log('‚úÖ –§–æ—Ä–º–∞ —Å—Ç–∞–≤–∫–∏ –Ω–∞–π–¥–µ–Ω–∞');

            // –ò—â–µ–º –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —Å—Ç–∞–≤–∫–∏
            const bidInput = await this.page.$('input[name="value"]');
            
            if (!bidInput) {
                console.log('‚ùå –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —Å—Ç–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
                return false;
            }

            console.log('‚úÖ –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —Å—Ç–∞–≤–∫–∏ –Ω–∞–π–¥–µ–Ω–æ');
            console.log(`üí∞ –†–∞–∑–º–µ—â–∞–µ–º –ë–ï–ó–û–ü–ê–°–ù–£–Æ —Å—Ç–∞–≤–∫—É: ${finalBidAmount} —Ä—É–±.`);

            // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –∏ –≤–≤–æ–¥–∏–º –Ω–æ–≤—É—é —Å—Ç–∞–≤–∫—É
            await bidInput.click();
            await bidInput.evaluate(input => input.select());
            await bidInput.type(finalBidAmount.toString());

            // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –≤–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–±–∏–¥
            if (useAutoBid) {
                console.log('ü§ñ –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–±–∏–¥...');
                const autoBidCheckbox = await this.page.$('input[name="auto"]');
                if (autoBidCheckbox) {
                    const isChecked = await autoBidCheckbox.evaluate(cb => cb.checked);
                    if (!isChecked) {
                        await autoBidCheckbox.click();
                        console.log('‚úÖ –ê–≤—Ç–æ–±–∏–¥ –≤–∫–ª—é—á–µ–Ω');
                    }
                }
            }

            // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ñ–æ—Ä–º—ã
            await this.page.screenshot({ path: 'wolmar-bid-form-filled.png', fullPage: true });
            console.log('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ñ–æ—Ä–º—ã: wolmar-bid-form-filled.png');

            // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞–≤–∫–∏
            const submitButton = await this.page.$('input[type="submit"][value="—Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É"]');
            
            if (!submitButton) {
                console.log('‚ùå –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                return false;
            }

            console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–π–¥–µ–Ω–∞');
            console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞–≤–∫—É...');
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É
            await submitButton.click();

            // –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞–≤–∫–∏
            await new Promise(resolve => setTimeout(resolve, 5000));

            console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏...');
            
            // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            await this.page.screenshot({ path: 'wolmar-bid-result.png', fullPage: true });
            console.log('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: wolmar-bid-result.png');

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å–ø–µ—à–Ω–æ –ª–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∞ —Å—Ç–∞–≤–∫–∞
            const pageContent = await this.page.content();
            
            if (pageContent.includes('–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞') || pageContent.includes('—Å—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞')) {
                console.log('‚úÖ –°—Ç–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–∞!');
                return true;
            } else {
                console.log('‚ùå –°—Ç–∞–≤–∫–∞ –Ω–µ –±—ã–ª–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∞');
                return false;
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ —Å—Ç–∞–≤–∫–∏:', error.message);
            await this.page.screenshot({ path: 'wolmar-bid-error.png', fullPage: true });
            return false;
        }
    }

    async close() {
        if (this.browser) {
            await this.browser.close();
            console.log('üîí –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç');
        }
        cleanupChromeTempFiles();
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    const bidPlacer = new WolmarBidPlacer();
    
    try {
        await bidPlacer.init();
        
        // –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è
        const loginSuccess = await bidPlacer.login();
        if (!loginSuccess) {
            console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è');
            return;
        }

        // –†–∞–∑–º–µ—â–∞–µ–º —Å—Ç–∞–≤–∫—É –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–º –ª–æ—Ç–µ
        const lotUrl = 'https://www.wolmar.ru/auction/2140/7609081';
        const bidAmount = 2; // –¢–û–õ–¨–ö–û –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ 2 —Ä—É–±–ª—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!
        const useAutoBid = false; // –ë–µ–∑ –∞–≤—Ç–æ–±–∏–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∞

        console.log(`üéØ –†–∞–∑–º–µ—â–∞–µ–º —Å—Ç–∞–≤–∫—É ${bidAmount} —Ä—É–±. –Ω–∞ –ª–æ—Ç: ${lotUrl}`);
        
        const bidSuccess = await bidPlacer.placeBid(lotUrl, bidAmount, useAutoBid);
        
        if (bidSuccess) {
            console.log('üéâ –°—Ç–∞–≤–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
        } else {
            console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Å—Ç–∞–≤–∫—É');
        }
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    } finally {
        await bidPlacer.close();
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
if (require.main === module) {
    main().catch(console.error);
}

module.exports = WolmarBidPlacer;
