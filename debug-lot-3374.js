const { Pool } = require('pg');
const config = require('./config.js');
const ImprovedPredictionsGenerator = require('./improved-predictions-generator.js');

async function debugLot3374() {
    const pool = new Pool(config.dbConfig);
    
    try {
        console.log('üîç –û—Ç–ª–∞–¥–∫–∞ –ª–æ—Ç–∞ 3374...');
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ª–æ—Ç–∞ 3374
        const lotResult = await pool.query(`
            SELECT id, lot_number, auction_number, coin_description, metal, condition, year, weight, letters, winning_bid
            FROM auction_lots 
            WHERE lot_number = '3374' AND auction_number = '970'
        `);
        
        if (lotResult.rows.length === 0) {
            console.log('‚ùå –õ–æ—Ç 3374 –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        const lot = lotResult.rows[0];
        console.log('üìã –î–∞–Ω–Ω—ã–µ –ª–æ—Ç–∞ 3374:', lot);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
        const generator = new ImprovedPredictionsGenerator();
        await generator.init();
        
        try {
            // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –≤ collection-price-service
            const adaptedData = {
                id: lot.id,
                lot_number: lot.lot_number,
                auction_number: lot.auction_number,
                metal: lot.metal,
                condition: lot.condition,
                weight: lot.weight,
                year: lot.year,
                letters: lot.letters,
                coin_description: lot.coin_description
            };
            
            console.log('üîß –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', adaptedData);
            
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã—Ö –ª–æ—Ç–æ–≤
            console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã—Ö –ª–æ—Ç–æ–≤...');
            const similarLots = await generator.findSimilarLots(adaptedData);
            console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã—Ö –ª–æ—Ç–æ–≤: ${similarLots.length}`);
            
            if (similarLots.length > 0) {
                console.log('üìã –ê–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ –ª–æ—Ç—ã:');
                similarLots.forEach((similar, index) => {
                    console.log(`  ${index + 1}. –õ–æ—Ç ${similar.lot_number} (–∞—É–∫—Ü–∏–æ–Ω ${similar.auction_number}): ${similar.winning_bid}‚ÇΩ`);
                });
            }
            
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑
            console.log('üîÆ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑...');
            const prediction = await generator.predictPrice(adaptedData);
            console.log('üìà –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞:', prediction);
            
        } finally {
            await generator.close();
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    } finally {
        await pool.end();
    }
}

debugLot3374();
