const { Pool } = require('pg');
const config = require('./config');

const pool = new Pool(config.dbConfig);

async function addParsingNumberField() {
    try {
        console.log('üîß –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ parsing_number –≤ —Ç–∞–±–ª–∏—Ü—É auction_lots...');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ parsing_number
        const alterTableQuery = `
            ALTER TABLE auction_lots 
            ADD COLUMN IF NOT EXISTS parsing_number INTEGER;
        `;
        
        await pool.query(alterTableQuery);
        console.log('‚úÖ –ü–æ–ª–µ parsing_number –¥–æ–±–∞–≤–ª–µ–Ω–æ');
        
        // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        await pool.query('CREATE INDEX IF NOT EXISTS idx_auction_lots_parsing_number ON auction_lots(parsing_number)');
        console.log('‚úÖ –ò–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–Ω');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏: parsing_number = auction_number (–≤—Ä–µ–º–µ–Ω–Ω–æ)
        const updateQuery = `
            UPDATE auction_lots 
            SET parsing_number = auction_number::integer 
            WHERE parsing_number IS NULL;
        `;
        
        const updateResult = await pool.query(updateQuery);
        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${updateResult.rowCount} –∑–∞–ø–∏—Å–µ–π`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const statsQuery = `
            SELECT 
                auction_number,
                parsing_number,
                COUNT(*) as lots_count
            FROM auction_lots 
            WHERE auction_number IS NOT NULL
            GROUP BY auction_number, parsing_number
            ORDER BY auction_number DESC
            LIMIT 10;
        `;
        
        const statsResult = await pool.query(statsQuery);
        console.log('\nüìä –¢–µ–∫—É—â–∏–µ –Ω–æ–º–µ—Ä–∞ –∞—É–∫—Ü–∏–æ–Ω–æ–≤:');
        statsResult.rows.forEach(row => {
            console.log(`  –ê—É–∫—Ü–∏–æ–Ω ${row.auction_number} (–ø–∞—Ä—Å–∏–Ω–≥: ${row.parsing_number}): ${row.lots_count} –ª–æ—Ç–æ–≤`);
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è:', error);
    } finally {
        await pool.end();
    }
}

addParsingNumberField();
