const { launchPuppeteer, createPage, cleanupChromeTempFiles } = require('./puppeteer-utils');
const fs = require('fs');

class WolmarLoginTest {
    constructor() {
        this.browser = null;
        this.page = null;
        this.credentials = {
            username: 'hippo26',
            password: 'Gopapopa326'
        };
    }

    async init() {
        console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...');
        this.browser = await launchPuppeteer();
        this.page = await createPage(this.browser);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
        await this.page.setViewport({ width: 1280, height: 720 });
        
        console.log('‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    async login() {
        try {
            console.log('üîç –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É Wolmar...');
            await this.page.goto('https://www.wolmar.ru/', {
                waitUntil: 'networkidle2',
                timeout: 30000
            });

            console.log('üîç –ò—â–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞...');
            
            // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            await new Promise(resolve => setTimeout(resolve, 2000));

            // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞ - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞ "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"
            let loginButton = null;
            
            // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ —Ç–µ–∫—Å—Ç—É "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è" (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π)
            console.log('üîç –ò—â–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞ –ø–æ —Ç–µ–∫—Å—Ç—É "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"...');
            try {
                const [element] = await this.page.$x('//a[contains(text(), "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")] | //button[contains(text(), "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")] | //*[contains(text(), "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")]');
                if (element) {
                    loginButton = element;
                    console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ —Ç–µ–∫—Å—Ç—É "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"');
                }
            } catch (e) {
                console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ —Ç–µ–∫—Å—Ç—É "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"');
            }
            
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
            if (!loginButton) {
                const loginSelectors = [
                    'a[href*="login"]',
                    'a[href*="auth"]',
                    'button:contains("–í–æ–π—Ç–∏")',
                    'a:contains("–í–æ–π—Ç–∏")',
                    '.login-btn',
                    '#login-btn',
                    '[data-login]'
                ];

            for (const selector of loginSelectors) {
                try {
                    loginButton = await this.page.$(selector);
                    if (loginButton) {
                        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: ${selector}`);
                        break;
                    }
                } catch (e) {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤
                }
            }

            if (!loginButton) {
                // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ —Ç–µ–∫—Å—Ç—É
                console.log('üîç –ò—â–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞ –ø–æ —Ç–µ–∫—Å—Ç—É...');
                const loginTexts = ['–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', '–í–æ–π—Ç–∏', '–í—Ö–æ–¥', 'Login', 'Sign in'];
                
                for (const text of loginTexts) {
                    try {
                        const [element] = await this.page.$x(`//a[contains(text(), '${text}')] | //button[contains(text(), '${text}')]`);
                        if (element) {
                            loginButton = element;
                            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ –ø–æ —Ç–µ–∫—Å—Ç—É: ${text}`);
                            break;
                        }
                    } catch (e) {
                        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
                    }
                }
            }

            if (!loginButton) {
                console.log('‚ùå –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç...');
                await this.page.screenshot({ path: 'wolmar-homepage.png', fullPage: true });
                throw new Error('–ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }

            console.log('üñ±Ô∏è –ù–∞–∂–∏–º–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞...');
            await loginButton.click();

            // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞
            await new Promise(resolve => setTimeout(resolve, 3000));

            console.log('üîç –ò—â–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞...');
            
            // –ò—â–µ–º –ø–æ–ª—è username –∏ password (—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ –¥–ª—è Wolmar)
            const usernameSelectors = [
                'input[name="login"]',  // Wolmar –∏—Å–ø–æ–ª—å–∑—É–µ—Ç name="login"
                'input[name="username"]',
                'input[name="email"]',
                'input[type="text"]',
                '#username',
                '#login',
                '#email'
            ];

            const passwordSelectors = [
                'input[name="password"]',  // Wolmar –∏—Å–ø–æ–ª—å–∑—É–µ—Ç name="password"
                'input[type="password"]',
                '#password'
            ];

            let usernameField = null;
            let passwordField = null;

            for (const selector of usernameSelectors) {
                try {
                    usernameField = await this.page.$(selector);
                    if (usernameField) {
                        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ username —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: ${selector}`);
                        break;
                    }
                } catch (e) {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
                }
            }

            for (const selector of passwordSelectors) {
                try {
                    passwordField = await this.page.$(selector);
                    if (passwordField) {
                        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ password —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: ${selector}`);
                        break;
                    }
                } catch (e) {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
                }
            }

            if (!usernameField || !passwordField) {
                console.log('‚ùå –ü–æ–ª—è —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç...');
                await this.page.screenshot({ path: 'wolmar-login-form.png', fullPage: true });
                throw new Error('–ü–æ–ª—è —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            }

            console.log('üìù –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞...');
            await usernameField.type(this.credentials.username);
            await passwordField.type(this.credentials.password);

            console.log('üîç –ò—â–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã...');
            
            // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ (—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ –¥–ª—è Wolmar)
            const submitSelectors = [
                'input[type="image"]',  // Wolmar –∏—Å–ø–æ–ª—å–∑—É–µ—Ç input type="image"
                'button[type="submit"]',
                'input[type="submit"]',
                'button:contains("–í–æ–π—Ç–∏")',
                'button:contains("Login")',
                'button:contains("Sign in")',
                '.submit-btn',
                '#submit-btn'
            ];

            let submitButton = null;
            for (const selector of submitSelectors) {
                try {
                    submitButton = await this.page.$(selector);
                    if (submitButton) {
                        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: ${selector}`);
                        break;
                    }
                } catch (e) {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
                }
            }

            if (!submitButton) {
                // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ —Ç–µ–∫—Å—Ç—É –∏–ª–∏ –ø–æ –∞—Ç—Ä–∏–±—É—Ç–∞–º
                const submitTexts = ['–í–æ–π—Ç–∏', 'Login', 'Sign in', '–û—Ç–ø—Ä–∞–≤–∏—Ç—å', 'Submit'];
                for (const text of submitTexts) {
                    try {
                        const [element] = await this.page.$x(`//button[contains(text(), '${text}')] | //input[@type='submit' and @value='${text}'] | //input[@type='image']`);
                        if (element) {
                            submitButton = element;
                            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ —Ç–µ–∫—Å—Ç—É: ${text}`);
                            break;
                        }
                    } catch (e) {
                        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
                    }
                }
            }

            if (!submitButton) {
                console.log('‚ùå –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç...');
                await this.page.screenshot({ path: 'wolmar-login-form-filled.png', fullPage: true });
                throw new Error('–ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }

            console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞...');
            await submitButton.click();

            // –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ä–º—ã
            await new Promise(resolve => setTimeout(resolve, 5000));

            console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—Ö–æ–¥–∞...');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å–ø–µ—à–µ–Ω –ª–∏ –≤—Ö–æ–¥
            const currentUrl = this.page.url();
            console.log(`üìç –¢–µ–∫—É—â–∏–π URL: ${currentUrl}`);

            // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—è–≤–ª—è—é—Ç—Å—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
            const successIndicators = [
                '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç',
                '–õ–æ—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞',
                '–ò—Å—Ç–æ—Ä–∏—è –≤—ã–∏–≥—Ä—ã—à–µ–π',
                '–õ–æ—Ç—ã –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤',
                '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                '–í—ã—Ö–æ–¥',
                'logout',
                'profile'
            ];

            let loginSuccess = false;
            for (const indicator of successIndicators) {
                try {
                    const element = await this.page.$x(`//*[contains(text(), '${indicator}')]`);
                    if (element.length > 0) {
                        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞: ${indicator}`);
                        loginSuccess = true;
                        break;
                    }
                } catch (e) {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
                }
            }

            if (loginSuccess) {
                console.log('üéâ –í–•–û–î –£–°–ü–ï–®–ï–ù!');
                await this.page.screenshot({ path: 'wolmar-logged-in.png', fullPage: true });
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º cookies –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                const cookies = await this.page.cookies();
                fs.writeFileSync('wolmar-cookies.json', JSON.stringify(cookies, null, 2));
                console.log('üç™ Cookies —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ wolmar-cookies.json');
                
                return true;
            } else {
                console.log('‚ùå –í—Ö–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è. –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç...');
                await this.page.screenshot({ path: 'wolmar-login-failed.png', fullPage: true });
                return false;
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ:', error.message);
            await this.page.screenshot({ path: 'wolmar-error.png', fullPage: true });
            return false;
        }
    }

    async close() {
        if (this.browser) {
            await this.browser.close();
            console.log('üîí –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç');
        }
        
        // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã Chrome
        cleanupChromeTempFiles();
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    const loginTest = new WolmarLoginTest();
    
    try {
        await loginTest.init();
        const success = await loginTest.login();
        
        if (success) {
            console.log('‚úÖ –¢–µ—Å—Ç –≤—Ö–æ–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
            console.log('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:');
            console.log('  - wolmar-logged-in.png (—É—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥)');
            console.log('  - wolmar-cookies.json (cookies –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)');
        } else {
            console.log('‚ùå –¢–µ—Å—Ç –≤—Ö–æ–¥–∞ –Ω–µ —É–¥–∞–ª—Å—è');
            console.log('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:');
            console.log('  - wolmar-homepage.png (–≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)');
            console.log('  - wolmar-login-form.png (—Ñ–æ—Ä–º–∞ –≤—Ö–æ–¥–∞)');
            console.log('  - wolmar-login-form-filled.png (–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞)');
            console.log('  - wolmar-login-failed.png (–Ω–µ—É–¥–∞—á–Ω—ã–π –≤—Ö–æ–¥)');
            console.log('  - wolmar-error.png (–æ—à–∏–±–∫–∞)');
        }
        
        // –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º –±—Ä–∞—É–∑–µ—Ä–∞
        console.log('‚è≥ –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º –±—Ä–∞—É–∑–µ—Ä–∞...');
        await new Promise(resolve => setTimeout(resolve, 5000));
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    } finally {
        await loginTest.close();
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
if (require.main === module) {
    main().catch(console.error);
}

module.exports = WolmarLoginTest;
