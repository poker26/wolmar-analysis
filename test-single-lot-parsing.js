const puppeteer = require('puppeteer-core');

async function testSingleLotParsing() {
    const lotUrl = 'https://www.wolmar.ru/auction/2137/7590959?page=3';
    
    const browser = await puppeteer.launch({
        executablePath: 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe',
        headless: true,
        args: ['--no-sandbox', '--disable-setuid-sandbox']
    });
    
    try {
        const page = await browser.newPage();
        await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36');
        
        console.log(`üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ—Ç: ${lotUrl}`);
        await page.goto(lotUrl, { waitUntil: 'domcontentloaded', timeout: 30000 });
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å HTML –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        const html = await page.content();
        console.log('üìÑ HTML –∑–∞–≥—Ä—É–∂–µ–Ω, –¥–ª–∏–Ω–∞:', html.length);
        
        // –ò—â–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∫–ª–∞—Å—Å–æ–º .values
        const valuesElements = await page.$$('.values');
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ .values: ${valuesElements.length}`);
        
        for (let i = 0; i < valuesElements.length; i++) {
            const text = await valuesElements[i].evaluate(el => el.textContent);
            console.log(`üìä .values[${i}]:`, text);
        }
        
        // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        const lotData = await page.evaluate(() => {
            const data = {};
            
            // –ù–æ–º–µ—Ä –ª–æ—Ç–∞ - –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ h5
            const lotTitle = document.querySelector('h5');
            if (lotTitle) {
                console.log('üìÑ –ó–∞–≥–æ–ª–æ–≤–æ–∫ h5:', lotTitle.textContent);
                const match = lotTitle.textContent.match(/–õ–æ—Ç\s*‚Ññ\s*(\d+)/i);
                if (match) {
                    data.lotNumber = parseInt(match[1]);
                }
            }
            
            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ—Ä–≥–∞—Ö
            const valuesDiv = document.querySelectorAll('.values')[1];
            if (valuesDiv) {
                const valuesText = valuesDiv.textContent;
                console.log('üìä –¢–µ–∫—Å—Ç .values[1]:', valuesText);
                
                // –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞
                const bidMatch = valuesText.match(/–°—Ç–∞–≤–∫–∞:\s*(\d+(?:\s?\d+)*(?:[.,]\d+)?)\s*—Ä—É–±/i);
                if (bidMatch) {
                    data.winningBid = bidMatch[1].replace(/\s/g, '').replace(',', '.');
                    console.log('üìä –ù–∞–π–¥–µ–Ω–∞ —Å—Ç–∞–≤–∫–∞:', bidMatch[1], '->', data.winningBid);
                } else {
                    console.log('‚ùå –°—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–µ–∫—Å—Ç–µ:', valuesText);
                }
                
                // –õ–∏–¥–µ—Ä
                const leaderMatch = valuesText.match(/–õ–∏–¥–µ—Ä:\s*([a-zA-Z0-9_–ê-–Ø–∞-—è]+)/i);
                if (leaderMatch) {
                    data.winnerLogin = leaderMatch[1];
                    console.log('üìä –ù–∞–π–¥–µ–Ω –ª–∏–¥–µ—Ä:', data.winnerLogin);
                }
            } else {
                console.log('‚ùå –≠–ª–µ–º–µ–Ω—Ç .values[1] –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
            
            return data;
        });
        
        console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞:', lotData);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    } finally {
        await browser.close();
    }
}

testSingleLotParsing();
