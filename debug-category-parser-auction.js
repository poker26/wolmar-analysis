/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞ —á–µ—Ä–µ–∑ Category Parser
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * node debug-category-parser-auction.js <–Ω–æ–º–µ—Ä_–∞—É–∫—Ü–∏–æ–Ω–∞> [—Å—Ç–∞—Ä—Ç–æ–≤—ã–π_–ª–æ—Ç]
 * 
 * –ü—Ä–∏–º–µ—Ä—ã:
 * node debug-category-parser-auction.js 2137
 * node debug-category-parser-auction.js 2137 150
 */

const WolmarCategoryParser = require('./wolmar-category-parser');
const config = require('./config');

async function debugAuctionParsing() {
    const args = process.argv.slice(2);
    
    if (args.length === 0) {
        console.log(`
üöÄ –û—Ç–ª–∞–¥–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞—É–∫—Ü–∏–æ–Ω–∞ —á–µ—Ä–µ–∑ Category Parser

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  node debug-category-parser-auction.js <–Ω–æ–º–µ—Ä_–∞—É–∫—Ü–∏–æ–Ω–∞> [—Å—Ç–∞—Ä—Ç–æ–≤—ã–π_–ª–æ—Ç]

–ü—Ä–∏–º–µ—Ä—ã:
  node debug-category-parser-auction.js 2137
  node debug-category-parser-auction.js 2137 150
        `);
        process.exit(1);
    }
    
    const auctionNumber = args[0];
    const startFromLot = args[1] ? parseInt(args[1]) : 1;
    
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –æ—Ç–ª–∞–¥–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞—É–∫—Ü–∏–æ–Ω–∞...');
    console.log(`üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:`);
    console.log(`   - –ù–æ–º–µ—Ä –∞—É–∫—Ü–∏–æ–Ω–∞: ${auctionNumber}`);
    console.log(`   - –°—Ç–∞—Ä—Ç–æ–≤—ã–π –ª–æ—Ç: ${startFromLot}`);
    console.log(`   - –†–µ–∂–∏–º: auction\n`);
    
    const parser = new WolmarCategoryParser(config.dbConfig, 'auction', auctionNumber);
    
    try {
        const startTime = Date.now();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä
        console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞...');
        await parser.init();
        console.log('‚úÖ –ü–∞—Ä—Å–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω\n');
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∞—É–∫—Ü–∏–æ–Ω–∞
        console.log('üéØ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∞—É–∫—Ü–∏–æ–Ω–∞...');
        await parser.parseSpecificAuction(auctionNumber, startFromLot, {
            maxLots: 10, // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            skipExisting: true,
            delayBetweenLots: 1000,
            testMode: false
        });
        
        const endTime = Date.now();
        const duration = Math.round((endTime - startTime) / 1000);
        
        console.log(`\nüéâ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ ${duration} —Å–µ–∫—É–Ω–¥!`);
        console.log(`üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
        console.log(`   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ª–æ—Ç–æ–≤: ${parser.processed}`);
        console.log(`   ‚ùå –û—à–∏–±–æ–∫: ${parser.errors}`);
        console.log(`   ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${parser.skipped}`);
        
    } catch (error) {
        console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error.message);
        console.error('Stack trace:', error.stack);
        throw error;
    } finally {
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
        try {
            if (parser.browser) {
                await parser.browser.close();
                console.log('üîí –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç');
            }
        } catch (closeError) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞:', closeError.message);
        }
    }
}

// –ó–∞–ø—É—Å–∫ –æ—Ç–ª–∞–¥–∫–∏
if (require.main === module) {
    debugAuctionParsing()
        .then(() => {
            console.log('‚úÖ –û—Ç–ª–∞–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
            process.exit(0);
        })
        .catch((error) => {
            console.error('‚ùå –û—Ç–ª–∞–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π:', error.message);
            process.exit(1);
        });
}

module.exports = { debugAuctionParsing };


