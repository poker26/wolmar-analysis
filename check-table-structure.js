const { Pool } = require('pg');
const config = require('./config');

async function checkTableStructure() {
    const pool = new Pool(config.dbConfig);
    
    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã coin_catalog...');
        
        const query = `
            SELECT column_name, data_type, is_nullable
            FROM information_schema.columns 
            WHERE table_name = 'coin_catalog'
            ORDER BY ordinal_position
        `;
        
        const result = await pool.query(query);
        
        console.log('\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã coin_catalog:');
        result.rows.forEach((row, index) => {
            console.log(`${index + 1}. ${row.column_name} (${row.data_type}) - ${row.is_nullable === 'YES' ? 'NULL' : 'NOT NULL'}`);
        });
        
        // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        console.log('\nüìä –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π:');
        const sampleQuery = `
            SELECT *
            FROM coin_catalog 
            LIMIT 3
        `;
        
        const sampleResult = await pool.query(sampleQuery);
        
        if (sampleResult.rows.length > 0) {
            const columns = Object.keys(sampleResult.rows[0]);
            console.log('–ö–æ–ª–æ–Ω–∫–∏:', columns.join(', '));
            
            sampleResult.rows.forEach((row, index) => {
                console.log(`\n–ó–∞–ø–∏—Å—å ${index + 1}:`);
                columns.forEach(col => {
                    console.log(`  ${col}: ${row[col]}`);
                });
            });
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    } finally {
        await pool.end();
    }
}

checkTableStructure();