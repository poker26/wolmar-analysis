const { Pool } = require('pg');
const config = require('./config');

const pool = new Pool(config.dbConfig);

async function checkPredictions() {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        const tableInfo = await pool.query(`
            SELECT column_name, data_type, is_nullable
            FROM information_schema.columns 
            WHERE table_name = 'lot_price_predictions'
            ORDER BY ordinal_position
        `);
        
        console.log('üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã lot_price_predictions:');
        tableInfo.rows.forEach(row => {
            console.log(`  - ${row.column_name}: ${row.data_type} (nullable: ${row.is_nullable})`);
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏
        const recentPredictions = await pool.query(`
            SELECT lot_id, predicted_price, created_at
            FROM lot_price_predictions
            ORDER BY created_at DESC
            LIMIT 5
        `);
        
        console.log('\nüìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø—Ä–æ–≥–Ω–æ–∑–æ–≤:');
        recentPredictions.rows.forEach((row, index) => {
            const date = new Date(row.created_at).toLocaleString('ru-RU');
            console.log(`  ${index + 1}. –õ–æ—Ç ${row.lot_id}: ${row.predicted_price}‚ÇΩ (—Å–æ–∑–¥–∞–Ω: ${date})`);
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ª–æ—Ç—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
        const watchlistLots = await pool.query(`
            SELECT w.lot_id, w.user_id, w.added_at
            FROM watchlist w
            ORDER BY w.added_at DESC
        `);
        
        console.log('\nüìä –õ–æ—Ç—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º:');
        watchlistLots.rows.forEach((row, index) => {
            const date = new Date(row.added_at).toLocaleString('ru-RU');
            console.log(`  ${index + 1}. –õ–æ—Ç ${row.lot_id} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${row.user_id}, –¥–æ–±–∞–≤–ª–µ–Ω: ${date})`);
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–≥–Ω–æ–∑—ã –¥–ª—è –ª–æ—Ç–æ–≤ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        if (watchlistLots.rows.length > 0) {
            const lotIds = watchlistLots.rows.map(row => row.lot_id);
            const watchlistPredictions = await pool.query(`
                SELECT w.lot_id, lpp.predicted_price, lpp.created_at
                FROM watchlist w
                LEFT JOIN lot_price_predictions lpp ON w.lot_id = lpp.lot_id
                WHERE w.lot_id = ANY($1)
                ORDER BY lpp.created_at DESC
            `, [lotIds]);
            
            console.log('\nüìä –ü—Ä–æ–≥–Ω–æ–∑—ã –¥–ª—è –ª–æ—Ç–æ–≤ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:');
            watchlistPredictions.rows.forEach((row, index) => {
                const date = row.created_at ? new Date(row.created_at).toLocaleString('ru-RU') : '–ù–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞';
                console.log(`  ${index + 1}. –õ–æ—Ç ${row.lot_id}: ${row.predicted_price || '–ù–µ—Ç'}‚ÇΩ (—Å–æ–∑–¥–∞–Ω: ${date})`);
            });
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    } finally {
        await pool.end();
    }
}

checkPredictions();
