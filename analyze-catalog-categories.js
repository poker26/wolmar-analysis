const { Pool } = require('pg');
const config = require('./config');

async function analyzeCatalogCategories() {
    const pool = new Pool(config.dbConfig);
    
    try {
        console.log('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞—Ç–∞–ª–æ–≥–∞...');
        
        // –ü—Ä–æ–≤–µ—Ä–∏–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const totalQuery = `SELECT COUNT(*) as total FROM coin_catalog`;
        const totalResult = await pool.query(totalQuery);
        console.log(`üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –∫–∞—Ç–∞–ª–æ–≥–µ: ${totalResult.rows[0].total}`);
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ –º–µ—Ç–∞–ª–ª–∞–º
        console.log('\nüîç –ê–Ω–∞–ª–∏–∑ –ø–æ –º–µ—Ç–∞–ª–ª–∞–º:');
        const metalsQuery = `
            SELECT 
                metal,
                COUNT(*) as count,
                ROUND(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM coin_catalog), 2) as percentage
            FROM coin_catalog 
            WHERE metal IS NOT NULL
            GROUP BY metal
            ORDER BY count DESC
        `;
        
        const metalsResult = await pool.query(metalsQuery);
        metalsResult.rows.forEach(row => {
            console.log(`  ${row.metal}: ${row.count} –∑–∞–ø–∏—Å–µ–π (${row.percentage}%)`);
        });
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ –Ω–æ–º–∏–Ω–∞–ª–∞–º (–∏—â–µ–º –Ω–µ-–º–æ–Ω–µ—Ç–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã)
        console.log('\nüîç –ê–Ω–∞–ª–∏–∑ –ø–æ –Ω–æ–º–∏–Ω–∞–ª–∞–º (–ø–æ–∏—Å–∫ –Ω–µ-–º–æ–Ω–µ—Ç–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤):');
        const denominationQuery = `
            SELECT 
                denomination,
                COUNT(*) as count
            FROM coin_catalog 
            WHERE denomination IS NOT NULL
            GROUP BY denomination
            ORDER BY count DESC
            LIMIT 20
        `;
        
        const denominationResult = await pool.query(denominationQuery);
        denominationResult.rows.forEach(row => {
            console.log(`  "${row.denomination}": ${row.count} –∑–∞–ø–∏—Å–µ–π`);
        });
        
        // –ò—â–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –±–µ–∑ –Ω–æ–º–∏–Ω–∞–ª–∞
        console.log('\nüîç –ü—Ä–µ–¥–º–µ—Ç—ã –±–µ–∑ –Ω–æ–º–∏–Ω–∞–ª–∞:');
        const noDenominationQuery = `
            SELECT COUNT(*) as count
            FROM coin_catalog 
            WHERE denomination IS NULL OR denomination = ''
        `;
        
        const noDenominationResult = await pool.query(noDenominationQuery);
        console.log(`  –ë–µ–∑ –Ω–æ–º–∏–Ω–∞–ª–∞: ${noDenominationResult.rows[0].count} –∑–∞–ø–∏—Å–µ–π`);
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        console.log('\nüîç –ê–Ω–∞–ª–∏–∑ –æ–ø–∏—Å–∞–Ω–∏–π (–ø–æ–∏—Å–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤):');
        
        const keywords = [
            '–º–µ–¥–∞–ª—å', '–º–µ–¥–∞–ª—å–æ–Ω', '–∑–Ω–∞—á–æ–∫', '–∑–Ω–∞–∫', '–æ—Ä–¥–µ–Ω', '–Ω–∞–≥—Ä–∞–¥–∞',
            '–±–∞–Ω–∫–Ω–æ—Ç', '–∫—É–ø—é—Ä–∞', '–±–æ–Ω–∞', '–∞—Å—Å–∏–≥–Ω–∞—Ü–∏—è', '–±—É–º–∞–≥–∞',
            '—á–∞—Å—ã', '–±—Ä–∞—Å–ª–µ—Ç', '–∫–æ–ª—å—Ü–æ', '—Ü–µ–ø–æ—á–∫–∞', '–ø–æ–¥–≤–µ—Å–∫–∞',
            '–º–æ–Ω–µ—Ç–∞', '–∫–æ–ø–µ–π–∫–∞', '—Ä—É–±–ª—å', '–¥–æ–ª–ª–∞—Ä', '–µ–≤—Ä–æ'
        ];
        
        for (const keyword of keywords) {
            const keywordQuery = `
                SELECT COUNT(*) as count
                FROM coin_catalog 
                WHERE LOWER(original_description) LIKE LOWER($1)
            `;
            
            const keywordResult = await pool.query(keywordQuery, [`%${keyword}%`]);
            if (keywordResult.rows[0].count > 0) {
                console.log(`  "${keyword}": ${keywordResult.rows[0].count} –∑–∞–ø–∏—Å–µ–π`);
            }
        }
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã —Å –≤–µ—Å–æ–º –¥—Ä–∞–≥–º–µ—Ç–∞–ª–ª–æ–≤
        console.log('\nüîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å –≤–µ—Å–æ–º –¥—Ä–∞–≥–º–µ—Ç–∞–ª–ª–æ–≤:');
        const weightQuery = `
            SELECT 
                metal,
                COUNT(*) as count,
                AVG(coin_weight) as avg_weight
            FROM coin_catalog 
            WHERE coin_weight IS NOT NULL 
            AND coin_weight > 0
            AND metal IN ('Au', 'Ag', 'Pt', 'Pd')
            GROUP BY metal
            ORDER BY count DESC
        `;
        
        const weightResult = await pool.query(weightQuery);
        weightResult.rows.forEach(row => {
            console.log(`  ${row.metal}: ${row.count} –∑–∞–ø–∏—Å–µ–π, —Å—Ä–µ–¥–Ω–∏–π –≤–µ—Å: ${parseFloat(row.avg_weight).toFixed(2)}g`);
        });
        
        // –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        console.log('\nüîç –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:');
        const examplesQuery = `
            SELECT 
                id,
                denomination,
                metal,
                coin_weight,
                year,
                original_description
            FROM coin_catalog 
            ORDER BY RANDOM()
            LIMIT 10
        `;
        
        const examplesResult = await pool.query(examplesQuery);
        examplesResult.rows.forEach((row, index) => {
            console.log(`\n${index + 1}. ID: ${row.id}`);
            console.log(`   –ù–æ–º–∏–Ω–∞–ª: "${row.denomination}"`);
            console.log(`   –ú–µ—Ç–∞–ª–ª: ${row.metal}`);
            console.log(`   –í–µ—Å: ${row.coin_weight}g`);
            console.log(`   –ì–æ–¥: ${row.year}`);
            console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: "${row.original_description?.substring(0, 100)}..."`);
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    } finally {
        await pool.end();
    }
}

analyzeCatalogCategories();
