/**
 * –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞–≤–æ–∫
 * –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç —Å–±–æ—Ä –ø–æ–ª–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞–≤–æ–∫ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å –ø–∞—Ä—Å–∏–Ω–≥–∞
 */

const BiddingHistoryTracker = require('./bidding-history-tracker');
const { Pool } = require('pg');
const puppeteer = require('puppeteer');

class EnhancedParserWithBidding {
    constructor(dbConfig, auctionNumber) {
        this.dbConfig = dbConfig;
        this.auctionNumber = auctionNumber;
        this.db = new Pool(dbConfig);
        this.biddingTracker = new BiddingHistoryTracker(dbConfig);
        this.browser = null;
        this.page = null;
    }

    async init() {
        console.log(`üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞ ${this.auctionNumber}...`);
        
        await this.biddingTracker.init();
        await this.initBrowser();
        await this.createEnhancedTables();
    }

    async initBrowser() {
        console.log('üåê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞...');
        this.browser = await puppeteer.launch({
            headless: true,
            args: [
                '--no-sandbox',
                '--disable-setuid-sandbox',
                '--disable-dev-shm-usage',
                '--disable-accelerated-2d-canvas',
                '--no-first-run',
                '--no-zygote',
                '--disable-gpu'
            ]
        });
        this.page = await this.browser.newPage();
        
        await this.page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36');
        await this.page.setViewport({ width: 1920, height: 1080 });
        
        console.log('‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    async createEnhancedTables() {
        console.log('üìä –°–æ–∑–¥–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü...');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É auction_lots
        const alterLotsTable = `
            ALTER TABLE auction_lots 
            ADD COLUMN IF NOT EXISTS bidding_history_collected BOOLEAN DEFAULT FALSE,
            ADD COLUMN IF NOT EXISTS suspicious_activity_score DECIMAL(5,2) DEFAULT 0,
            ADD COLUMN IF NOT EXISTS manipulation_indicators JSONB DEFAULT '{}'::jsonb;
        `;

        // –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å–±–æ—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞–≤–æ–∫
        const createProgressTable = `
            CREATE TABLE IF NOT EXISTS bidding_collection_progress (
                id SERIAL PRIMARY KEY,
                auction_number VARCHAR(50) NOT NULL,
                lot_number VARCHAR(50) NOT NULL,
                lot_url TEXT NOT NULL,
                bidding_history_collected BOOLEAN DEFAULT FALSE,
                bids_count INTEGER DEFAULT 0,
                collection_attempts INTEGER DEFAULT 0,
                last_attempt TIMESTAMP,
                error_message TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                UNIQUE(auction_number, lot_number)
            );
        `;

        try {
            await this.db.query(alterLotsTable);
            await this.db.query(createProgressTable);
            console.log('‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü:', error.message);
            throw error;
        }
    }

    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ –ª–æ—Ç–∞ —Å –ø–æ–ª–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–µ–π —Å—Ç–∞–≤–æ–∫
     */
    async parseLotWithBiddingHistory(lotUrl, lotNumber) {
        console.log(`üîç –ü–∞—Ä—Å–∏–Ω–≥ –ª–æ—Ç–∞ ${lotNumber} —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Å—Ç–∞–≤–æ–∫...`);
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–±–∏—Ä–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —ç—Ç–æ–≥–æ –ª–æ—Ç–∞
            const progressQuery = `
                SELECT bidding_history_collected, collection_attempts 
                FROM bidding_collection_progress 
                WHERE auction_number = $1 AND lot_number = $2
            `;
            
            const progressResult = await this.db.query(progressQuery, [this.auctionNumber, lotNumber]);
            
            if (progressResult.rows.length > 0 && progressResult.rows[0].bidding_history_collected) {
                console.log(`‚è≠Ô∏è –ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞–≤–æ–∫ –¥–ª—è –ª–æ—Ç–∞ ${lotNumber} —É–∂–µ —Å–æ–±—Ä–∞–Ω–∞`);
                return;
            }

            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ—Ç–∞
            await this.page.goto(lotUrl, { waitUntil: 'networkidle2', timeout: 30000 });
            await this.page.waitForTimeout(2000);

            // –°–æ–±–∏—Ä–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ—Ç–µ
            const lotData = await this.page.evaluate(() => {
                const data = {};
                
                // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                data.lotNumber = document.querySelector('.lot-number, .lot-id')?.textContent?.trim();
                data.description = document.querySelector('.lot-description, .coin-description')?.textContent?.trim();
                data.startingPrice = document.querySelector('.starting-price, .min-price')?.textContent?.replace(/[^\d.,]/g, '')?.replace(',', '.');
                data.currentPrice = document.querySelector('.current-price, .highest-bid')?.textContent?.replace(/[^\d.,]/g, '')?.replace(',', '.');
                data.winner = document.querySelector('.winner, .highest-bidder')?.textContent?.trim();
                data.bidsCount = document.querySelector('.bids-count, .total-bids')?.textContent?.replace(/[^\d]/g, '');
                
                return data;
            });

            // –°–æ–±–∏—Ä–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞–≤–æ–∫
            const biddingHistory = await this.page.evaluate(() => {
                const bids = [];
                
                // –†–∞–∑–ª–∏—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞–≤–æ–∫
                const selectors = [
                    '.bid-history tr',
                    '.bids-list .bid-item',
                    '.history-item',
                    '.bid-row',
                    '.auction-history tr'
                ];
                
                let bidElements = [];
                for (const selector of selectors) {
                    const elements = document.querySelectorAll(selector);
                    if (elements.length > 0) {
                        bidElements = elements;
                        break;
                    }
                }
                
                bidElements.forEach((element, index) => {
                    try {
                        const bidderElement = element.querySelector('.bidder, .user, .login, .bidder-name');
                        const amountElement = element.querySelector('.amount, .price, .bid-amount, .bid-value');
                        const timeElement = element.querySelector('.time, .date, .timestamp, .bid-time');
                        
                        if (bidderElement && amountElement) {
                            const bidder = bidderElement.textContent.trim();
                            const amount = amountElement.textContent.replace(/[^\d.,]/g, '').replace(',', '.');
                            const time = timeElement ? timeElement.textContent.trim() : new Date().toISOString();
                            
                            if (bidder && amount && !isNaN(parseFloat(amount))) {
                                bids.push({
                                    bidder: bidder,
                                    amount: parseFloat(amount),
                                    time: time,
                                    index: index
                                });
                            }
                        }
                    } catch (error) {
                        console.warn('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç–∞–≤–∫–∏:', error);
                    }
                });
                
                return bids;
            });

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ—Ç–µ
            await this.saveLotData(lotData, lotUrl);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞–≤–æ–∫
            if (biddingHistory.length > 0) {
                await this.biddingTracker.saveBiddingHistory(biddingHistory, this.auctionNumber, lotNumber);
                console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${biddingHistory.length} —Å—Ç–∞–≤–æ–∫ –¥–ª—è –ª–æ—Ç–∞ ${lotNumber}`);
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            await this.updateCollectionProgress(lotNumber, lotUrl, true, biddingHistory.length);

            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ –ª–æ—Ç–∞
            await this.analyzeLotSuspiciousPatterns(lotNumber, biddingHistory);

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ª–æ—Ç–∞ ${lotNumber}:`, error.message);
            await this.updateCollectionProgress(lotNumber, lotUrl, false, 0, error.message);
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ª–æ—Ç–µ
     */
    async saveLotData(lotData, lotUrl) {
        const upsertQuery = `
            INSERT INTO auction_lots (
                lot_number, auction_number, coin_description, 
                starting_price, final_price, winner_login, 
                bids_count, source_url, bidding_history_collected
            ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
            ON CONFLICT (lot_number, auction_number) 
            DO UPDATE SET
                coin_description = EXCLUDED.coin_description,
                starting_price = EXCLUDED.starting_price,
                final_price = EXCLUDED.final_price,
                winner_login = EXCLUDED.winner_login,
                bids_count = EXCLUDED.bids_count,
                source_url = EXCLUDED.source_url,
                bidding_history_collected = EXCLUDED.bidding_history_collected,
                parsed_at = CURRENT_TIMESTAMP
        `;

        try {
            await this.db.query(upsertQuery, [
                lotData.lotNumber,
                this.auctionNumber,
                lotData.description,
                lotData.startingPrice ? parseFloat(lotData.startingPrice) : null,
                lotData.currentPrice ? parseFloat(lotData.currentPrice) : null,
                lotData.winner,
                lotData.bidsCount ? parseInt(lotData.bidsCount) : null,
                lotUrl,
                true
            ]);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ª–æ—Ç–∞:', error.message);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å–±–æ—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞–≤–æ–∫
     */
    async updateCollectionProgress(lotNumber, lotUrl, success, bidsCount, errorMessage = null) {
        const upsertQuery = `
            INSERT INTO bidding_collection_progress (
                auction_number, lot_number, lot_url, 
                bidding_history_collected, bids_count, 
                collection_attempts, last_attempt, error_message
            ) VALUES ($1, $2, $3, $4, $5, 1, CURRENT_TIMESTAMP, $6)
            ON CONFLICT (auction_number, lot_number) 
            DO UPDATE SET
                bidding_history_collected = EXCLUDED.bidding_history_collected,
                bids_count = EXCLUDED.bids_count,
                collection_attempts = bidding_collection_progress.collection_attempts + 1,
                last_attempt = CURRENT_TIMESTAMP,
                error_message = EXCLUDED.error_message
        `;

        try {
            await this.db.query(upsertQuery, [
                this.auctionNumber,
                lotNumber,
                lotUrl,
                success,
                bidsCount,
                errorMessage
            ]);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error.message);
        }
    }

    /**
     * –ê–Ω–∞–ª–∏–∑ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ª–æ—Ç–∞
     */
    async analyzeLotSuspiciousPatterns(lotNumber, biddingHistory) {
        if (biddingHistory.length < 3) return;

        const patterns = [];
        let suspicionScore = 0;

        // 1. –ê–Ω–∞–ª–∏–∑ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å—Ç–∞–≤–æ–∫
        const timeBetweenBids = [];
        for (let i = 1; i < biddingHistory.length; i++) {
            const timeDiff = new Date(biddingHistory[i].time) - new Date(biddingHistory[i-1].time);
            timeBetweenBids.push(timeDiff);
        }

        const avgTimeBetweenBids = timeBetweenBids.reduce((a, b) => a + b, 0) / timeBetweenBids.length;
        
        // –ï—Å–ª–∏ —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –º–µ–∂–¥—É —Å—Ç–∞–≤–∫–∞–º–∏ –º–µ–Ω–µ–µ 10 —Å–µ–∫—É–Ω–¥ - –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ
        if (avgTimeBetweenBids < 10000) {
            suspicionScore += 20;
            patterns.push({
                type: 'rapid_bidding',
                description: `–ë—ã—Å—Ç—Ä—ã–µ —Å—Ç–∞–≤–∫–∏ (—Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: ${(avgTimeBetweenBids/1000).toFixed(1)}—Å)`,
                confidence: Math.min(20, suspicionScore)
            });
        }

        // 2. –ê–Ω–∞–ª–∏–∑ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        const bidderCounts = {};
        biddingHistory.forEach(bid => {
            bidderCounts[bid.bidder] = (bidderCounts[bid.bidder] || 0) + 1;
        });

        const maxBidsByOneUser = Math.max(...Object.values(bidderCounts));
        const totalBids = biddingHistory.length;
        
        // –ï—Å–ª–∏ –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–¥–µ–ª–∞–ª –±–æ–ª–µ–µ 50% —Å—Ç–∞–≤–æ–∫ - –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ
        if (maxBidsByOneUser / totalBids > 0.5) {
            suspicionScore += 30;
            patterns.push({
                type: 'dominant_bidder',
                description: `–î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π —É—á–∞—Å—Ç–Ω–∏–∫ (${(maxBidsByOneUser/totalBids*100).toFixed(1)}% —Å—Ç–∞–≤–æ–∫)`,
                confidence: Math.min(30, suspicionScore)
            });
        }

        // 3. –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ —Ü–µ–Ω
        const prices = biddingHistory.map(bid => bid.amount);
        const priceIncreases = [];
        
        for (let i = 1; i < prices.length; i++) {
            const increase = (prices[i] - prices[i-1]) / prices[i-1] * 100;
            priceIncreases.push(increase);
        }

        const avgPriceIncrease = priceIncreases.reduce((a, b) => a + b, 0) / priceIncreases.length;
        
        // –ï—Å–ª–∏ —Å—Ä–µ–¥–Ω–∏–π —Ä–æ—Å—Ç —Ü–µ–Ω—ã –±–æ–ª–µ–µ 20% –∑–∞ —Å—Ç–∞–≤–∫—É - –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ
        if (avgPriceIncrease > 20) {
            suspicionScore += 25;
            patterns.push({
                type: 'aggressive_price_increase',
                description: `–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Ä–æ—Å—Ç —Ü–µ–Ω (${avgPriceIncrease.toFixed(1)}% –∑–∞ —Å—Ç–∞–≤–∫—É)`,
                confidence: Math.min(25, suspicionScore)
            });
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        if (patterns.length > 0) {
            await this.saveLotAnalysisResults(lotNumber, patterns, suspicionScore);
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –ª–æ—Ç–∞
     */
    async saveLotAnalysisResults(lotNumber, patterns, suspicionScore) {
        const updateQuery = `
            UPDATE auction_lots 
            SET 
                suspicious_activity_score = $1,
                manipulation_indicators = $2
            WHERE lot_number = $3 AND auction_number = $4
        `;

        try {
            await this.db.query(updateQuery, [
                suspicionScore,
                JSON.stringify(patterns),
                lotNumber,
                this.auctionNumber
            ]);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞:', error.message);
        }
    }

    /**
     * –ü–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∞—É–∫—Ü–∏–æ–Ω–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Å—Ç–∞–≤–æ–∫
     */
    async parseAuctionWithBiddingHistory() {
        console.log(`üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∞—É–∫—Ü–∏–æ–Ω–∞ ${this.auctionNumber} —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Å—Ç–∞–≤–æ–∫...`);
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ª–æ—Ç–æ–≤ –∞—É–∫—Ü–∏–æ–Ω–∞
            const auctionUrl = `https://www.wolmar.ru/auction/${this.auctionNumber}`;
            await this.page.goto(auctionUrl, { waitUntil: 'networkidle2', timeout: 30000 });
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –ª–æ—Ç—ã
            const lotUrls = await this.page.evaluate(() => {
                const links = [];
                const lotLinks = document.querySelectorAll('a[href*="/lot/"], a[href*="/auction/"]');
                
                lotLinks.forEach(link => {
                    const href = link.getAttribute('href');
                    if (href && href.includes('/lot/')) {
                        links.push(href.startsWith('http') ? href : `https://www.wolmar.ru${href}`);
                    }
                });
                
                return links;
            });

            console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${lotUrls.length} –ª–æ—Ç–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞`);

            // –ü–∞—Ä—Å–∏–º –∫–∞–∂–¥—ã–π –ª–æ—Ç
            let successCount = 0;
            let errorCount = 0;

            for (let i = 0; i < lotUrls.length; i++) {
                const lotUrl = lotUrls[i];
                const lotNumber = lotUrl.split('/').pop();
                
                console.log(`\nüì¶ –ü–∞—Ä—Å–∏–Ω–≥ –ª–æ—Ç–∞ ${i + 1}/${lotUrls.length}: ${lotNumber}`);
                
                try {
                    await this.parseLotWithBiddingHistory(lotUrl, lotNumber);
                    successCount++;
                } catch (error) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ª–æ—Ç–∞ ${lotNumber}:`, error.message);
                    errorCount++;
                }

                // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                await new Promise(resolve => setTimeout(resolve, 2000));
            }

            // –§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
            console.log('\nüîç –ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤...');
            const suspiciousPatterns = await this.biddingTracker.analyzeSuspiciousPatterns(this.auctionNumber);
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            await this.biddingTracker.generateSuspiciousActivityReport(this.auctionNumber);

            console.log('\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–ê–†–°–ò–ù–ì–ê:');
            console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${successCount} –ª–æ—Ç–æ–≤`);
            console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount} –ª–æ—Ç–æ–≤`);
            console.log(`üîç –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: ${suspiciousPatterns.length}`);

            return {
                auctionNumber: this.auctionNumber,
                totalLots: lotUrls.length,
                successCount,
                errorCount,
                suspiciousPatterns
            };

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞—É–∫—Ü–∏–æ–Ω–∞ ${this.auctionNumber}:`, error.message);
            throw error;
        }
    }

    async close() {
        if (this.browser) {
            await this.browser.close();
        }
        await this.db.end();
        await this.biddingTracker.close();
        console.log('üîí –í—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã');
    }
}

module.exports = EnhancedParserWithBidding;

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if (require.main === module) {
    const dbConfig = {
        user: 'postgres.xkwgspqwebfeteoblayu',
        host: 'aws-0-eu-north-1.pooler.supabase.com',
        database: 'postgres',
        password: 'Gopapopa326+',
        port: 6543,
        ssl: { rejectUnauthorized: false }
    };

    async function runEnhancedParsing() {
        const auctionNumber = process.argv[2] || '2133';
        const parser = new EnhancedParserWithBidding(dbConfig, auctionNumber);
        
        try {
            await parser.init();
            const results = await parser.parseAuctionWithBiddingHistory();
            
            console.log('\nüéâ –ü–ê–†–°–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!');
            console.log('–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–≤–µ–¥–µ–Ω–∏—è:');
            console.log('node run-auction-analysis.js');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error.message);
        } finally {
            await parser.close();
        }
    }

    runEnhancedParsing();
}
