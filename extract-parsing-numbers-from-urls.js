const { Pool } = require('pg');
const config = require('./config');

const pool = new Pool(config.dbConfig);

async function extractParsingNumbersFromUrls() {
    try {
        console.log('üîç –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–∑ URL –ª–æ—Ç–æ–≤...');
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ URL –ª–æ—Ç–æ–≤
        const urlQuery = `
            SELECT DISTINCT source_url, auction_number
            FROM auction_lots 
            WHERE source_url IS NOT NULL 
            AND source_url LIKE '%/auction/%'
            ORDER BY auction_number DESC;
        `;
        
        const urlResult = await pool.query(urlQuery);
        console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${urlResult.rows.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö URL –ª–æ—Ç–æ–≤`);
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–∑ URL
        const parsingNumbers = new Map();
        
        urlResult.rows.forEach(row => {
            const url = row.source_url;
            const auctionNumber = row.auction_number;
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∏–∑ URL –≤–∏–¥–∞: https://www.wolmar.ru/auction/2139/lot/123
            const match = url.match(/\/auction\/(\d+)\//);
            if (match) {
                const parsingNumber = parseInt(match[1]);
                parsingNumbers.set(auctionNumber, parsingNumber);
                console.log(`  üìå –ê—É–∫—Ü–∏–æ–Ω ${auctionNumber} -> –ü–∞—Ä—Å–∏–Ω–≥: ${parsingNumber} (–∏–∑ URL: ${url})`);
            }
        });
        
        console.log(`\nüéØ –ù–∞–π–¥–µ–Ω–æ ${parsingNumbers.size} —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –∞—É–∫—Ü–∏–æ–Ω–æ–≤:`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        let totalUpdated = 0;
        for (const [auctionNumber, parsingNumber] of parsingNumbers) {
            const updateQuery = `
                UPDATE auction_lots 
                SET parsing_number = $1 
                WHERE auction_number = $2;
            `;
            
            const result = await pool.query(updateQuery, [parsingNumber, auctionNumber]);
            totalUpdated += result.rowCount;
            console.log(`  ‚úÖ –ê—É–∫—Ü–∏–æ–Ω ${auctionNumber}: –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${result.rowCount} –ª–æ—Ç–æ–≤ (–ø–∞—Ä—Å–∏–Ω–≥: ${parsingNumber})`);
        }
        
        console.log(`\nüìä –ò—Ç–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${totalUpdated} –ª–æ—Ç–æ–≤`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const statsQuery = `
            SELECT 
                auction_number,
                parsing_number,
                COUNT(*) as lots_count
            FROM auction_lots 
            WHERE auction_number IS NOT NULL
            GROUP BY auction_number, parsing_number
            ORDER BY auction_number DESC
            LIMIT 15;
        `;
        
        const statsResult = await pool.query(statsQuery);
        console.log('\nüìà –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞—É–∫—Ü–∏–æ–Ω–∞–º:');
        statsResult.rows.forEach(row => {
            const isDifferent = row.auction_number !== row.parsing_number;
            const status = isDifferent ? 'üîÑ' : '‚úÖ';
            console.log(`  ${status} –ê—É–∫—Ü–∏–æ–Ω ${row.auction_number} (–ø–∞—Ä—Å–∏–Ω–≥: ${row.parsing_number}): ${row.lots_count} –ª–æ—Ç–æ–≤`);
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞—É–∫—Ü–∏–æ–Ω—ã, –≥–¥–µ –Ω–æ–º–µ—Ä–∞ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è
        const differentNumbers = statsResult.rows.filter(row => row.auction_number !== row.parsing_number);
        if (differentNumbers.length > 0) {
            console.log(`\nüéØ –ê—É–∫—Ü–∏–æ–Ω—ã —Å —Ä–∞–∑–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏ (${differentNumbers.length}):`);
            differentNumbers.forEach(row => {
                console.log(`  üîÑ –ê—É–∫—Ü–∏–æ–Ω ${row.auction_number} -> URL /auction/${row.parsing_number}`);
            });
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error);
    } finally {
        await pool.end();
    }
}

extractParsingNumbersFromUrls();
