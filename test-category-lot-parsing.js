const WolmarCategoryParser = require('./wolmar-category-parser');
const config = require('./config');

async function testCategoryLotParsing() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ª–æ—Ç–æ–≤ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...');
    
    try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä
        const parser = new WolmarCategoryParser(config.dbConfig);
        await parser.init();
        
        console.log('‚úÖ –ü–∞—Ä—Å–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        
        // –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const categories = await parser.discoverCategories();
        console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
        
        if (categories.length === 0) {
            console.log('‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            return;
        }
        
        // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const testCategory = categories[0];
        console.log(`üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é: "${testCategory.name}"`);
        console.log(`üîó URL: ${testCategory.url}`);
        
        // –ü–∞—Ä—Å–∏–º –ª–æ—Ç—ã –∏–∑ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–º–∞–∫—Å–∏–º—É–º 3 –ª–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∞)
        const testOptions = {
            maxLotsPerCategory: 3,
            skipExisting: true,
            delayBetweenLots: 2000,
            testMode: true
        };
        
        console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –ª–æ—Ç–æ–≤...');
        const result = await parser.parseCategoryLots(testCategory.url, testCategory.name, testOptions);
        
        console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞:');
        console.log(`   - –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ª–æ—Ç–æ–≤: ${result.processed}`);
        console.log(`   - –û—à–∏–±–æ–∫: ${result.errors}`);
        console.log(`   - –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${result.skipped}`);
        
        console.log('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
        console.error(error.stack);
    } finally {
        process.exit(0);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testCategoryLotParsing();
