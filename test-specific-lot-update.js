/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ª–æ—Ç–∞
 */

const { Client } = require('pg');
const puppeteer = require('puppeteer-core');
const config = require('./config');

async function testSpecificLotUpdate() {
    const client = new Client(config.dbConfig);
    
    try {
        await client.connect();
        console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±—Ä–∞—É–∑–µ—Ä
        const browser = await puppeteer.launch({
            executablePath: 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe',
            headless: true,
            args: ['--no-sandbox', '--disable-setuid-sandbox',
            '--user-data-dir=/tmp/chrome-temp-9g8ln',
            '--disable-metrics',
            '--disable-metrics-reporting',
            '--disable-background-mode',
            '--disable-background-timer-throttling',
            '--disable-renderer-backgrounding',
            '--disable-backgrounding-occluded-windows',
            '--disable-logging',
            '--disable-gpu-logging',
            '--disable-features=TranslateUI,BlinkGenPropertyTrees,VizDisplayCompositor']
        });
        const page = await browser.newPage();
        await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36');
        
        console.log('üåê –ë—Ä–∞—É–∑–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –≥—Ä–∞–¥–∞—Ü–∏–µ–π
        function extractConditionWithGrade(conditionText) {
            if (!conditionText) return null;
            return conditionText.replace(/\s+/g, '');
        }
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ª–æ—Ç
        const testLotUrl = 'https://www.wolmar.ru/auction/2130/7555829';
        console.log(`\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ—Ç: ${testLotUrl}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ë–î
        const currentState = await client.query(`
            SELECT id, lot_number, auction_number, condition, source_url
            FROM auction_lots 
            WHERE source_url = $1;
        `, [testLotUrl]);
        
        if (currentState.rows.length > 0) {
            const lot = currentState.rows[0];
            console.log(`üìã –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ë–î:`);
            console.log(`  –õ–æ—Ç ${lot.lot_number} (–ê—É–∫—Ü–∏–æ–Ω ${lot.auction_number})`);
            console.log(`  –°–æ—Å—Ç–æ—è–Ω–∏–µ: "${lot.condition}"`);
            console.log(`  URL: ${lot.source_url}`);
            
            // –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ—Ç–∞
            console.log(`\nüîç –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ—Ç–∞...`);
            await page.goto(testLotUrl, { waitUntil: 'networkidle2', timeout: 30000 });
            await new Promise(resolve => setTimeout(resolve, 2000));
            
            const pageData = await page.evaluate(() => {
                const pageText = document.body.textContent || '';
                const conditionMatch = pageText.match(/–°–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç—å:\s*([^\n\r]+)/i);
                return conditionMatch ? conditionMatch[1].trim() : null;
            });
            
            if (pageData) {
                const newCondition = extractConditionWithGrade(pageData);
                console.log(`üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ —Å–∞–π—Ç–µ: "${pageData}" -> "${newCondition}"`);
                
                console.log(`\nüîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ:`);
                console.log(`  –ë–î: "${lot.condition}"`);
                console.log(`  –°–∞–π—Ç: "${newCondition}"`);
                console.log(`  –°–æ–≤–ø–∞–¥–∞—é—Ç: ${lot.condition === newCondition ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
                
                if (lot.condition !== newCondition) {
                    console.log(`\n‚úÖ –ù–£–ñ–ù–û –û–ë–ù–û–í–ò–¢–¨: "${lot.condition}" -> "${newCondition}"`);
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º
                    await client.query(`
                        UPDATE auction_lots 
                        SET condition = $1 
                        WHERE id = $2;
                    `, [newCondition, lot.id]);
                    
                    console.log(`üéâ –õ–æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!`);
                } else {
                    console.log(`\n‚è≠Ô∏è –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π - —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–∂–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ`);
                }
            } else {
                console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã`);
            }
        } else {
            console.log(`‚ùå –õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
        }
        
        // –¢–µ–ø–µ—Ä—å —Ç–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Å –æ–±—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        console.log(`\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Å –æ–±—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞—É–∫—Ü–∏–æ–Ω–∞ 2130:`);
        
        const auctionUrl = 'https://www.wolmar.ru/auction/2130';
        await page.goto(auctionUrl, { waitUntil: 'networkidle2', timeout: 30000 });
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        const lotsData = await page.evaluate(() => {
            const lots = [];
            const tables = document.querySelectorAll('table');
            
            tables.forEach(table => {
                const rows = table.querySelectorAll('tr');
                
                rows.forEach(row => {
                    const cells = row.querySelectorAll('td, th');
                    
                    if (cells.length >= 10) {
                        const lotLink = row.querySelector('a[href*="/auction/"]');
                        
                        if (lotLink) {
                            const lotUrl = lotLink.href;
                            const lotNumberMatch = lotUrl.match(/\/auction\/\d+\/(\d+)/);
                            const lotNumber = lotNumberMatch ? lotNumberMatch[1] : null;
                            
                            const conditionCell = cells[5];
                            const condition = conditionCell ? conditionCell.textContent.trim() : null;
                            
                            if (lotNumber && condition && condition.match(/^(MS|PF|AU|UNC|XF|VF|VG|F|G|PR|PL|Proof|Gem)/i)) {
                                lots.push({
                                    lotNumber: lotNumber,
                                    lotUrl: lotUrl,
                                    condition: condition
                                });
                            }
                        }
                    }
                });
            });
            
            return lots;
        });
        
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${lotsData.length} –ª–æ—Ç–æ–≤ —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏`);
        
        // –ò—â–µ–º –Ω–∞—à —Ç–µ—Å—Ç–æ–≤—ã–π –ª–æ—Ç
        const targetLot = lotsData.find(lot => lot.lotUrl === testLotUrl);
        if (targetLot) {
            console.log(`üéØ –ù–∞–π–¥–µ–Ω —Ü–µ–ª–µ–≤–æ–π –ª–æ—Ç –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–∞—Ä—Å–∏–Ω–≥–∞:`);
            console.log(`  –ù–æ–º–µ—Ä: ${targetLot.lotNumber}`);
            console.log(`  –°–æ—Å—Ç–æ—è–Ω–∏–µ: "${targetLot.condition}"`);
            console.log(`  URL: ${targetLot.lotUrl}`);
            
            const newCondition = extractConditionWithGrade(targetLot.condition);
            console.log(`  –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏: "${newCondition}"`);
        } else {
            console.log(`‚ùå –¶–µ–ª–µ–≤–æ–π –ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–∞—Ä—Å–∏–Ω–≥–∞`);
        }
        
        await browser.close();
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    } finally {
        await client.end();
    }
}

testSpecificLotUpdate();
