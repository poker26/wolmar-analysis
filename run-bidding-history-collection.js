/**
 * –ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–±–æ—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞–≤–æ–∫
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–≤–∞ —Ä–µ–∂–∏–º–∞: –¥–ª—è –Ω–æ–≤—ã—Ö –ª–æ—Ç–æ–≤ –∏ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
 */

const BiddingHistoryRetroactiveCollector = require('./add-bidding-history-to-existing-lots');
const NumismatParserWithBidding = require('./numismat-parser-with-bidding');

class BiddingHistoryManager {
    constructor(dbConfig) {
        this.dbConfig = dbConfig;
    }

    /**
     * –†–µ–∂–∏–º 1: –°–±–æ—Ä –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞–≤–æ–∫ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ª–æ—Ç–æ–≤
     */
    async collectForExistingLots(options = {}) {
        console.log('üîß –†–ï–ñ–ò–ú 1: –°–±–æ—Ä –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞–≤–æ–∫ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ª–æ—Ç–æ–≤');
        console.log('='.repeat(60));
        
        const collector = new BiddingHistoryRetroactiveCollector(this.dbConfig);
        
        try {
            await collector.init();
            
            const batchSize = options.batchSize || 50;
            const maxLots = options.maxLots || 1000;
            
            console.log(`üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: batchSize=${batchSize}, maxLots=${maxLots}`);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            const currentStats = await collector.getCollectionStatistics();
            console.log('\nüìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
            console.log(`   –í—Å–µ–≥–æ –ª–æ—Ç–æ–≤: ${currentStats.lots.total_lots}`);
            console.log(`   –° –∏—Å—Ç–æ—Ä–∏–µ–π —Å—Ç–∞–≤–æ–∫: ${currentStats.lots.with_bidding_history}`);
            console.log(`   –ë–µ–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞–≤–æ–∫: ${currentStats.lots.without_bidding_history}`);
            
            if (currentStats.lots.without_bidding_history === 0) {
                console.log('‚úÖ –í—Å–µ –ª–æ—Ç—ã —É–∂–µ –∏–º–µ—é—Ç –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞–≤–æ–∫!');
                return;
            }
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä
            const results = await collector.collectBiddingHistoryForExistingLots(batchSize, maxLots);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            console.log('\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–ë–û–†–ê:');
            console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ª–æ—Ç–æ–≤: ${results.processed}`);
            console.log(`   –°–æ–±—Ä–∞–Ω–æ –∏—Å—Ç–æ—Ä–∏–π —Å—Ç–∞–≤–æ–∫: ${results.biddingHistoryCollected}`);
            console.log(`   –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${results.skipped}`);
            console.log(`   –û—à–∏–±–æ–∫: ${results.errors}`);
            
            return results;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞–≤–æ–∫:', error.message);
            throw error;
        } finally {
            await collector.close();
        }
    }

    /**
     * –†–µ–∂–∏–º 2: –ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤—ã—Ö –ª–æ—Ç–æ–≤ —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Å—Ç–∞–≤–æ–∫
     */
    async parseNewLotsWithBidding(auctionNumber) {
        console.log('üîß –†–ï–ñ–ò–ú 2: –ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤—ã—Ö –ª–æ—Ç–æ–≤ —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Å—Ç–∞–≤–æ–∫');
        console.log('='.repeat(60));
        
        const parser = new NumismatParserWithBidding(this.dbConfig, auctionNumber);
        
        try {
            await parser.init();
            const results = await parser.parseAuctionWithBiddingHistory();
            
            console.log('\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–ê–†–°–ò–ù–ì–ê:');
            console.log(`   –ê—É–∫—Ü–∏–æ–Ω: ${results.auctionNumber}`);
            console.log(`   –í—Å–µ–≥–æ –ª–æ—Ç–æ–≤: ${results.totalLots}`);
            console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${results.processed}`);
            console.log(`   –°–æ–±—Ä–∞–Ω–æ –∏—Å—Ç–æ—Ä–∏–π —Å—Ç–∞–≤–æ–∫: ${results.biddingHistoryCollected}`);
            console.log(`   –û—à–∏–±–æ–∫: ${results.errors}`);
            
            return results;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –ª–æ—Ç–æ–≤:', error.message);
            throw error;
        } finally {
            await parser.close();
        }
    }

    /**
     * –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ä–µ–∂–∏–º: –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞
     */
    async runComprehensiveCollection(options = {}) {
        console.log('üöÄ –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –†–ï–ñ–ò–ú: –°–±–æ—Ä –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞–≤–æ–∫');
        console.log('='.repeat(60));
        
        const results = {
            existingLots: null,
            newLots: null,
            summary: {}
        };

        try {
            // 1. –°–±–æ—Ä –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ª–æ—Ç–æ–≤
            if (options.collectExisting !== false) {
                console.log('\nüì¶ –≠–¢–ê–ü 1: –°–±–æ—Ä –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ª–æ—Ç–æ–≤');
                results.existingLots = await this.collectForExistingLots({
                    batchSize: options.batchSize || 50,
                    maxLots: options.maxLots || 1000
                });
            }

            // 2. –ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤—ã—Ö –ª–æ—Ç–æ–≤ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä –∞—É–∫—Ü–∏–æ–Ω–∞)
            if (options.auctionNumber) {
                console.log('\nüì¶ –≠–¢–ê–ü 2: –ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤—ã—Ö –ª–æ—Ç–æ–≤');
                results.newLots = await this.parseNewLotsWithBidding(options.auctionNumber);
            }

            // –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–∫—É
            results.summary = {
                timestamp: new Date().toISOString(),
                existingLotsProcessed: results.existingLots?.processed || 0,
                existingLotsBiddingCollected: results.existingLots?.biddingHistoryCollected || 0,
                newLotsProcessed: results.newLots?.processed || 0,
                newLotsBiddingCollected: results.newLots?.biddingHistoryCollected || 0,
                totalErrors: (results.existingLots?.errors || 0) + (results.newLots?.errors || 0)
            };

            console.log('\nüéâ –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –°–ë–û–† –ó–ê–í–ï–†–®–ï–ù!');
            console.log('='.repeat(60));
            console.log(`üìä –°–í–û–î–ö–ê:`);
            console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ª–æ—Ç–æ–≤: ${results.summary.existingLotsProcessed}`);
            console.log(`   –°–æ–±—Ä–∞–Ω–æ –∏—Å—Ç–æ—Ä–∏–π –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö: ${results.summary.existingLotsBiddingCollected}`);
            console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–æ–≤—ã—Ö –ª–æ—Ç–æ–≤: ${results.summary.newLotsProcessed}`);
            console.log(`   –°–æ–±—Ä–∞–Ω–æ –∏—Å—Ç–æ—Ä–∏–π –¥–ª—è –Ω–æ–≤—ã—Ö: ${results.summary.newLotsBiddingCollected}`);
            console.log(`   –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: ${results.summary.totalErrors}`);

            console.log('\nüîç –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –∑–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è');
            console.log('node enhanced-behavior-analyzer.js');

            return results;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Å–±–æ—Ä–∞:', error.message);
            throw error;
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞–≤–æ–∫
     */
    async showStatistics() {
        console.log('üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ò–°–¢–û–†–ò–ò –°–¢–ê–í–û–ö');
        console.log('='.repeat(60));
        
        const collector = new BiddingHistoryRetroactiveCollector(this.dbConfig);
        
        try {
            await collector.init();
            const stats = await collector.getCollectionStatistics();
            
            console.log('\nüìã –û–°–ù–û–í–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
            console.log(`   –í—Å–µ–≥–æ –ª–æ—Ç–æ–≤: ${stats.lots.total_lots}`);
            console.log(`   –° –∏—Å—Ç–æ—Ä–∏–µ–π —Å—Ç–∞–≤–æ–∫: ${stats.lots.with_bidding_history}`);
            console.log(`   –ë–µ–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞–≤–æ–∫: ${stats.lots.without_bidding_history}`);
            
            const percentage = stats.lots.total_lots > 0 ? 
                (stats.lots.with_bidding_history / stats.lots.total_lots * 100).toFixed(1) : 0;
            console.log(`   –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∫—Ä—ã—Ç–∏—è: ${percentage}%`);
            
            console.log('\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ë–û–†–ê:');
            console.log(`   –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: ${stats.progress.total_attempts}`);
            console.log(`   –£—Å–ø–µ—à–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫: ${stats.progress.successful_attempts}`);
            console.log(`   –ù–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫: ${stats.progress.failed_attempts}`);
            console.log(`   –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–≤–æ–∫ –Ω–∞ –ª–æ—Ç: ${stats.progress.avg_bids_per_lot || 0}`);
            
            if (stats.lots.without_bidding_history > 0) {
                console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
                console.log('   –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–æ–±—Ä–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞–≤–æ–∫ –¥–ª—è –≤—Å–µ—Ö –ª–æ—Ç–æ–≤.');
                console.log('   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: node run-bidding-history-collection.js --existing');
            } else {
                console.log('\n‚úÖ –í—Å–µ –ª–æ—Ç—ã –∏–º–µ—é—Ç –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞–≤–æ–∫!');
                console.log('   –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–≤–µ–¥–µ–Ω–∏—è.');
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.message);
        } finally {
            await collector.close();
        }
    }
}

// CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
if (require.main === module) {
    const dbConfig = {
        user: 'postgres.xkwgspqwebfeteoblayu',
        host: 'aws-0-eu-north-1.pooler.supabase.com',
        database: 'postgres',
        password: 'Gopapopa326+',
        port: 6543,
        ssl: { rejectUnauthorized: false }
    };

    async function main() {
        const manager = new BiddingHistoryManager(dbConfig);
        const args = process.argv.slice(2);
        
        try {
            if (args.includes('--stats') || args.includes('-s')) {
                // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                await manager.showStatistics();
                
            } else if (args.includes('--existing') || args.includes('-e')) {
                // –°–±–æ—Ä –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ª–æ—Ç–æ–≤
                const batchSize = parseInt(args.find(arg => arg.startsWith('--batch='))?.split('=')[1]) || 50;
                const maxLots = parseInt(args.find(arg => arg.startsWith('--max='))?.split('=')[1]) || 1000;
                
                await manager.collectForExistingLots({ batchSize, maxLots });
                
            } else if (args.includes('--new') || args.includes('-n')) {
                // –ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤—ã—Ö –ª–æ—Ç–æ–≤
                const auctionNumber = args.find(arg => arg.startsWith('--auction='))?.split('=')[1] || '2133';
                await manager.parseNewLotsWithBidding(auctionNumber);
                
            } else if (args.includes('--comprehensive') || args.includes('-c')) {
                // –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ä–µ–∂–∏–º
                const batchSize = parseInt(args.find(arg => arg.startsWith('--batch='))?.split('=')[1]) || 50;
                const maxLots = parseInt(args.find(arg => arg.startsWith('--max='))?.split('=')[1]) || 1000;
                const auctionNumber = args.find(arg => arg.startsWith('--auction='))?.split('=')[1];
                
                await manager.runComprehensiveCollection({ 
                    batchSize, 
                    maxLots, 
                    auctionNumber,
                    collectExisting: !args.includes('--skip-existing')
                });
                
            } else {
                // –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
                console.log('üîß –ú–ï–ù–ï–î–ñ–ï–† –°–ë–û–†–ê –ò–°–¢–û–†–ò–ò –°–¢–ê–í–û–ö');
                console.log('='.repeat(60));
                console.log('\nüìã –î–û–°–¢–£–ü–ù–´–ï –ö–û–ú–ê–ù–î–´:');
                console.log('   --stats, -s                    –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É');
                console.log('   --existing, -e                 –°–±–æ—Ä –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ª–æ—Ç–æ–≤');
                console.log('   --new, -n                      –ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤—ã—Ö –ª–æ—Ç–æ–≤');
                console.log('   --comprehensive, -c            –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ä–µ–∂–∏–º');
                console.log('\nüìä –ü–ê–†–ê–ú–ï–¢–†–´:');
                console.log('   --batch=N                      –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 50)');
                console.log('   --max=N                        –ú–∞–∫—Å–∏–º—É–º –ª–æ—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1000)');
                console.log('   --auction=N                    –ù–æ–º–µ—Ä –∞—É–∫—Ü–∏–æ–Ω–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –ª–æ—Ç–æ–≤');
                console.log('   --skip-existing                –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–±–æ—Ä –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö');
                console.log('\nüí° –ü–†–ò–ú–ï–†–´:');
                console.log('   node run-bidding-history-collection.js --stats');
                console.log('   node run-bidding-history-collection.js --existing --batch=100');
                console.log('   node run-bidding-history-collection.js --new --auction=2134');
                console.log('   node run-bidding-history-collection.js --comprehensive --auction=2134');
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', error.message);
            process.exit(1);
        }
    }

    main();
}

module.exports = BiddingHistoryManager;
