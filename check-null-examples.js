const { Pool } = require('pg');
const isProduction = process.env.NODE_ENV === 'production' || process.env.PORT;
const config = require(isProduction ? './config.production' : './config');

async function checkNullExamples() {
    const pool = new Pool(config.dbConfig);
    const client = await pool.connect();

    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ —Å NULL –∑–Ω–∞—á–µ–Ω–∏—è–º–∏...\n');

        // –ü–æ—Å–º–æ—Ç—Ä–∏–º –Ω–∞ –∑–∞–ø–∏—Å–∏ —Å –Ω–æ–º–∏–Ω–∞–ª–æ–º "1" –∏ NULL –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        console.log('1Ô∏è‚É£ –ó–∞–ø–∏—Å–∏ —Å –Ω–æ–º–∏–Ω–∞–ª–æ–º "1" –∏ NULL –∑–Ω–∞—á–µ–Ω–∏—è–º–∏:');
        const nullQuery = `
            SELECT id, denomination, coin_name, year, mint, coin_weight, metal, 
                   original_description, category
            FROM coin_catalog 
            WHERE denomination = '1' 
            AND year IS NULL 
            AND coin_weight IS NULL
            ORDER BY id
            LIMIT 10
        `;
        
        const nullResults = await client.query(nullQuery);
        nullResults.rows.forEach((row, index) => {
            console.log(`\n   –ó–∞–ø–∏—Å—å ${index + 1} (ID: ${row.id}):`);
            console.log(`     –ù–æ–º–∏–Ω–∞–ª: "${row.denomination}"`);
            console.log(`     –ù–∞–∑–≤–∞–Ω–∏–µ: "${row.coin_name}"`);
            console.log(`     –ì–æ–¥: ${row.year}`);
            console.log(`     –ú–æ–Ω–µ—Ç–Ω—ã–π –¥–≤–æ—Ä: "${row.mint}"`);
            console.log(`     –í–µ—Å: ${row.coin_weight}`);
            console.log(`     –ú–µ—Ç–∞–ª–ª: ${row.metal}`);
            console.log(`     –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${row.category}`);
            console.log(`     –û–ø–∏—Å–∞–Ω–∏–µ: "${row.original_description?.substring(0, 200)}..."`);
        });

        // –ü–æ—Å–º–æ—Ç—Ä–∏–º –Ω–∞ –∑–∞–ø–∏—Å–∏ —Å —Å–µ—Ä–µ–±—Ä–æ–º –∏ NULL –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        console.log('\n2Ô∏è‚É£ –ó–∞–ø–∏—Å–∏ —Å —Å–µ—Ä–µ–±—Ä–æ–º (Ag) –∏ NULL –∑–Ω–∞—á–µ–Ω–∏—è–º–∏:');
        const silverNullQuery = `
            SELECT id, denomination, coin_name, year, mint, coin_weight, metal, 
                   original_description, category
            FROM coin_catalog 
            WHERE denomination = '1' 
            AND metal = 'Ag'
            AND year IS NULL 
            AND coin_weight IS NULL
            ORDER BY id
            LIMIT 5
        `;
        
        const silverNullResults = await client.query(silverNullQuery);
        silverNullResults.rows.forEach((row, index) => {
            console.log(`\n   –ó–∞–ø–∏—Å—å ${index + 1} (ID: ${row.id}):`);
            console.log(`     –û–ø–∏—Å–∞–Ω–∏–µ: "${row.original_description?.substring(0, 200)}..."`);
        });

        // –ü—Ä–æ–≤–µ—Ä–∏–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ —ç—Ç–æ —Ä–∞–∑–Ω—ã–µ –º–æ–Ω–µ—Ç—ã
        console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –æ–ø–∏—Å–∞–Ω–∏–π:');
        const uniqueDescriptionsQuery = `
            SELECT 
                COUNT(*) as total_records,
                COUNT(DISTINCT original_description) as unique_descriptions
            FROM coin_catalog 
            WHERE denomination = '1' 
            AND year IS NULL 
            AND coin_weight IS NULL
        `;
        
        const uniqueStats = await client.query(uniqueDescriptionsQuery);
        const stats = uniqueStats.rows[0];
        console.log(`   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π —Å –Ω–æ–º–∏–Ω–∞–ª–æ–º "1" –∏ NULL: ${stats.total_records}`);
        console.log(`   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π: ${stats.unique_descriptions}`);
        console.log(`   –ü—Ä–æ—Ü–µ–Ω—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏: ${((stats.unique_descriptions / stats.total_records) * 100).toFixed(1)}%`);

        // –ü–æ—Å–º–æ—Ç—Ä–∏–º –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π
        console.log('\n4Ô∏è‚É£ –ü—Ä–∏–º–µ—Ä—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π:');
        const uniqueDescQuery = `
            SELECT DISTINCT original_description
            FROM coin_catalog 
            WHERE denomination = '1' 
            AND year IS NULL 
            AND coin_weight IS NULL
            ORDER BY original_description
            LIMIT 10
        `;
        
        const uniqueDescResults = await client.query(uniqueDescQuery);
        uniqueDescResults.rows.forEach((row, index) => {
            console.log(`   ${index + 1}. "${row.original_description}"`);
        });

        // –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
        console.log('\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–µ–π —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏:');
        const sameDescQuery = `
            SELECT 
                original_description,
                COUNT(*) as count,
                STRING_AGG(id::text, ', ' ORDER BY id) as ids
            FROM coin_catalog 
            WHERE denomination = '1' 
            AND year IS NULL 
            AND coin_weight IS NULL
            GROUP BY original_description
            HAVING COUNT(*) > 1
            ORDER BY count DESC
            LIMIT 5
        `;
        
        const sameDescResults = await client.query(sameDescQuery);
        sameDescResults.rows.forEach((row, index) => {
            console.log(`\n   ${index + 1}. –û–ø–∏—Å–∞–Ω–∏–µ: "${row.original_description}"`);
            console.log(`      –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${row.count} –∑–∞–ø–∏—Å–µ–π`);
            console.log(`      ID: ${row.ids.substring(0, 100)}...`);
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ NULL –∑–∞–ø–∏—Å–µ–π:', error);
    } finally {
        client.release();
        await pool.end();
    }
}

checkNullExamples();
