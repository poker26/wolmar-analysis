/**
 * –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω –ª–æ—Ç–æ–≤
 * –û—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –¥–æ–ø—É—â–µ–Ω–∏—è—Ö:
 * 1) –î–ª—è –Ω–µ–¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã—Ö –º–µ—Ç–∞–ª–ª–æ–≤ (–±–µ–∑ –≤–µ—Å–∞) - —Ç–æ–ª—å–∫–æ –Ω—É–º–∏–∑–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Ü–µ–Ω–∫–∞
 * 2) –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —É–∂–µ —É—á–∏—Ç—ã–≤–∞—é—Ç –≤—Å–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ (—Ç–∏—Ä–∞–∂, —Ä–µ–¥–∫–æ—Å—Ç—å –∏ —Ç.–ø.)
 */

const { Client } = require('pg');
const config = require('./config');

class SimplifiedPricePredictor {
    constructor() {
        this.dbConfig = config.dbConfig;
        this.dbClient = new Client(this.dbConfig);
        
        // –¶–µ–Ω—ã –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã—Ö –º–µ—Ç–∞–ª–ª–æ–≤ (–¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏)
        this.preciousMetalPrices = {
            'Au': 5000,  // ‚ÇΩ/–≥ –∑–∞ —á–∏—Å—Ç–æ–µ –∑–æ–ª–æ—Ç–æ
            'Ag': 80,    // ‚ÇΩ/–≥ –∑–∞ —á–∏—Å—Ç–æ–µ —Å–µ—Ä–µ–±—Ä–æ  
            'Pt': 3000,  // ‚ÇΩ/–≥ –∑–∞ –ø–ª–∞—Ç–∏–Ω—É
            'Pd': 2000   // ‚ÇΩ/–≥ –∑–∞ –ø–∞–ª–ª–∞–¥–∏–π
        };
        
        // –ü—Ä–æ–±—ã –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã—Ö –º–µ—Ç–∞–ª–ª–æ–≤
        this.metalPurities = {
            'Au': 0.9,   // 900 –ø—Ä–æ–±–∞
            'Ag': 0.9,   // 900 –ø—Ä–æ–±–∞
            'Pt': 0.95,  // 950 –ø—Ä–æ–±–∞
            'Pd': 0.95   // 950 –ø—Ä–æ–±–∞
        };
        
        // –ö–∞–ª–∏–±—Ä–æ–≤–æ—á–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –Ω—É–º–∏–∑–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞—Ü–µ–Ω–æ–∫
        this.numismaticPremiums = {};
    }

    async init() {
        await this.dbClient.connect();
        console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    }

    // –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –Ω—É–º–∏–∑–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞—Ü–µ–Ω–æ–∫ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    async calibrateNumismaticPremiums() {
        console.log('\nüîß –ö–ê–õ–ò–ë–†–û–í–ö–ê –ù–£–ú–ò–ó–ú–ê–¢–ò–ß–ï–°–ö–ò–• –ù–ê–¶–ï–ù–û–ö:');
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º –∏ –º–µ—Ç–∞–ª–ª–∞–º
        const calibrationData = await this.dbClient.query(`
            SELECT 
                condition,
                metal,
                COUNT(*) as sample_size,
                AVG(winning_bid) as avg_price,
                AVG(weight) as avg_weight,
                PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY winning_bid) as median_price
            FROM auction_lots 
            WHERE winning_bid IS NOT NULL 
                AND winning_bid > 0
                AND condition IS NOT NULL
                AND metal IS NOT NULL
            GROUP BY condition, metal
            HAVING COUNT(*) >= 3
            ORDER BY avg_price DESC;
        `);
        
        console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ ${calibrationData.rows.length} –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –¥–ª—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏`);
        
        // –°–æ–∑–¥–∞–µ–º –∫–∞–ª–∏–±—Ä–æ–≤–æ—á–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
        this.numismaticPremiums = {};
        
        for (const row of calibrationData.rows) {
            const key = `${row.condition}_${row.metal}`;
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω—É–º–∏–∑–º–∞—Ç–∏—á–µ—Å–∫—É—é –Ω–∞—Ü–µ–Ω–∫—É
            let numismaticPremium = row.avg_price; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å—è —Ü–µ–Ω–∞ - –Ω—É–º–∏–∑–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Ü–µ–Ω–∫–∞
            
            // –î–ª—è –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã—Ö –º–µ—Ç–∞–ª–ª–æ–≤ –≤—ã—á–∏—Ç–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–µ—Ç–∞–ª–ª–∞
            if (this.preciousMetalPrices[row.metal] && row.avg_weight) {
                const metalValue = row.avg_weight * this.metalPurities[row.metal] * this.preciousMetalPrices[row.metal];
                numismaticPremium = Math.max(0, row.avg_price - metalValue);
            }
            
            this.numismaticPremiums[key] = {
                numismaticPremium: numismaticPremium,
                totalPrice: row.avg_price,
                medianPrice: row.median_price,
                sampleSize: row.sample_size,
                avgWeight: row.avg_weight,
                metalValue: this.preciousMetalPrices[row.metal] && row.avg_weight ? 
                    row.avg_weight * this.metalPurities[row.metal] * this.preciousMetalPrices[row.metal] : 0
            };
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10 –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
        console.log('\nüìã –¢–æ–ø-10 –∫–æ–º–±–∏–Ω–∞—Ü–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏–µ+–º–µ—Ç–∞–ª–ª:');
        calibrationData.rows.slice(0, 10).forEach((row, index) => {
            const key = `${row.condition}_${row.metal}`;
            const premium = this.numismaticPremiums[key];
            console.log(`  ${index + 1}. ${row.condition} + ${row.metal}: ${row.sample_size} –ª–æ—Ç–æ–≤`);
            console.log(`     –û–±—â–∞—è —Ü–µ–Ω–∞: ${Math.round(row.avg_price).toLocaleString()}‚ÇΩ`);
            console.log(`     –ù—É–º–∏–∑–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Ü–µ–Ω–∫–∞: ${Math.round(premium.numismaticPremium).toLocaleString()}‚ÇΩ`);
            if (premium.metalValue > 0) {
                console.log(`     –°—Ç–æ–∏–º–æ—Å—Ç—å –º–µ—Ç–∞–ª–ª–∞: ${Math.round(premium.metalValue).toLocaleString()}‚ÇΩ`);
            }
        });
        
        return this.numismaticPremiums;
    }

    // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
    async predictPrice(lot) {
        const { metal, weight, condition, year, letters, coin_description } = lot;
        
        // 1. –ò—â–µ–º —Ç–æ—á–Ω—É—é –∫–∞–ª–∏–±—Ä–æ–≤–∫—É
        const calibrationKey = `${condition}_${metal}`;
        const calibration = this.numismaticPremiums[calibrationKey];
        
        if (calibration && calibration.sampleSize >= 3) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            let predictedPrice = calibration.medianPrice; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–¥–∏–∞–Ω—É –∫–∞–∫ –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω—É—é
            
            // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –≤–µ—Å –¥–ª—è –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã—Ö –º–µ—Ç–∞–ª–ª–æ–≤
            if (weight && calibration.avgWeight && calibration.avgWeight > 0 && this.preciousMetalPrices[metal]) {
                const weightRatio = weight / calibration.avgWeight;
                const metalValue = weight * this.metalPurities[metal] * this.preciousMetalPrices[metal];
                const numismaticPremium = calibration.numismaticPremium;
                predictedPrice = metalValue + numismaticPremium;
            }
            
            // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –≥–æ–¥ (–Ω–µ–±–æ–ª—å—à–∞—è)
            if (year && !isNaN(year)) {
                const yearNum = parseInt(year);
                if (yearNum < 1800) {
                    predictedPrice *= 1.2; // +20% –∑–∞ –æ—á–µ–Ω—å —Å—Ç–∞—Ä—ã–µ
                } else if (yearNum < 1900) {
                    predictedPrice *= 1.1; // +10% –∑–∞ –¥–æ—Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–µ
                }
            }
            
            return {
                predictedPrice: Math.round(predictedPrice),
                metalValue: this.preciousMetalPrices[metal] && weight ? 
                    Math.round(weight * this.metalPurities[metal] * this.preciousMetalPrices[metal]) : 0,
                numismaticPremium: Math.round(predictedPrice - (this.preciousMetalPrices[metal] && weight ? 
                    weight * this.metalPurities[metal] * this.preciousMetalPrices[metal] : 0)),
                confidence: Math.min(0.95, 0.5 + (calibration.sampleSize / 50)), // –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –≤—ã–±–æ—Ä–∫–∏
                method: 'calibrated',
                sampleSize: calibration.sampleSize
            };
        }
        
        // 2. –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ—á–Ω–æ–π –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
        return this.simplePrediction(lot);
    }

    // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Å–ª—É—á–∞–µ–≤ –±–µ–∑ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
    simplePrediction(lot) {
        const { metal, weight, condition } = lot;
        
        // –ë–∞–∑–æ–≤—ã–µ —Ü–µ–Ω—ã –ø–æ –º–µ—Ç–∞–ª–ª–∞–º (–∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö)
        const basePrices = {
            'Au': 50000,  // –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ –∑–æ–ª–æ—Ç–æ–π –º–æ–Ω–µ—Ç—ã
            'Ag': 5000,   // –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ —Å–µ—Ä–µ–±—Ä—è–Ω–æ–π –º–æ–Ω–µ—Ç—ã
            'Cu': 2000,   // –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ –º–µ–¥–Ω–æ–π –º–æ–Ω–µ—Ç—ã
            'Fe': 1000,   // –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ –∂–µ–ª–µ–∑–Ω–æ–π –º–æ–Ω–µ—Ç—ã
            'Ni': 1500,   // –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ –Ω–∏–∫–µ–ª–µ–≤–æ–π –º–æ–Ω–µ—Ç—ã
            'Pt': 80000,  // –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ –ø–ª–∞—Ç–∏–Ω–æ–≤–æ–π –º–æ–Ω–µ—Ç—ã
            'Pd': 60000   // –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ –ø–∞–ª–ª–∞–¥–∏–µ–≤–æ–π –º–æ–Ω–µ—Ç—ã
        };
        
        // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ)
        const conditionMultipliers = {
            'MS64': 2.0, 'MS61': 1.8, 'MS62': 1.6, 'MS65': 1.4, 'MS63': 1.2, 'MS60': 1.0, 'MS66': 0.8,
            'MS': 1.0, 'AU55': 1.5, 'AU58': 1.3, 'AU': 0.6, 'AU/UNC': 0.7,
            'UNC': 0.5, 'XF+/AU': 0.6, 'XF': 0.4, 'VF': 0.3, 'F': 0.2, 'G': 0.1,
            'PL': 0.8, 'XX': 0.9, 'Superb': 0.7, 'Gem': 0.6, 'Ch': 0.7
        };
        
        const basePrice = basePrices[metal] || 1000;
        const conditionMultiplier = conditionMultipliers[condition] || 0.3;
        
        let predictedPrice = basePrice * conditionMultiplier;
        
        // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –≤–µ—Å –¥–ª—è –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã—Ö –º–µ—Ç–∞–ª–ª–æ–≤
        if (weight && weight > 0 && this.preciousMetalPrices[metal]) {
            const metalValue = weight * this.metalPurities[metal] * this.preciousMetalPrices[metal];
            const numismaticPremium = predictedPrice * 0.8; // 80% –Ω—É–º–∏–∑–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Ü–µ–Ω–∫–∞
            predictedPrice = metalValue + numismaticPremium;
        }
        
        return {
            predictedPrice: Math.round(predictedPrice),
            metalValue: this.preciousMetalPrices[metal] && weight ? 
                Math.round(weight * this.metalPurities[metal] * this.preciousMetalPrices[metal]) : 0,
            numismaticPremium: Math.round(predictedPrice - (this.preciousMetalPrices[metal] && weight ? 
                weight * this.metalPurities[metal] * this.preciousMetalPrices[metal] : 0)),
            confidence: 0.3, // –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
            method: 'simple',
            sampleSize: 0
        };
    }

    // –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞
    async predictCurrentAuctionPrices(auctionNumber) {
        console.log(`\nüîÆ –£–ü–†–û–©–ï–ù–ù–û–ï –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞ ${auctionNumber}:`);
        
        // –ö–∞–ª–∏–±—Ä—É–µ–º –º–æ–¥–µ–ª—å
        await this.calibrateNumismaticPremiums();
        
        // –ü–æ–ª—É—á–∞–µ–º –ª–æ—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞
        const lots = await this.dbClient.query(`
            SELECT 
                id, lot_number, condition, metal, weight, year, letters,
                winning_bid, coin_description
            FROM auction_lots 
            WHERE auction_number = $1
            ORDER BY lot_number
            LIMIT 30;
        `, [auctionNumber]);
        
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${lots.rows.length} –ª–æ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è`);
        
        const predictions = [];
        let totalAccuracy = 0;
        let validPredictions = 0;
        let calibratedCount = 0;
        let simpleCount = 0;
        
        for (const lot of lots.rows) {
            const prediction = await this.predictPrice(lot);
            
            predictions.push({
                lotId: lot.id,
                lotNumber: lot.lot_number,
                condition: lot.condition,
                metal: lot.metal,
                weight: lot.weight,
                year: lot.year,
                predictedPrice: prediction.predictedPrice,
                metalValue: prediction.metalValue,
                numismaticPremium: prediction.numismaticPremium,
                confidence: prediction.confidence,
                method: prediction.method,
                sampleSize: prediction.sampleSize,
                actualPrice: lot.winning_bid,
                description: lot.coin_description
            });
            
            if (prediction.method === 'calibrated') calibratedCount++;
            else simpleCount++;
            
            console.log(`üìã –õ–æ—Ç ${lot.lot_number}: ${lot.condition} | ${lot.metal} | ${lot.weight || '–Ω–µ—Ç'}–≥`);
            console.log(`   –ü—Ä–æ–≥–Ω–æ–∑: ${prediction.predictedPrice.toLocaleString()}‚ÇΩ (${prediction.method}, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${(prediction.confidence * 100).toFixed(0)}%)`);
            console.log(`   –ú–µ—Ç–∞–ª–ª: ${prediction.metalValue.toLocaleString()}‚ÇΩ | –ù–∞—Ü–µ–Ω–∫–∞: ${prediction.numismaticPremium.toLocaleString()}‚ÇΩ`);
            if (prediction.sampleSize > 0) {
                console.log(`   –í—ã–±–æ—Ä–∫–∞: ${prediction.sampleSize} –ª–æ—Ç–æ–≤`);
            }
            
            if (lot.winning_bid) {
                const accuracy = Math.abs(prediction.predictedPrice - lot.winning_bid) / lot.winning_bid * 100;
                const accuracyPercent = Math.max(0, 100 - accuracy);
                console.log(`   –§–∞–∫—Ç: ${lot.winning_bid.toLocaleString()}‚ÇΩ | –¢–æ—á–Ω–æ—Å—Ç—å: ${accuracyPercent.toFixed(1)}%`);
                totalAccuracy += accuracyPercent;
                validPredictions++;
            }
            console.log('');
        }
        
        if (validPredictions > 0) {
            const avgAccuracy = totalAccuracy / validPredictions;
            console.log(`üìä –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: ${avgAccuracy.toFixed(1)}%`);
            console.log(`üìä –ö–∞–ª–∏–±—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: ${calibratedCount}, —É–ø—Ä–æ—â–µ–Ω–Ω—ã—Ö: ${simpleCount}`);
        }
        
        return predictions;
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    async savePredictions(predictions) {
        console.log('\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É–ø—Ä–æ—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
        
        // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        await this.dbClient.query(`
            CREATE TABLE IF NOT EXISTS lot_price_predictions (
                id SERIAL PRIMARY KEY,
                lot_id INTEGER UNIQUE REFERENCES auction_lots(id),
                predicted_price DECIMAL(12,2),
                metal_value DECIMAL(12,2),
                numismatic_premium DECIMAL(12,2),
                confidence_score DECIMAL(3,2),
                prediction_method VARCHAR(50) DEFAULT 'simplified_model',
                created_at TIMESTAMP DEFAULT NOW()
            );
        `);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã
        for (const prediction of predictions) {
            await this.dbClient.query(`
                INSERT INTO lot_price_predictions 
                (lot_id, predicted_price, metal_value, numismatic_premium, confidence_score, prediction_method)
                VALUES ($1, $2, $3, $4, $5, $6)
                ON CONFLICT (lot_id) DO UPDATE SET
                    predicted_price = EXCLUDED.predicted_price,
                    metal_value = EXCLUDED.metal_value,
                    numismatic_premium = EXCLUDED.numismatic_premium,
                    confidence_score = EXCLUDED.confidence_score,
                    prediction_method = EXCLUDED.prediction_method,
                    created_at = NOW();
            `, [
                prediction.lotId,
                prediction.predictedPrice,
                prediction.metalValue,
                prediction.numismaticPremium,
                prediction.confidence,
                prediction.method
            ]);
        }
        
        console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${predictions.length} —É–ø—Ä–æ—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤`);
    }

    async run() {
        try {
            await this.init();
            
            console.log('üîÆ –£–ü–†–û–©–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ü–†–û–ì–ù–û–ó–ò–†–û–í–ê–ù–ò–Ø –¶–ï–ù –õ–û–¢–û–í');
            console.log('üìã –ú–æ–¥–µ–ª—å –æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –Ω—É–º–∏–∑–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞—Ü–µ–Ω–∫–∞—Ö –∏–∑ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö');
            console.log('üìã –î–æ–ø—É—â–µ–Ω–∏—è: –¥–ª—è –Ω–µ–¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã—Ö –º–µ—Ç–∞–ª–ª–æ–≤ - —Ç–æ–ª—å–∫–æ –Ω—É–º–∏–∑–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Ü–µ–Ω–∫–∞');
            
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–º –∞—É–∫—Ü–∏–æ–Ω–µ
            const predictions = await this.predictCurrentAuctionPrices('964');
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã
            await this.savePredictions(predictions);
            
            console.log('\n‚úÖ –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
        } finally {
            await this.dbClient.end();
        }
    }
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    async saveSinglePrediction(lotId, prediction) {
        await this.dbClient.query(`
            INSERT INTO lot_price_predictions 
            (lot_id, predicted_price, metal_value, numismatic_premium, confidence_score, prediction_method)
            VALUES ($1, $2, $3, $4, $5, $6)
            ON CONFLICT (lot_id) DO UPDATE SET
                predicted_price = EXCLUDED.predicted_price,
                metal_value = EXCLUDED.metal_value,
                numismatic_premium = EXCLUDED.numismatic_premium,
                confidence_score = EXCLUDED.confidence_score,
                prediction_method = EXCLUDED.prediction_method,
                created_at = NOW();
        `, [
            lotId,
            prediction.predictedPrice,
            prediction.metalValue,
            prediction.numismaticPremium,
            prediction.confidence,
            prediction.method
        ]);
    }
    
    // –ü–µ—Ä–µ—Å—á–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ª–æ—Ç–æ–≤
    async recalculateForLots(lotIds) {
        try {
            console.log(`üîÑ –ü–µ—Ä–µ—Å—á–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –¥–ª—è ${lotIds.length} –ª–æ—Ç–æ–≤...`);
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ª–æ—Ç–æ–≤
            const lotsQuery = `
                SELECT id, lot_number, auction_number, coin_description, condition, metal, weight, year
                FROM auction_lots 
                WHERE id = ANY($1)
            `;
            const lotsResult = await this.dbClient.query(lotsQuery, [lotIds]);
            const lots = lotsResult.rows;
            
            console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${lots.length} –ª–æ—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞`);
            
            if (lots.length === 0) {
                console.log('‚ùå –õ–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                return;
            }
            
            // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ª–æ—Ç–∞
            let recalculatedCount = 0;
            for (const lot of lots) {
                try {
                    console.log(`üîÑ –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –ª–æ—Ç–∞ ${lot.lot_number} (ID: ${lot.id})...`);
                    
                    const prediction = await this.predictPrice(lot);
                    if (prediction) {
                        await this.saveSinglePrediction(lot.id, prediction);
                        recalculatedCount++;
                        console.log(`‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –ª–æ—Ç–∞ ${lot.lot_number}: ${prediction.predicted_price}‚ÇΩ`);
                    } else {
                        console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –ª–æ—Ç–∞ ${lot.lot_number}`);
                    }
                } catch (error) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è –ª–æ—Ç–∞ ${lot.lot_number}:`, error.message);
                }
            }
            
            console.log(`‚úÖ –ü–µ—Ä–µ—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: ${recalculatedCount} –∏–∑ ${lots.length} –ª–æ—Ç–æ–≤`);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –¥–ª—è –ª–æ—Ç–æ–≤:', error);
        } finally {
            await this.dbClient.end();
        }
    }
}

// –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
async function main() {
    const predictor = new SimplifiedPricePredictor();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    const args = process.argv.slice(2);
    const watchlistIndex = args.indexOf('--watchlist');
    
    if (watchlistIndex !== -1 && args[watchlistIndex + 1]) {
        // –†–µ–∂–∏–º –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ª–æ—Ç–æ–≤ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        const lotIds = args[watchlistIndex + 1].split(',').map(id => parseInt(id.trim()));
        console.log(`üîÑ –ü–µ—Ä–µ—Å—á–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –¥–ª—è –ª–æ—Ç–æ–≤ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: ${lotIds.join(', ')}`);
        await predictor.recalculateForLots(lotIds);
    } else {
        // –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º - –ø–µ—Ä–µ—Å—á–µ—Ç –¥–ª—è –≤—Å–µ—Ö –ª–æ—Ç–æ–≤
        await predictor.run();
    }
}

main();
